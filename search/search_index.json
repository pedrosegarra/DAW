{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Despliegue de aplicaciones web","text":""},{"location":"#indice","title":"\u00cdndice","text":"<p>Apuntes y pr\u00e1cticas del m\u00f3dulo Despliegue de aplicaciones web de 2\u00ba de DAW</p> <ul> <li>0 - Introducci\u00f3n</li> <li>1 - Control de versiones</li> <li>2 - Contenedores</li> <li>3 - Arquitectura web - Implantaci\u00f3n y admnistraci\u00f3n de servidores web</li> <li>4 - Servicios de red implicados en el despliegue de aplicaciones web - DNS y LDAP</li> <li>5 - Servicios de red implicados en el despliegue de aplicaciones web - FTP</li> <li>6 - Servidores de aplicaciones</li> <li>7 - CI/CD (Integraci\u00f3n y despliegue continuo)</li> </ul>"},{"location":"#tabla-de-versiones","title":"Tabla de versiones","text":"version Autor Comentarios 0.0 Ra\u00fal Riesco Montes Versi\u00f3n original de estos apuntes del compa\u00f1ero Ra\u00fal Riesco, del IES Severo Ochoa de Elche Curso23/24 Jos\u00e9 Mu\u00f1oz Jimeno y Noelia Beltr\u00e1n Ma\u00f1as Adaptaci\u00f3n de los materiales a nueva normativa y necesidades del IES El Camin\u00e0s. Curso24/25 Jos\u00e9 Mu\u00f1oz Jimeno Modificaci\u00f3n de los materiales para el nuevo curso escolar. Curso25/26 Pedro Segarra Cabedo Adaptaci\u00f3n del curso con la incorporaci\u00f3n de la dual-empresa y cambio de horas de docencia.4 a 3 ## Marco normativo El presente m\u00f3dulo profesional se enmarca en el 2\u00ba curso del t\u00edtulo de T\u00e9cnico Superior en Desarrollo de Aplicaciones Web. Dicho t\u00edtulo viene regulado por: <ul> <li>Real Decreto 686/2010, de 20 de mayo, por el que se establece el t\u00edtulo de T\u00e9cnico Superior en Desarrollo de Aplicaciones Web y se fijan sus ense\u00f1anzas m\u00ednimas.</li> <li>Real Decreto 405/2023, de 29 de mayo, por el que se actualizan los t\u00edtulos de la formaci\u00f3n profesional del sistema educativo de T\u00e9cnico Superior en Desarrollo de Aplicaciones Multiplataforma y T\u00e9cnico Superior en Desarrollo de Aplicaciones Web, de la familia profesional Inform\u00e1tica y Comunicaciones, y se fijan sus ense\u00f1anzas m\u00ednimas., que modifica el RD 686/2010 en sus art\u00edculos 2, 5, 6, 8, 9 y el anexo I, donde se describen los \"Resultados de aprendizaje y criterios de evaluaci\u00f3n\" as\u00ed como los \"Contenidos b\u00e1sicos\" y \"Orientaciones pedag\u00f3gicas\" de los distintos m\u00f3dulos profesionales que conforman el t\u00edtulo.</li> </ul> <p>El curr\u00edculo del m\u00f3dulo viene definido, a nivel auton\u00f3mico por la siguiente normativa:</p> <ul> <li>ORDEN 60/2012, de 25 de septiembre, de la Conselleria de Educaci\u00f3n, Formaci\u00f3n y Empleo por la que se establece para la Comunitat Valenciana el curr\u00edculo del ciclo formativo de Grado Superior correspondiente al t\u00edtulo de T\u00e9cnico Superior en Desarrollo de Aplicaciones Web. donde quedan desarrollados los \"Contenidos\" completos y establecida su duraci\u00f3n en la Comunidad Valenciana (80h - 4h/semana durante 20 semanas)</li> </ul>"},{"location":"#licencia","title":"Licencia","text":"<p>Esta obra est\u00e1 bajo una Licencia Creative Commons Atribuci\u00f3n-NoComercial-CompartirIgual 4.0 Internacional.</p> <p></p>"},{"location":"Ud0%20Introduccion/P0_1/","title":"Linux Server en AWS Academy","text":"<p>En esta nota veremos c\u00f3mo crear un servidor Linux en AWS. El servidor Linux no tendr\u00e1 entorno gr\u00e1fico, s\u00f3lo de comandos, por lo que nos bastar\u00e1 acceder a \u00e9l por SSH.</p> <p>Primero, debemos acceder al portal de AWS Academy utilizando nuestra cuenta de AWS Academy.</p> <p></p> <p></p> <p>En las siguientes im\u00e1genes, mostraremos con un cuadro rojo las opciones a selecciona o en aquellas que deben cambiarse o revisarse. Puedes olvidarte del resto de las opciones disponibles por ahora.</p> <p>Accede al LMS, donde encontrar\u00e1s los cursos disponibles.</p> <p></p> <p>Busca el Learner Lab que tu profesor ha preparado para este curso. Previamente te habr\u00e1 invitado y habr\u00e1s tenido que aceptar la invitaci\u00f3n para tener acceso al mismo.</p> <p></p> <p>Selecciona \"M\u00f3dulos\" o \"Contenidos\" para acceder al laboratorio.</p> <p></p> <p>Abre el \"Laboratorio de Aprendizaje\".</p> <p></p> <p>Inicia el laboratorio:</p> <p></p> <p>Una vez iniciado, ver\u00e1s un punto verde junto a AWS. Haz clic all\u00ed para abrir la consola de AWS y comenzar a trabajar.</p> <p></p> <p>Ahora tienes acceso a la consola de AWS. Dependiendo de tu uso previo de esta consola, es posible que veas diferentes elementos en la pantalla.</p> <p></p> <p>En AWS, los servidores virtuales se llaman EC2, as\u00ed que comencemos por crear un EC2. Puedes hacerlo de diferentes maneras. Veamos una de ellas. Haz clic sobre \"EC2\" y se te abrir\u00e1 una nueva pantalla. En esta selecciona \"Lanzar instancia\"</p> <p></p> <p>Ahora debemos proporcionar los par\u00e1metros necesarios para crear la m\u00e1quina. Sigue las pantallas con los datos proporcionados.</p> <p>Vamos a crear un servidor linux Debian. En primer lugar seleccionamos un nombre y tipo de servidor:</p> <p></p> <p>A continuaci\u00f3n, en \"Tipo de instancia\" seleccionaremos el procesador y la memoria. Ten en cuenta que a mayor potencia, mayor costo. Para esta pr\u00e1ctica nos bastar\u00e1 el m\u00e1s sencillo.</p> <p></p> <p>La secci\u00f3n de \"Par de claves\" (inicio de sesi\u00f3n) es muy importante, ya que aqu\u00ed crearemos el par de claves que nos permitir\u00e1 acceder al servidor de forma remota. Creemos un nuevo par de claves que nos pueden servir para el resto del curso. Te recomiendo que nombres el par de claves como \"daw\".</p> <p></p> <p>Tras crear el par de claves se te abrir\u00e1 un cuadro de di\u00e1logo para guardar la clave privada en tu ordenador. Aseg\u00farate de guardarla en lugar seguro o no podr\u00e1s acceder al servidor despu\u00e9s. Te recomiendo crearte una carpeta donde guardes todo lo de este m\u00f3dulo y gu\u00e1rdala ah\u00ed. Aunque no es imprescindible te recomiendo cambiar el nombre al archivo por \"daw.pem\" para que sea igual al que usaremos en el resto de pr\u00e1cticas.</p> <p></p> <p>Ahora, tras volver a la pantalla anterior, selecciona el par de claves generadas.</p> <p></p> <p>Debemos definir la configuraci\u00f3n de red de nuestra VM. En AWS al Firewall se le denomina \"Grupo de seguridad\", y en \u00e9l definiremos todas las reglas necesarias para permitir y denegar accesos a nuestra VM. En este caso s\u00f3lo habilitaremos el acceso por SSHpara gestionar la m\u00e1quina, as\u00ed que bastar\u00e1 con aceptar la configuraci\u00f3n por defecto ofrecida.</p> <p>Un aspecto importante a la hora de mantener los recursos organizados en AWS es nombrarlos adecuadamente. El grupo de seguridad recibir\u00e1 un nombre aleatorio que no podremos identificar despu\u00e9s f\u00e1cilmente. As\u00ed que antes de nada le cambiaremos el nombre y le pondremos el mismo que a nuestra m\u00e1quina. Para ello haz clic en \"Editar\".</p> <p></p> <p>Ahora cambia el nombre y la descripci\u00f3n del grupo de seguridad como en la imagen.</p> <p></p> <p>Finalmente, debemos configurar el almacenamiento. Proporcionemos un volumen de 20 GiB.</p> <p></p> <p>Verifica todas las opciones seleccionadas y lanza la instancia.</p> <p></p> <p>Si todo va bien, la instancia se crear\u00e1 y obtendremos un mensaje que lo indica.</p> <p></p> <p>Si hacemos click sobre el c\u00f3digo de la instancia pasaremos a la consola de EC2 y veremos que la VM est\u00e1 en ejecuci\u00f3n y todos sus datos relacionados, entre ellos la direcci\u00f3n IP p\u00fablica que necesitaremos m\u00e1s tarde para acceder a la misma. Ojo, no confundamos la Direcci\u00f3n IPv4 p\u00fablica, que es la accesible desde el exterior, de las Direcciones IPv4 pivadas que permitir\u00e1n a las EC2 verse entre ellas desde una red interna, pero que no es accesible desde el exterior.</p> <p></p> <p>Ahora podemos acceder al servidor utilizando SSH. Primero haz clic en \"Conectar\" para permitir la conexi\u00f3n. Selecciona el cliente SSH. Ah\u00ed tienes toda la informaci\u00f3n necesaria para realizar la conexi\u00f3n.</p> <p></p> <p>Warning</p> <p>Si eres usuario de Windows te podr\u00e1s conectar a la EC2 por SSH usando PowerShell. Aqu\u00ed tienes una peque\u00f1a gu\u00eda sobre c\u00f3mo cambiar los permisos de un archivo en PowerShell para hacer el equivalente al chmod 400  Chmod en Windows con PowerShell</p> <p>\u00bfRecuerdas la clave privada que te dije que almacenaras en tu computadora previamente? Ese es el que debes usar ahora. AWS asume que se guard\u00f3 con extensi\u00f3n <code>.pem</code> pero si se ha guardado con otra extensi\u00f3n, c\u00e1mbialo previamente. Aqu\u00ed te muestro una secuencia de conexi\u00f3n, asumiendo que el certificado se guard\u00f3 con extensi\u00f3n <code>.cer</code>.</p> <p></p> <p>Como ver\u00e1s, ya est\u00e1s dentro del servidor debian que hemos instalado.</p> <p>Podemos comprobar c\u00f3mo la capacidad del disco y la memoria coinciden con la que configuramos en la consola AWS.</p> <p></p> <p>Para cerrar la conexi\u00f3n escribe \"exit\"</p> <p>RECUERDA</p> <p>La IP p\u00fablica de la VM podr\u00eda cambiar. Comprueba antes de cada conexi\u00f3n la IP de la m\u00e1quina.</p>"},{"location":"Ud0%20Introduccion/P0_1/#detener-la-instancia","title":"Detener la instancia","text":"<p>En AWS Academy, cada vez que iniciamos el laboratorio, se pondr\u00e1n en marcha todas las m\u00e1quinas y servicios creados. Esto puede suponer un consumo de recursos innecesario si no vamos a utilizar algunas de ellas. Por eso es importante parar aquellas m\u00e1quinas (instancias) que no vayamos a utilizar en un momento dado. </p> <p>Para detener una m\u00e1quina hemos de ir a \"Instancias\", seleccionarla y a continuaci\u00f3n ir al bot\u00f3n \"Estado de la instancia\".</p> <p></p> <p>Seguidamente seleccionaremos \"Detener instancia\"</p> <p></p> <p>Y comprobaremos c\u00f3mo la instancia queda detenida.</p> <p></p>"},{"location":"Ud0%20Introduccion/P0_1/#eliminar-una-instancia","title":"Eliminar una instancia","text":"<p>Aunque tengamos un EC2 detenido, puede estar consumiendo recursos solo por el hecho de estar creada. Es el caso de los recursos de almacenamiento.</p> <p>Por tanto, una vez una m\u00e1quina ya no nos \u00e9s \u00fatil, lo mejor es eliminarla de forma definitiva. Para ello seguiremos el procedimiento visto para pararla, pero seleccionaremos la opci\u00f3n \"Terminar instancia\"</p> <p></p> <p>Veremos que la instancia estar\u00e1 terminada y dejar\u00e1 de aparecer en el listado de instancias en futuras conexiones.</p> <p></p> <p>Al terminar la instancia se liberar\u00e1n algunos de los recursos asociados si as\u00ed lo configuramos al crearla. En nuestro caso seleccionamos que el vol\u00famen se eliminara al eliminar la EC2. </p> <p>Pero puede que otros no se liberen autom\u00e1ticamente, como los grupos de seguridad.</p> <p>Puedes consultar los distintos recursos existentes y eliminar los que no sean necesarios desde el panel de EC2.</p> <p></p> <p>Ve a grupos de seguridad y elimina el que creamos para esta m\u00e1quina. Observa c\u00f3mo te ayudar\u00e1 haber cambiado el nombre cuando lo creaste.</p>"},{"location":"Ud0%20Introduccion/P0_1/#finaliza-el-laboratorio","title":"Finaliza el laboratorio","text":"<p>Al finalizar cada sesion de trabajo recuerda que debes finalizar el laboratorio. Ve a la consola de AWS Academy y presiona \"Finalizar laboratorio\". Si no lo haces, el laboratorio se cerrar\u00e1 autom\u00e1ticamente despu\u00e9s de 4 horas pero habr\u00e1s gastado m\u00e1s saldo del necesario.</p> <p></p> <p>Comprueba que el laboratorio esta parado. El punto junto a AWS deber\u00e1 estar de color rojo.</p> <p></p> <p>Warning</p> <p>Recuerda siempre finalizar el laboratorio tras cada sesi\u00f3n de trabajo</p>"},{"location":"Ud0%20Introduccion/P0_2/","title":"Windows Server en AWS Academy","text":"<p>En esta nota veremos c\u00f3mo crear un servidor Windows en AWS. La principal diferencia con un servidor Linux es que accederemos al servidor mediante un entorno gr\u00e1fico mediante el protocolo RDP.</p> <p>Accederemos a la consola de AWS Academy igual que hicimos en la pr\u00e1ctica anterior. En las siguientes im\u00e1genes, mostraremos con un cuadro rojo las opciones que deben cambiarse o revisarse. Puedes olvidarte del resto de las opciones disponibles por ahora.</p> <p>En AWS, como ya vimos, los servidores virtuales se llaman EC2. Comencemos por crear un EC2 nuevo como aprendimos en la pr\u00e1ctica anterior.</p> <p>Debemos proporcionar los par\u00e1metros para crear la m\u00e1quina. Sigue las pantallas con los datos proporcionados.</p> <p>Un Windows Server 2016 ser\u00e1 suficiente para esta pr\u00e1ctica:</p> <p></p> <p>En este caso, vamos a crear una m\u00e1quina potente. Podemos elegir un tipo de instancia t2.large con 2 CPU virtuales y 8 GiB de memoria.</p> <p></p> <p>La secci\u00f3n de \"Par de claves\" (inicio de sesi\u00f3n) es muy importante, ya que aqu\u00ed seleccionarmeos el par de claves que nos permitir\u00e1 acceder al servidor de forma remota. Podemos crear un nuevo par de claves para acceder a esta m\u00e1quina o usar el que ya creamos en la pr\u00e1ctica anterior. Si usamos las ya creadas podemos saltar este paso.</p> <p></p> <p>Aseg\u00farate de guardar el par de claves en tu computadora o no podr\u00e1s acceder al servidor despu\u00e9s.</p> <p></p> <p></p> <p>Si usamos las claves creadas en la pr\u00e1ctica anterior seguiremos a partir de aqu\u00ed.</p> <p>Debemos definir la configuraci\u00f3n de red de nuestra VM. Necesitamos acceder a trav\u00e9s de RDP. En el m\u00f3dulo de DAW vamos a instalar servicios web, as\u00ed que vamos a habilitar tambi\u00e9n el acceso por HTTP y HTTPS. Permitamos RDP, HTTP y HTTPS desde Internet.</p> <p></p> <p>Recuerda cambiar el nombre al grupo de seguridad para poder identificarlo posteriormente.</p> <p></p> <p>Finalmente, debemos configurar el almacenamiento. Proporcionemos un volumen de 80 GiB.</p> <p></p> <p>Verifica todas las opciones seleccionadas y lanza la instancia.</p> <p></p> <p>Si todo va bien, la instancia se crear\u00e1 y ahora podemos verla en la consola EC2.</p> <p></p> <p>En la consola de EC2, vemos que la VM est\u00e1 en ejecuci\u00f3n y todos los datos relacionados, como la direcci\u00f3n IP p\u00fablica que necesitaremos m\u00e1s tarde para acceder a la misma.</p> <p></p> <p>Ahora podemos acceder al servidor utilizando RDP. Primero haz clic en \"Conectar\" para permitir la conexi\u00f3n. Selecciona el cliente RDP. Ahora las cosas cambiar un poco respecto a un servidor Linux. En primer lugar, hemos de obtener la contrase\u00f1a del \"Administrator\" del servidor Windows.</p> <p></p> <p>Recuerdas la clave privada que te dije que almacenaras en tu computadora previamente. Ese es el que debes usar ahora. Usa \"Cargar archivo de clave privada\" y carga tu \"Clave privada\" almacenada.</p> <p></p> <p>Una vez le\u00eddo, puedes \"Descifrar contrase\u00f1a\"</p> <p></p> <p>Ser\u00e1 una contrase\u00f1a dif\u00edcil de recordar. Solo c\u00f3piala y luego podr\u00e1s cambiarla desde el interior del servidor Windows.</p> <p></p> <p>Es una buena pr\u00e1ctica crear un documento de texto y copiar all\u00ed toda la informaci\u00f3n de la pantalla \"Conectar a la instancia\": ID de instancia, DNS p\u00fablico, nombre de usuario y contrase\u00f1a. </p> <p>Ahora podemos usar un software de escritorio remoto para hacer la conexi\u00f3n. En Lliurex tenemos KRDC y Remmina. Tambi\u00e9n podr\u00edamos usar Windows Remote Desktop en Windows o Mac.</p>"},{"location":"Ud0%20Introduccion/P0_2/#conexion-usando-krdc","title":"Conexi\u00f3n usando KRDC","text":"<p>En las siguientes im\u00e1genes, podemos ver c\u00f3mo usar KRDC para hacer la conexi\u00f3n.</p> <p>Simplemente selecciona el protocolo RDP y el DNS p\u00fablico (en lugar de la IP que se muestra en la imagen).</p> <p></p> <p>Podemos configurar algunas cosas, como la resoluci\u00f3n de pantalla o el teclado. Tambi\u00e9n puedes hacer una carpeta en tu disco duro disponible para tu VM, de la misma manera que usas carpetas compartidas en VirtualBox.</p> <p></p> <p>Luego te pedir\u00e1 el usuario y la contrase\u00f1a.</p> <p></p> <p></p> <p>Y se establecer\u00e1 la conexi\u00f3n.</p> <p></p>"},{"location":"Ud0%20Introduccion/P0_2/#conexion-usando-microsoft-remote-desktop","title":"Conexi\u00f3n usando Microsoft Remote Desktop","text":"<p>Puedes usar Microsoft Remote Desktop en Windows y Mac.</p> <p>Como en KRDC, podemos compartir carpetas entre nuestra computadora y la M\u00e1quina Virtual, de la misma manera que compartimos carpetas en un software de virtualizaci\u00f3n (como VirtualBox).</p> <p>Descarga el software para Windows desde Microsoft Store o para Mac en la App Store.</p> <p>Ahora podemos \"Descargar archivo de escritorio remoto\" para acceder r\u00e1pidamente al servidor. Simplemente descarga el archivo RDP desde AWS y luego haz doble clic en \u00e9l.</p> <p></p> <p>Pero aconsejo hacerlo de esta otra manera para crear primero una carpeta compartida. Abre Microsoft Remote Desktop y ve al men\u00fa \"Conexiones -&gt; Agregar PC\".</p> <p>Luego sigue los pasos. Completa el nombre de PC con el DNS p\u00fablico de la VM. En la cuenta de usuario, crea una nueva para el usuario \"Administrador\" creado previamente con la contrase\u00f1a obtenida.</p> <p></p> <p>En la pesta\u00f1a \"Carpetas\", crea una carpeta compartida con tu computadora. Primero crea la carpeta local. Luego, usa el bot\u00f3n \"+\" para agregarla.</p> <p></p> <p>La pr\u00f3xima vez que abras la conexi\u00f3n, encontrar\u00e1s una unidad de red en tu VM que es la carpeta local en tu PC. Es una forma muy conveniente de compartir archivos entre ambos sistemas.</p> <p></p> <p>Una vez que se haya completado toda la configuraci\u00f3n, lo encontrar\u00e1s en la p\u00e1gina principal cada vez que abras la aplicaci\u00f3n.</p> <p>RECUERDA</p> <p>La IP p\u00fablica de la VM podr\u00eda cambiar. Tendr\u00e1s que editar la conexi\u00f3n creada cada vez que quieras conectarte a la VM, pero solo tendr\u00e1s que cambiar la direcci\u00f3n IP, manteniendo el resto de la configuraci\u00f3n.</p> <p></p>"},{"location":"Ud0%20Introduccion/P0_2/#elimina-la-instancia","title":"Elimina la instancia","text":"<p>Para que la instancia creada no consuma recursos, puedes borrarla al finalizar la pr\u00e1ctica, como vimos en la pr\u00e1ctica anterior.</p> <p>Elimina tambi\u00e9n el grupo de seguridad que creaste para esta m\u00e1quina para no ir dejando \"basura\" en la consola de AWS.</p>"},{"location":"Ud0%20Introduccion/P0_2/#finaliza-el-laboratorio","title":"Finaliza el laboratorio","text":"<p>Al finalizar cada sesion de trabajo recuerda que debes finalizar el laboratorio. Ve a la consola de AWS Academy y presiona \"Finalizar laboratorio\". Si no lo haces, el laboratorio se cerrar\u00e1 autom\u00e1ticamente despu\u00e9s de 4 horas pero habr\u00e1s gastado m\u00e1s saldo del necesario.</p> <p></p>"},{"location":"Ud0%20Introduccion/P0_3/","title":"Conceder acceso a un segundo administrador","text":"<p>En las pr\u00e1cticas anteriores vimos c\u00f3mo crear un servidor virtual en AWS y c\u00f3mo acceder a \u00e9l usando las claves generadas en el propio entorno. Pero, \u00bftenemos claro qu\u00e9 estamos haciendo exactamente? En esta pr\u00e1ctica vamos a suponer que necesitamos conceder acceso a un segundo administrador a nuestra m\u00e1quina, por ejemplo, al profesor para que eval\u00fae nuestro trabajo. </p> <p>Le daremos permisos de superusuario, crearemos un par de claves y le habilitaremos el acceso usando su clave privada.</p>"},{"location":"Ud0%20Introduccion/P0_3/#instalacion-del-servidor-debian","title":"Instalaci\u00f3n del servidor Debian","text":"<p>Entra en el \"Learner Lab\" de AWS Academy y crea un servidor Debian con los m\u00ednimos recursos posibles. Bastar\u00e1 con los que te ofrezca la plataforma por defecto.</p> <p>Puedes usar el par de claves generado en la primera pr\u00e1ctica.</p>"},{"location":"Ud0%20Introduccion/P0_3/#crear-un-nuevo-usuario","title":"Crear un nuevo usuario","text":"<p>Una vez instalada nuestra Debian, tendremos un usuario <code>admin</code> creado autom\u00e1ticamente por AWS. Ese ser\u00e1 nuestro usuario administrador.</p> <p>Accede al servidor por SSH en modo comando con el usuario <code>admin</code>.</p> <p>Pero supongamos que queremos que nuestro profesor pueda acceder a la m\u00e1quina con permisos de administrador. Para ello le crearemos un usuario <code>profe</code> y le daremos permisos de <code>sudo</code> . Estos permisos nos permitir\u00e1n que cualquier comando que ejecutemos en el terminal precedido de la palabra <code>sudo</code> se ejecute como root. De la misma forma, cualquier comando que ejecutemos con nuestro usuario sin <code>sudo</code>, ser\u00e1 ejecutado con los permisos de nuestro usuario, por lo que nos protegemos de liarla con un comando que no toca como root.</p> <p>Dicho esto, hay varias formas de proceder, veamos una sencilla. Se trata de modificar el archivo del sistema encargado de recoger estos permisos: <code>/etc/sudoers</code>. </p> <p>Ya en nuestro servidor remoto, cambiaremos de nuestro usuario al usuario <code>admin</code> a <code>root</code>:</p> <pre><code>admin@ip-172-31-42-159:~$ sudo su -\n</code></pre> <p>Comprueba c\u00f3mo el prompt se convierte en el de root:</p> <pre><code>root@ip-172-31-42-159:~#\n</code></pre> <p>Ahora, puedes crear un nuevo usuario usando el comando <code>adduser nuevo-usuario</code>. Reemplaza \"nuevo-usuario\" con el nombre que desees darle al nuevo usuario y responde a las distintas preguntas que te va haciendo. </p> <p>Para crear el usuario <code>profe</code>:</p> <pre><code>root@ip-172-31-42-159:~# adduser profe\nAdding user `profe' ...\nAdding new group `profe' (1001) ...\nAdding new user `profe' (1001) with group `profe (1001)' ...\nCreating home directory `/home/profe' ...\nCopying files from `/etc/skel' ...\nNew password: \nRetype new password: \npasswd: password updated successfully\nChanging the user information for profe\nEnter the new value, or press ENTER for the default\n    Full Name []: Profesor              \n    Room Number []: \n    Work Phone []: \n    Home Phone []: \n    Other []: \nIs the information correct? [Y/n] Y\nAdding new user `profe' to supplemental / extra groups `users' ...\nAdding user `profe' to group `users' ...\nroot@ip-172-31-42-159:~# \n</code></pre> <p>Luego, agrega al nuevo usuario al grupo \"sudo\" para otorgarle permisos de administrador:</p> <pre><code>root@ip-172-31-42-159:~# usermod -aG sudo profe\n</code></pre> <p>Para confirmar que el usuario se ha agregado correctamente al grupo \"sudo\", puedes verificar el archivo /etc/group:</p> <pre><code>root@ip-172-31-42-159:~# grep '^sudo:' /etc/group\nsudo:x:27:admin,profe\n</code></pre> <p>Comprobamos c\u00f3mo tanto <code>admin</code> como <code>profe</code> pertenecen ahora al grupo de sudoers.</p> <p>Pero ahora todav\u00eda no podemos conectarnos a la m\u00e1quina con el usuario profe, porque solo podemos conectarnos con par de claves y <code>profe</code> no las tiene. Vamos a gener\u00e1rselas.</p>"},{"location":"Ud0%20Introduccion/P0_3/#generacion-del-par-de-claves","title":"Generaci\u00f3n del par de claves.","text":"<p>En primer lugar nos crearemos el par de claves para <code>profe</code>, p\u00fablica y privada, desde del ordenador local o bien desde el terminal de Linux o desde PowerShell en Windows, utiliza el comando (sin sudo):</p> <pre><code>ssh-keygen -b 4096\n</code></pre> <p>Si dej\u00e1is las opciones por defecto, crear\u00e1 una clave privada <code>id_rsa</code> y una clave p\u00fablica <code>id_rsa.pub</code> en el directorio <code>/home/nombreusuario/.ssh</code>. Compru\u00e9balo.</p> <p>Os pedir\u00e1 una contrase\u00f1a para proteger el uso de la clave privada. Puesto que precisamente queremos agilizar el proceso de conexi\u00f3n por SSH para no introducir contrase\u00f1as, deb\u00e9is dejarla vac\u00eda.</p> <p>Una vez creado el par de claves, tal y como hemos visto en el apartado anterior, el servidor SSH (Debian) debe poseer nuestra clave p\u00fablica para que podamos autenticarnos con nuestra clave privada, que como su nombre indica, s\u00f3lo debemos poseer nosotros y por eso nos identifica un\u00edvocamente.</p>"},{"location":"Ud0%20Introduccion/P0_3/#copia-la-clave-publica-desde-el-ordenador-local-al-servidor-debian","title":"Copia la clave p\u00fablica desde el ordenador local al servidor Debian","text":"<p>Este proceso de copia se puede realizar f\u00e1cilmente con el comando <code>ssh-copy-id</code> si nuestro servidor aceptara login por contrase\u00f1a. </p> <pre><code>$ ssh-copy-id usuario@ip_servidor\n</code></pre> <p>Pero como nuestro servidor solo acepta login por claves ssh, entonces deberemos hacerlo manualmente. As\u00ed entenderemos mejor lo que ocurre realmente. Sigue estos pasos:</p> <p>1. Desde el terminal local</p> <p>Copia la clave p\u00fablica generada al portapapeles. Si tienes Windows, utiliza Notepad. Y si tienes Linux puedes utilizar este comando. </p> <p><pre><code>$ cat ~/.ssh/id_rsa.pub | pbcopy\n</code></pre> Para instalar pbcopy puedes realizar lo siguiente: <pre><code>sudo apt update &amp;&amp; sudo apt install xclip -y \n</code></pre> Y crear un alias para usarlo: <pre><code># A\u00f1adir en ~/.bashrc o ~/.zshrc\nalias pbcopy='xclip -selection clipboard'\nalias pbpaste='xclip -selection clipboard -o'\n</code></pre></p> <p>2. En el servidor remoto Debian</p> <p>Con\u00e9ctate al servidor Debian como <code>admin</code>. Ya sabes c\u00f3mo.</p> <p>Cada usuario guarda las claves p\u00fablicas en el archivo denominado ~/.ssh/authorized_keys. Puedes ver la clave p\u00fablica del usuario <code>admin</code> correspondiente a la clave privada con la que se conecta con:</p> <pre><code>$ cat /home/admin/.ssh/authorized_keys\n</code></pre> <p>Pero ahora necesitamos crear una nueva clave p\u00fablica para <code>profe</code>, as\u00ed que desde el usuario <code>admin</code> cambiaremos al usuario <code>profe</code></p> <pre><code>admin@ip-172-31-42-159:~$ su profe\nprofe@ip-172-31-42-159:~$\n</code></pre> <p>Cambiaremos a la carpeta raiz de profe:</p> <pre><code>profe@ip-172-31-42-159:~$ cd\nprofe@ip-172-31-42-159:~$ pwd\n/home/profe\n</code></pre> <p>Ahora creamos la carpeta .ssh y creamos y editamos authorized_keys</p> <pre><code>profe@ip-172-31-42-159:~$ mkdir .ssh\nprofe@ip-172-31-42-159:~$ cd .ssh/\nprofe@ip-172-31-42-159:~/.ssh$ nano authorized_keys\n</code></pre> <p>Ahora pegamos el contenido del portapapeles que copiamos anteriormente con CTRL+U y cerramos guardando con CTRL+X.</p> <p>Deberemos cambiar los permisos del fichero authorized_keys.</p> <pre><code>profe@ip-172-31-42-159:~/.ssh$ chmod 600 ~/.ssh/authorized_keys\n</code></pre> <p>Reinicia el servicio SSH para aplicar los cambios:</p> <pre><code>profe@ip-172-31-42-159:~/.ssh$ sudo service ssh restart \n</code></pre>"},{"location":"Ud0%20Introduccion/P0_3/#comprobacion-de-acceso-al-servidor-con-ese-nuevo-usuario","title":"Comprobaci\u00f3n de acceso al servidor con ese nuevo usuario","text":"<p>Ahora ya podemos conectarnos desde nuestro equipo local a la m\u00e1quina remota usando la clave privada que generamos para <code>profe</code>.</p> <pre><code>$ ssh -i ~/.ssh/id_rsa profe@direccion-ip-publica-servidor-debian\n</code></pre> <p>Para finalizar, si vas a generar y usar varias claves para distintas finalidades podr\u00eda ser interesante asignarles nombres descriptivos seg\u00fan las mismas.</p> <p>L\u00f3gicamente, ahora deber\u00edamos proporcionarle al profesor la clave privada para que se pudiera conectarse al servidor. Y deber\u00edamos hacerlo desde un entorno securizado para evitar que terceros pudieran capturarla. Sin embargo, este no ser\u00eda el proceso habitual. Lo hemos hecho as\u00ed para aprender el funcionamiento. Pero en un entorno real ser\u00eda el profesor el que generar\u00eda el par de claves y facilitar\u00eda al alumno la clave p\u00fablica. De esta forma el profesor mantendr\u00eda su clave privada y podr\u00eda acceder a la m\u00e1quina del alumno sin haber expuesto en ning\u00fan momento su clave privada.</p> <p>Para Windows</p> <p>Este m\u00f3dulo est\u00e1 dise\u00f1ado desde un cliente Linux conect\u00e1ndose al servidor Linux, por lo que el cliente SSH est\u00e1 integrado en el propio terminal. Para Windows existen multitud de alternativas como cliente SSH, desde utilizar el propio WSL2 (Windows Subsystem Linux) de forma similar a lo que aqu\u00ed se describe, hasta utilizar cualquier otro de los varios clientes disponibles</p> <p>Por ejemplo, si utiliz\u00e1is Putty, deber\u00e9is seguir los pasos que detallan en este tutorial para configurar las claves.</p> <p>En caso de utilizar otro cliente, buscad la forma de hacerlo pues diferir\u00e1 en cada caso.</p>"},{"location":"Ud0%20Introduccion/P0_4/","title":"Comandos b\u00e1sicos Linux","text":""},{"location":"Ud0%20Introduccion/P0_4/#objetivos","title":"Objetivos.","text":"<ol> <li>Actualizar paquetes del sistema con APT.</li> <li>Recordar c\u00f3mo crear, mover y eliminar archivos y directorios.</li> <li>Entender y gestionar los permisos de archivos y directorios.</li> <li>Trabajar con usuarios y grupos.</li> <li>Introducir la gesti\u00f3n de procesos b\u00e1sicos.</li> </ol> <p>La mayor\u00eda de los servicios que vamos a desplegar se har\u00e1n sobre m\u00e1quinas linux. Por tanto, es importante dominar los comandos b\u00e1sicos de administraci\u00f3n de un sistema linux. Ya has estudiado esto el curso pasado, pero no est\u00e1 de m\u00e1s recordarlo.</p> <p>Te aconsejo que a partir de esta pr\u00e1ctica te hagas un \"cheatsheet\" con todos los comandos que utilices y lo vayas ampliando durante el curso.</p> <p>Como ya has aprendido a crear una EC2 en AWS, empezaremos creando una EC2 b\u00e1sica Debian como la de la primera pr\u00e1ctica. Con\u00e9ctate a ella por ssh y realiza las siguientes operaciones. Apunta el comando o comandos que usas para cada operaci\u00f3n.</p>"},{"location":"Ud0%20Introduccion/P0_4/#actualizacion-de-paquetes-con-apt","title":"Actualizaci\u00f3n de paquetes con APT.","text":"<p>Esto ser\u00e1 lo primero que hagamos en cada pr\u00e1ctica, as\u00ed que apr\u00e9ndelo bien.</p> <ul> <li> <p>Actualiza la lista de paquetes disponibles.</p> </li> <li> <p>Realiza una actualizaci\u00f3n completa del sistema, instalando los paquetes nuevos o actualizados.</p> </li> <li> <p>Limpia paquetes que ya no son necesarios.</p> </li> </ul>"},{"location":"Ud0%20Introduccion/P0_4/#creacion-y-manipulacion-de-archivos-y-directorios","title":"Creaci\u00f3n y manipulaci\u00f3n de archivos y directorios.","text":"<ul> <li> <p>Ve a la carpeta personal del usuario activo.</p> </li> <li> <p>En la carpeta personal del usuario en uso crear un directorio llamado <code>practica01</code>.</p> </li> <li> <p>Entra en el directorio <code>practica01</code>.</p> </li> <li> <p>Muestra el directorio en el que te encuentras.</p> </li> <li> <p>Muestra el contenido de la carpeta</p> </li> <li> <p>Dentro de este directorio, crea tres archivos vac\u00edos llamados: <code>archivo.txt</code>, <code>archivo2.txt</code>, <code>archivo3.txt</code>.</p> </li> <li> <p>Cambia el nombre de <code>archivo.txt</code> a <code>archivo1.txt</code></p> </li> <li> <p>Muestra el contenido del directorio actual en modo \"largo\" (ver permisos, propietario, grupo y fecha creaci\u00f3n)</p> </li> <li> <p>Crear un subdirectorio llamado <code>subdirectorio</code> dentro de <code>practica01</code>.</p> </li> </ul>"},{"location":"Ud0%20Introduccion/P0_4/#manipulacion-de-permisos","title":"Manipulaci\u00f3n de permisos.","text":"<ul> <li> <p>Mostrar los permisos actuales de los archivos.</p> </li> <li> <p>Cambiar los permisos del archivo <code>archivo1.txt</code> para que solo el propietario tenga permisos de lectura y escritura.</p> </li> <li> <p>Cambia los permisos del archivo <code>archivo2.txt</code> para que todos los usuarios tengan acceso de lectura, pero solo el propietario puede escribir. Comprueba los permisos.</p> </li> <li> <p>Cambia los permisos del directorio <code>subdirectorio</code> para que solo el propietario pueda leer, escribir y acceder a \u00e9l.</p> </li> </ul>"},{"location":"Ud0%20Introduccion/P0_4/#gestion-de-usuarios-y-grupos","title":"Gesti\u00f3n de usuarios y grupos.","text":"<ul> <li> <p>Crea un nuevo usuario llamado <code>usuario1</code> con contrase\u00f1a <code>ieselcaminas</code>.</p> </li> <li> <p>Comprueba que el usuario se ha creado correctamente. Y comprueba tambi\u00e9n si se ha creado un grupo con el mismo nombre que ese usuario.</p> </li> <li> <p>Asigna al usuario <code>usuario1</code> la propiedad del directorio <code>practica01</code>.</p> </li> <li> <p>Crear un grupo llamado <code>grupo1</code> y a\u00f1adir a <code>usuario1</code>. Comprueba que se ha a\u00f1adido.</p> </li> <li> <p>Cambiar la propiedad de <code>archivo3.txt</code> a grupo1. Compru\u00e9balo.</p> </li> <li> <p>Quita el usuario1 de grupo1 y compru\u00e9balo.</p> </li> <li> <p>Elimina el grupo1</p> </li> <li> <p>Elimina usuario1 y su directorio home</p> </li> </ul>"},{"location":"Ud0%20Introduccion/P0_4/#gestion-de-procesos-basicos","title":"Gesti\u00f3n de procesos b\u00e1sicos.","text":"<ul> <li> <p>Ver los procesos en ejecuci\u00f3n del usuario actual en formato extendido, con todos los datos.</p> </li> <li> <p>Lanza un proceso \"yes\" en 2\u00ba plano con <code>yes &gt; /dev/null &amp;</code>. Identifica su PID.</p> </li> <li> <p>Vuelve a obtener los procesos en ejecuci\u00f3n del usuario. \u00bfVes el proceso \"yes\" que acabas de lanzar?</p> </li> <li> <p>Obt\u00e9n los trabajos en segundo plano.</p> </li> <li> <p>Trae el proceso al primer plano</p> </li> <li> <p>Ahora ya no podr\u00e1s interactuar con la terminal porque el proceso \"yes\" es infinito y la est\u00e1 utilizando sin devolver el prompt. C\u00f3rtalo.</p> </li> <li> <p>Vuelve a lanzar yes pero ahora en primer plano. Obtendr\u00e1s la lista infinita de \"y\" sin recuperar el prompt. Abre otro terminal y obt\u00e9n la lista de todos los procesos en el sistema. Identifica el \"yes\" que est\u00e1 corriendo en el primer terminal.</p> </li> <li> <p>Det\u00e9n el proceso por su ID sin esperar.</p> </li> <li> <p>Comprueba que recuperas el prompt en el primer terminal.</p> </li> <li> <p>Vuelve a obtener todos los procesos del sistema y comprueba que ya no existe.</p> </li> </ul>"},{"location":"Ud0%20Introduccion/Ud0_1Introalmodulo/","title":"\u00bfQu\u00e9 veremos en este m\u00f3dulo?","text":"<p>En este m\u00f3dulo veremos distintas metodolog\u00edas y tecnolog\u00edas que deberemos utilizar para el despliegue de aplicaciones en entornos web.</p> <p>Por un lado trataremos las t\u00e9cnicas y procesos esenciales para llevar a cabo la implementaci\u00f3n exitosa de aplicaciones web en entornos de producci\u00f3n. Esto incluye la instalaci\u00f3n y configuraci\u00f3n b\u00e1sica de servidores web (apache, nginx) y servidores de aplicaciones (tomcat), la implantaci\u00f3n de aplicaciones web sobre los servidores desplegados, as\u00ed como la instalaci\u00f3n y configuraci\u00f3n de servicios de red necesarios (servidor de nombres de dominio DNS y LDAP, transferencia de ficheros mediante FTP, etc).</p> <p>Puesto que hoy en d\u00eda es cada vez m\u00e1s habitual el uso de servidores virtualizados en entornos \"cloud\" veremos el despliegue de todo lo anterior utilizando tecnolog\u00edas de virtualizaci\u00f3n de servidores en la nube y tambi\u00e9n usando contenedores.</p> <p>Otra de las partes importantes del m\u00f3dulo es la instalaci\u00f3n, configuraci\u00f3n y uso de sistemas de control de versiones en proyectos de desarrollo SW. Nosotros nos centraremos en git.</p> <p>Finalmente entraremos en la metodolog\u00eda CI/CD (Continuous Integration/Continuous Deployment) que es un enfoque en el desarrollo de software que busca automatizar y agilizar la entrega de aplicaciones a trav\u00e9s de un ciclo de desarrollo continuo.</p> <p>Veamos cada uno de estos apartados con un poco m\u00e1s de detalle.</p>"},{"location":"Ud0%20Introduccion/Ud0_1Introalmodulo/#sistemas-de-control-de-versiones","title":"Sistemas de control de versiones.","text":"<p>Un sistema de control de versiones (VCS, por sus siglas en ingl\u00e9s, Version Control System) es una herramienta que permite rastrear y gestionar los cambios en el c\u00f3digo fuente y otros archivos a lo largo del tiempo. Su objetivo principal es permitir a los desarrolladores trabajar en colaboraci\u00f3n de manera eficiente, mantener un historial de cambios y revertir a versiones anteriores si es necesario.</p> <p>Actualmente, cualquier proyecto SW es imposible abordar de forma unipersonal. Los proyectos son cada vez m\u00e1s colaborativos y la utilizaci\u00f3n de un sistema de control de versiones ha pasado a ser una necesidad.</p> <p>De entre los sistemas de control de versiones m\u00e1s utilizados para el desarrollo de proyectos de desarrollo se encuentra git. Veremos sus aspectos b\u00e1sicos, uso del sistema y su relaci\u00f3n con repositorios como github.</p> <p></p>"},{"location":"Ud0%20Introduccion/Ud0_1Introalmodulo/#contenedores","title":"Contenedores","text":"<p>Entre las distintas tecnolog\u00edas de virtualizaci\u00f3n existentes ha alcanzado gran relevancia en los \u00faltimos tiempos la llamada de \"contenedores\". De entre las distintas implementaciones de contenedores existentes nos centraremos en docker.</p> <p></p> <p>Veremos c\u00f3mo docker puede ser \u00fatil a administradores de sistemas, pero tambi\u00e9n a desarrolladores. Aprenderemos los conceptos b\u00e1sicos de docker, a instalarlo, manejar im\u00e1genes y desplegar servicios sobre un contenedor.</p>"},{"location":"Ud0%20Introduccion/Ud0_1Introalmodulo/#implantacion-y-administracion-de-servidores-web","title":"Implantaci\u00f3n y administraci\u00f3n de servidores web","text":"<p>Para poder desplegar una aplicaci\u00f3n web lo primero que necesitaremos ser\u00e1 un servidor web. As\u00ed pues, en primer lugar deberemos conocer qu\u00e9 es un servidor web y qu\u00e9 tecnolog\u00edas de servidores web existen.</p> <p>Seguidamente estudiaremos los protocolos utilizados en la transferencia de p\u00e1ginas web (http, https), su historia y funcionamiento.</p> <p>Continuaremos viendo los servidores web m\u00e1s utilizados actualmente (Apache y Nginx), sus diferencias y aplicaciones. Los instalaremos y configuraremos.</p> <p></p>"},{"location":"Ud0%20Introduccion/Ud0_1Introalmodulo/#servidores-de-aplicaciones","title":"Servidores de aplicaciones","text":"<p>En sus primeros tiempos la web fue est\u00e1tica, es decir, el creador de las p\u00e1ginas web defin\u00eda su contenido y los usuarios simplemente lo consultaban. Con el tiempo fueron surgiendo escenarios de interactividad creciente, en los que las p\u00e1ginas servidas depend\u00edan de las acciones del usuario.</p> <p>Pero los servidores web hab\u00edan sido desarrollados solamente para servir p\u00e1ginas web. As\u00ed pues, se hace necesaria la aparici\u00f3n de alg\u00fan agente que pueda generar p\u00e1ginas web de forma din\u00e1mica en funci\u00f3n de los requerimientos del usuario, y entregarlos al servidor web para servirlas. Surge as\u00ed el concepto de \"servidor de aplicaciones\".</p> <p>Veremos, pues, c\u00f3mo funcionan este tipo de servidores y aprenderemos a instalar y configurar uno de los m\u00e1s utilizados Apache Tomcat.</p> <p></p>"},{"location":"Ud0%20Introduccion/Ud0_1Introalmodulo/#servicios-de-red-implicados-en-el-despliegue-de-aplicaciones-web","title":"Servicios de red implicados en el despliegue de aplicaciones web","text":"<p>Adem\u00e1s del propio servidor web se hacen necesarios una serie de servicios adicionales para el correcto funcionamiento del sistema. Necesitamos enviar las p\u00e1ginas al servidor web, traducir las IP a los nombres de dominio, alojar nuestro servidor en alg\u00fan servicio de hosting accesible desde Internet...</p> <p>Para enviar las p\u00e1ginas al servidor web aprenderemos a instalar, configurar y utilizar el servicio FTP.</p> <p></p> <p>En esta parte del m\u00f3dulo veremos, entre otros, el servicio DNS o Domain Name System. Este sistema proporciona un mecanismo eficaz para llevar a cabo la resoluci\u00f3n de nombres de dominio a direcciones IP.  A los humanos nos es m\u00e1s f\u00e1cil recordar un nombre de dominio (de host, de web, de servidor de correo, etc.) utilizando un texto identificativo (por ejemplo, www.gva.es) que la direcci\u00f3n IP pertinente (por ejemplo, 193.144.127.85).</p> <p>En este apartado aprenderemos c\u00f3mo funciona este sistema, los mecanismos de resoluci\u00f3n directa e inversa, los tipos de servidores DNS (maestro, esclavo, cach\u00e9, forwarder), las herramientas para utilizarlo y, como no, aprenderemos a instalar y configurar un servidor DNS.</p> <p></p> <p>Otro aspecto importante en los servidores es la gesti\u00f3n de usuarios y permisos de acceso a los distintos recursos. Un servidor LDAP (Lightweight Directory Access Protocol) es una herramienta que se utiliza para gestionar y acceder a una base de datos de informaci\u00f3n sobre usuarios y recursos en una red. Imagina un gran libro de direcciones que guarda detalles como nombres de usuario, contrase\u00f1as y permisos de acceso, y que los sistemas y aplicaciones pueden consultar para autenticar a los usuarios y autorizar su acceso a diferentes recursos. LDAP ayuda a organizar y centralizar esta informaci\u00f3n para facilitar la administraci\u00f3n y mejorar la seguridad en una red.</p> <p>Aprenderemos los conceptos b\u00e1sicos y a instalar y gestionar accesos mediante un servidor OpenLDAP.</p> <p></p>"},{"location":"Ud0%20Introduccion/Ud0_1Introalmodulo/#cicd-integracion-y-despliegue-continuo","title":"CI/CD (Integraci\u00f3n y despliegue continuo)","text":"<p>Entre el desarrollo de una aplicaci\u00f3n (o nueva versi\u00f3n de una existente) y que el usuario pueda usarla hay un paso, no trivial, la puesta en producci\u00f3n.</p> <p>En las empresas tradicionales dicho proceso es muy complicado y estresante. Se hace pocas veces, cuatro o cinco veces al a\u00f1o, durante el fin de semana cuando todos los servicios est\u00e1n parados. El proceso genera muchos trastornos y dolores de cabeza. Y los resultados, muchas veces, no son los esperados.</p> <p>Una idea fundamental de las metodolog\u00edas \"\u00e1giles\" es entregar valor frecuentemente para obtener una pronta retroalimentaci\u00f3n del cliente. Para ello es necesario tener muy engrasados los procesos de despliegue y puesta en producci\u00f3n del software. Dentro de estas metodolog\u00edas veremos CI/CD (Integraci\u00f3n y despliegue continuo), que busca crear un proceso de desarrollo m\u00e1s fluido y controlado, con el objetivo de entregar software de alta calidad de manera m\u00e1s r\u00e1pida y confiable</p> <p></p>"},{"location":"Ud0%20Introduccion/Ud0_1Introalmodulo/#como-lo-veremos","title":"\u00bfC\u00f3mo lo veremos?","text":"<p>Cada unidad constar\u00e1 de una parte de teor\u00eda donde se tratar\u00e1n los conceptos que son necesarios conocer antes de ponernos \"manos a la obra\".</p> <p>Por otra parte haremos pr\u00e1cticas guiadas que nos permitir\u00e1n instalar y configurar los distintos servicios que vayamos estudiando paso a paso siguiendo ejemplos ya preparados.</p> <p>Puesto que es un objetivo del m\u00f3dulo la instalaci\u00f3n y configuraci\u00f3n b\u00e1sica de tecnolog\u00edas de virtualizaci\u00f3n de servidores en la nube y en contenedores, empezaremos creando nuestros servicios en m\u00e1quinas virtuales que crearemos en AWS Academy (Amazon Web Services Academy). All\u00ed crearemos nuestras m\u00e1quinas virtuales y desplegaremos nuestros servicios.</p> <p></p> <p>Posteriormente pasaremos a desplegar los mismos servicios en un entorno de contenedores \"docker\", a\u00f1adiendo un grado m\u00e1s de complejidad.</p>"},{"location":"Ud0%20Introduccion/Ud0_2AWS/","title":"0.2. Introducci\u00f3n a AWS Academy","text":""},{"location":"Ud0%20Introduccion/Ud0_2AWS/#que-es-aws-academy","title":"\u00bfQu\u00e9 es AWS Academy?","text":"<p>AWS Academy es una iniciativa de Amazon Web Services que proporciona a las instituciones educativas contenido y recursos de formaci\u00f3n en la nube. Su objetivo es preparar a estudiantes y educadores con habilidades pr\u00e1cticas en tecnolog\u00edas \"cloud\", facilitando el acceso a materiales de estudio, laboratorios pr\u00e1cticos y certificaciones oficiales de AWS.</p> <p>Nosotros lo usaremos para crear nuestros servidores en la nube y desplegar sobre ellos nuestros servicios. Esto nos aportar\u00e1 diversas ventajas, entre ellas:</p> <ul> <li>No dependemos del equipo que tenga cada alumno: da igual su potencia, sistema operativo o versi\u00f3n</li> <li>Todos trabajaremos con una m\u00e1quina virtual exactamente igual, evitando los problemas de que a unos les funcione y a otros no</li> <li>Podemos trabajar en el aula y seguir trabajando desde casa sobre la misma m\u00e1quina virtual</li> <li>No necesitamos discos duros de gran capacidad para alojar nuestras m\u00e1quinas virtuales.</li> <li>El despliegue de una m\u00e1quina virtual es casi instant\u00e1neo</li> </ul>"},{"location":"Ud0%20Introduccion/Ud0_2AWS/#como-crearemos-nuestras-maquinas-virtuales-en-aws-academy","title":"\u00bfC\u00f3mo crearemos nuestras m\u00e1quinas virtuales en AWS Academy?","text":"<p>En las 2 pr\u00e1cticas de este m\u00f3dulo introductorio aprenderemos a crear servidores virtuales en AWS, conocidos como EC2. Aunque la creaci\u00f3n es siempre igual, independientemente del sistema operativo que instalemos, el acceso posterior ser\u00e1 diferente en funci\u00f3n de que nos conectemos en modo comando o en modo gr\u00e1fico. As\u00ed pues, crearemos una m\u00e1quina linux a la que accederemos en modo comando por SSH y un servidor Windows al que accederemos en modo gr\u00e1fico con RDP.</p> <p>Veamos a continuaci\u00f3n las bases te\u00f3ricas de la conexi\u00f3n SSH que nos permitir\u00e1n entender la conexi\u00f3n que estableceremos posteriormente en las pr\u00e1cticas. No entraremos en detalle en el protocolo RDP.</p>"},{"location":"Ud0%20Introduccion/Ud0_2AWS/#como-nos-conectaremos-por-ssh-a-nuestras-maquinas-virtuales-en-aws-academy","title":"\u00bfC\u00f3mo nos conectaremos por SSH a nuestras m\u00e1quinas virtuales en AWS Academy?","text":"<p>Para conectarnos a una m\u00e1quina de forma remota y segura en modo comando, la opci\u00f3n m\u00e1s recomendable es SSH.</p> <p></p> <p>SSH o Secure Shell es un protocolo de red criptogr\u00e1fico para operar servicios de red de forma segura a trav\u00e9s de una red no protegida. Las aplicaciones t\u00edpicas incluyen l\u00ednea de comandos remota, inicio de sesi\u00f3n y ejecuci\u00f3n de comandos remota, pero cualquier servicio de red puede protegerse con SSH.</p> <p>SSH proporciona un canal seguro a trav\u00e9s de una red no segura mediante el uso de una arquitectura cliente-servidor, conectando una aplicaci\u00f3n cliente SSH con un servidor SSH.  El puerto TCP est\u00e1ndar para SSH es 22 y se usa generalmente para acceder a sistemas operativos similares a Unix, pero tambi\u00e9n se puede usar en Microsoft Windows.</p> <p>Proporciona un mecanismo para autenticar un usuario remoto, transferir entradas desde el cliente al servidor y retransmitir la salida de vuelta al cliente.</p> <p>SSH tiene muchas aplicaciones diferentes:</p> <ul> <li>Gesti\u00f3n de servidores a los que no se puede acceder localmente</li> <li>Transferencia segura de archivos</li> <li>Creaci\u00f3n de copias de seguridad</li> <li>Conexi\u00f3n entre dos ordenadores con encriptaci\u00f3n de extremo a extremo</li> <li>Mantenimiento remoto desde otros ordenadores</li> </ul>"},{"location":"Ud0%20Introduccion/Ud0_2AWS/#autenticacion","title":"Autenticaci\u00f3n","text":"<p>Los dos m\u00e9todos de autenticaci\u00f3n de usuario SSH m\u00e1s comunes que se utilizan so:</p> <ul> <li>las contrase\u00f1as (cifrado sim\u00e9trico)</li> <li>las claves SSH (cifrado asim\u00e9trico o de clave p\u00fablica). </li> </ul> <p>Los clientes env\u00edan contrase\u00f1as cifradas al servidor de forma segura. Sin embargo, las contrase\u00f1as son un m\u00e9todo de autenticaci\u00f3n arriesgado porque su solidez depende de que el usuario sepa qu\u00e9 hace que una contrase\u00f1a sea segura. </p> <p>Los pares de claves p\u00fablica-privada SSH encriptados asim\u00e9tricamente son una mejor opci\u00f3n. Una vez que el cliente descifra el mensaje, el servidor le otorga acceso al sistema.</p> <p>Note</p> <p>SSH opta por el cifrado h\u00edbrido, donde se utiliza el cifrado asim\u00e9trico para establecer la comunicaci\u00f3n e intercambiar unas claves sim\u00e9tricas que ser\u00e1n las que se utilizar\u00e1n posteriormente en el intercambio de informaci\u00f3n.</p>"},{"location":"Ud0%20Introduccion/Ud0_2AWS/#cifrados-simetricos-o-de-clave-privada","title":"Cifrados sim\u00e9tricos o de clave privada","text":"<p>Este tipo de cifrado utiliza la misma clave para cifrar y para descifrar la informaci\u00f3n. Por este motivo, la clave debe ser secreta y solo conocida por el emisor y el receptor del mensaje. Se usa la misma clave para cifrar y descrifrar el mensaje.</p> <p></p> <p>Ventajas</p> <ul> <li>Muy r\u00e1pidos \u2192 cifrar y descifrar un mensaje cada vez requiere un cierto tiempo, que si el algoritmo es complejo, puede ser elevado. </li> </ul> <p>Inconvenientes</p> <ul> <li>Si alguien no autorizado consigue la clave, podr\u00e1 espiar la comunicaci\u00f3n sin problemas</li> <li>\u00bfC\u00f3mo hacemos para que emisor y receptar conozcan la clave en un primer momento?<ul> <li>no se puede transmitir por el canal inseguro</li> <li>hay que transmitirla por otro canal seguro</li> <li>Ejemplos: PIN de la tarjeta del banco o archivo comprimido con contrase\u00f1a</li> </ul> </li> </ul>"},{"location":"Ud0%20Introduccion/Ud0_2AWS/#cifrados-asimetricos-o-de-clave-publica","title":"Cifrados asim\u00e9tricos o de clave p\u00fablica","text":"<p>En este tipo de cifrados cada usuario utiliza un par de claves: una clave p\u00fablica y una clave privada. Un mensaje cifrado con la clave p\u00fablica solo se puede descifrar con su correspondiente clave privada y viceversa.</p> <p>La clave p\u00fablica es accesible a cualquier persona que quiera consultarla, no hace falta que sea transmitida por un canal seguro como en el caso anterior.</p> <p>La clave privada solo la debe conocer su due\u00f1o.</p>"},{"location":"Ud0%20Introduccion/Ud0_2AWS/#encriptacion-de-un-mensaje-con-clave-publicaprivada","title":"Encriptaci\u00f3n de un mensaje con clave p\u00fablica/privada","text":"<p>Veamos c\u00f3mo podemos usar un par de claves p\u00fablica/privada para cifrar un mensaje por parte del emisor que solo pueda descrifrar el receptor.</p> <ol> <li>El emisor cifra un mensaje con la clave p\u00fablica del receptor</li> <li>El receptor recibe el mensaje y es el \u00fanico que podr\u00e1 descifrarlo porque es el \u00fanico que posee la clave cifrada asociada</li> </ol> <p></p> <p>Ventajas</p> <ul> <li>No se necesita un nuevo canal independiente y seguro para transmitir la clave p\u00fablica del receptor, que puede ser conocida por cualquiera.</li> </ul> <p>Inconvenientes</p> <ul> <li>Son m\u00e1s lentos que los cifrados sim\u00e9tricos</li> <li>Hay que proteger muy bien la clave privada y tenerla siempre disponible para poder descifrar los mensajes (no es una contrase\u00f1a)</li> <li>Hay que asegurarse de que la clave p\u00fablica es de qui\u00e9n dice ser y no de un impostor que se est\u00e9 haciendo pasar por \u00e9l</li> </ul>"},{"location":"Ud0%20Introduccion/Ud0_2AWS/#acceso-a-un-servidor-con-clave-publicaprivada","title":"Acceso a un servidor con clave p\u00fablica/privada","text":"<p>El proceso de autenticaci\u00f3n usando pares de claves p\u00fablica y privada, como en SSH, sigue estos pasos:</p> <ol> <li> <p>Generaci\u00f3n de claves: El usuario genera un par de claves, una clave privada y una clave p\u00fablica. La clave privada se mantiene en su m\u00e1quina, y la clave p\u00fablica se copia al servidor al que desea acceder, generalmente en el archivo ~/.ssh/authorized_keys del servidor.</p> </li> <li> <p>Inicio de sesi\u00f3n: Cuando el usuario intenta conectarse al servidor, el servidor utiliza la clave p\u00fablica que tiene almacenada para generar un desaf\u00edo (mensaje aleatorio). Env\u00eda este desaf\u00edo al usuario para que lo firme.</p> </li> <li> <p>Respuesta del cliente: El usuario, con su clave privada (que nunca se comparte), cifra el desaf\u00edo recibido y lo env\u00eda de vuelta al servidor como prueba de que posee la clave privada correspondiente a la clave p\u00fablica.</p> </li> <li> <p>Validaci\u00f3n del servidor: El servidor descifra la respuesta del cliente con la clave p\u00fablica que tiene. Si la respuesta es correcta, el servidor sabe que el usuario tiene la clave privada y, por lo tanto, lo autentica, permitiendo el acceso. </p> </li> </ol> <p></p> <p>Este proceso garantiza que la autenticaci\u00f3n es segura, ya que la clave privada nunca sale de la m\u00e1quina del usuario y no es necesaria una contrase\u00f1a si la clave est\u00e1 correctamente configurada.</p>"},{"location":"Ud0%20Introduccion/Ud0_2AWS/#como-usa-aws-el-cifrado-asimetrico","title":"\u00bfC\u00f3mo usa AWS el cifrado asim\u00e9trico?","text":"<p>En AWS deberemos crear un conjunto de claves p\u00fablica-privada para acceder a nuestros servidores virtuales. Podemos crear tantas claves p\u00fablica/privada c\u00f3mo queramos, pero en nuestro m\u00f3dulo bastar\u00e1 con crear una y usar la misma para acceder a todos los servidores.</p> <p>Crearemos el par de claves en el propio entorno AWS. Descargaremos en nuestro ordenador la clave privada, que solo poseeremos nosotros. En cada servidor que creemos le asociaremos la clave p\u00fablica de la pareja, que se mantiene en AWS. De esta manera, para poder realizar la conexi\u00f3n necesitaremos la clave privada que solo nosotros poseeremos en nuestro equipo local.</p> <p>Es importante mantener la clave privada a buen recaudo y tenerla disponible tanto en el aula como en casa para poder conectarnos a nuestras m\u00e1quinas virtuales en AWS.</p>"},{"location":"Ud1%20Control%20de%20versiones/P1_4_tallerGitIntro/","title":"Taller 1: Introducci\u00f3n a git y GitHub","text":""},{"location":"Ud1%20Control%20de%20versiones/P1_4_tallerGitIntro/#que-vas-a-aprender-en-este-taller","title":"\u00bfQu\u00e9 vas a aprender en este taller?","text":"<ul> <li>Recordar el uso de git para realizar el control de versiones de los proyectos.</li> <li>Configurar una cuenta en GitHub, servicio que nos ofrece repositorios remotos.</li> <li>Recordar el ciclo de vida de la gesti\u00f3n de nuestros repositorios: creaci\u00f3n, clonaci\u00f3n, sincronizaci\u00f3n, ... y nuestros ficheros:  creaci\u00f3n, modificaci\u00f3n, borrado.</li> </ul>"},{"location":"Ud1%20Control%20de%20versiones/P1_4_tallerGitIntro/#conceptos-previos-de-git-y-github","title":"Conceptos previos de git y GitHub","text":"<p>Git es un sistema de control de versiones distribuido ampliamente utilizado que permite a los desarrolladores rastrear y gestionar cambios en el c\u00f3digo fuente de proyectos de software. Permite la colaboraci\u00f3n efectiva en equipos, facilita el seguimiento de revisiones, la gesti\u00f3n de ramas de desarrollo y la reversi\u00f3n a versiones anteriores del c\u00f3digo, lo que lo convierte en una herramienta esencial para el desarrollo de software colaborativo y la gesti\u00f3n de proyectos.</p> <p>Para gestionar un proyecto con git crearemos un directorio en el que diremos a git que \"controle\" el estado de los distintos archivos que creemos en dicho directorio. Diremos que ese directorio es un \"Repositorio git\".</p> <p>En un repositorio git existen distintas secciones, que podemos entender como \"lugares\" donde pueden estar los archivos. Adem\u00e1s, cada archivo puede estar en distintos estados en funci\u00f3n de la secci\u00f3n en que se encuentren. Veamos ambos conceptos.</p>"},{"location":"Ud1%20Control%20de%20versiones/P1_4_tallerGitIntro/#secciones-principales-de-un-repositorio-git","title":"Secciones principales de un repositorio <code>git</code>","text":"<p>En un repositorio <code>git</code> podemos diferenciar las siguientes secciones:</p> <ul> <li>Workspace</li> <li>Staging area (Index)</li> <li>Local repository</li> <li>Remote repository</li> </ul> <p></p> <p>Figura 1: Imagen de Oliver Steele.</p>"},{"location":"Ud1%20Control%20de%20versiones/P1_4_tallerGitIntro/#estados-de-un-archivo-en-git","title":"Estados de un archivo en <code>git</code>","text":"<p>Un archivo puede estar en alguno de los siguientes estados:</p> <ul> <li>Sin seguimiento (untracked)</li> <li>Preparado (staged)</li> <li>Modificado (modified)</li> <li>Confirmado (commited)</li> </ul> <p>El siguiente diagrama muestra en qu\u00e9 secci\u00f3n se puede encontrar cada archivo en funci\u00f3n de su estado.</p> <pre><code>+-------------+  +-------------+  +-------------+  +-------------+\n|  Workspace  |  |   Staging   |  |    Local    |  |    Remote   |\n|             |  |     Area    |  |  Repository |  |  Repository |\n+------+------+  +------+------+  +------+------+  +------+------+\n       |                |                |                |\n       |                |                |                |\n   Untracked            |                |                |\n       |                |                |                |\n   Modified          Staged          Commited             |\n       |                |                |                |\n       |                |                |                |\n       |                |                |                |\n       +                +                +                +\n</code></pre> <p>Para consultar el estado de los archivos usamos el comando:</p> <pre><code>git status\n</code></pre> <p>Este comando es muy usado ya que es fundamental conocer el estado de los archivos de nuestro repositorio.</p> <p>Utilizando distintos comandos podemos pasar los archivos de una secci\u00f3n a otra y cambiar su estado. A continuaci\u00f3n veremos los comandos b\u00e1sicos que nos permitir\u00e1n una utilizaci\u00f3n b\u00e1sica de git usando como repositorio remoto GitHub.</p> <p>GitHub es una plataforma web que utiliza Git y ofrece un espacio en la nube donde los desarrolladores pueden guardar sus repositorios, colaborar con otros usuarios, compartir su c\u00f3digo y aprovechar herramientas adicionales como gesti\u00f3n de incidencias, integraci\u00f3n continua y documentaci\u00f3n. Puedes acceder a trav\u00e9s del siguiente enlace: GitHub.</p>"},{"location":"Ud1%20Control%20de%20versiones/P1_4_tallerGitIntro/#que-tienes-que-hacer","title":"\u00bfQu\u00e9 tienes que hacer?","text":"<ol> <li>Crea una cuenta en GitHub (Si no la tienes!!!). La forma de acceder a los repositorios remotos de GitHub va a ser por SSH, por lo tanto debes copiar tu clave p\u00fablica RSA a GitHub, para ello:</li> <li>Genera una par de claves ssh, como hicimos en una pr\u00e1ctica anterior. Puedes usar la que creaste entonces si quieres. Recuerda:     <pre><code>ssh-keygen -b 4096\n</code></pre> Si dej\u00e1is las opciones por defecto, crear\u00e1 una clave privada id_rsa y una clave p\u00fablica id_rsa.pub en el directorio /home/nombreusuario/.ssh. Compru\u00e9balo.</li> </ol> <p>Os pedir\u00e1 una contrase\u00f1a para proteger el uso de la clave privada. Puesto que precisamente queremos agilizar el proceso de conexi\u00f3n por SSH para no introducir contrase\u00f1as, deb\u00e9is dejarla vac\u00eda.</p> <ul> <li> <p>Copia el contenido de tu fichero <code>~/.ssh/id_rsa.pub</code>, para ello: a\u00f1ade una nueva clave SSH en el apartado \"SSH keys\" de tu perfil en GitHub y pega el contenido de tu clave p\u00fablica.</p> </li> <li> <p>Si no tienes ning\u00fan par de llaves SSH, puedes generarlas y copiar la llave p\u00fablica a GitHub. En el siguiente enlace dispones de toda la informaci\u00f3n sobre c\u00f3mo generar el par de llaves y c\u00f3mo a\u00f1adir la llave p\u00fablica a GitHub. Documentaci\u00f3n sobre conectarse a GitHub mediante SSH.</p> </li> <li> <p>Crea desde la plataforma web de GitHub un repositorio con el nombre repo_DAW_tu_nombre (inicializa el repositorio con un fichero README) y la descripci\u00f3n Repositorio para la asignatura de DAW de 2DAW.</p> </li> <li> <p>Instala git en tu ordenador (si no lo tienes instalado!!!).         <pre><code>apt-get install git\n</code></pre></p> </li> <li> <p>Configuraci\u00f3n de git. Lo primero que deber\u00edas hacer cuando instalas Git es establecer tu nombre de usuario y direcci\u00f3n de correo electr\u00f3nico (Asegurate que los datos son correctos y que has puesto tu nombre completo). Esto es importante porque las confirmaciones de cambios (commits) en Git usan esta informaci\u00f3n, y es introducida de manera inmutable en los commits que env\u00edas:         <pre><code>git config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\n</code></pre>     De nuevo, s\u00f3lo necesitas hacer esto una vez si especificas la opci\u00f3n <code>--global</code>, ya que Git siempre usar\u00e1 esta informaci\u00f3n para todo lo que hagas en ese sistema.</p> </li> <li> <p>Clonar el repositorio remoto. Vamos a clonar el repositorio remoto que acabas de crear en GitHub a nuestro ordenador. Para ello, copia la url SSH del repositorio  (no copies la URL https). A continuaci\u00f3n, sit\u00faate en un directorio en tu ordenador en local, dentro del cual quieras clonar el repositorio remoto. Al clonarlo, se crear\u00e1 una carpeta con el nombre del repositorio y sus contenidos.         <pre><code>git clone git@github.com:xxxxxxx/xxxxxxx.git\n</code></pre>     Comprueba que dentro del repositorio que hemos creado se encuentra el fichero README.md, en este fichero podemos poner la descripci\u00f3n del proyecto.</p> <p>Comprueba tambi\u00e9n que existe un directorio .git que contiene todos los ficheros que git utiliza para gestionar el proyecto</p> </li> <li> <p>Vamos a crear un nuevo fichero, lo vamos a a\u00f1adir a nuestro repositorio local y luego lo vamos a sincronizar con nuestro repositorio remoto de GitHub. Cada vez que hagamos una modificaci\u00f3n en un fichero lo podemos se\u00f1alar creando un commit. Los mensajes de los commits son fundamentales para explicar la evoluci\u00f3n de un proyecto. Un commit debe ser un conjunto peque\u00f1o de cambios de los ficheros del proyecto con una cierta coherencia. Comprueba tras cada comando git el estado y \u00e1rea donde se encuentra el archivo con git status.         <pre><code>echo \"Esto es una prueba\"&gt;ejemplo.txt\ngit add ejemplo.txt\ngit status\ngit commit -m \"He creado el fichero ejemplo.txt\"\ngit status\ngit push\n</code></pre></p> <p>Comprueba ahora en el repositorio remoto de GitHub que se ha subido el fichero ejemplo.txt y los comentarios del commit.</p> </li> <li> <p>Si modificas un fichero en tu repositorio local, pasar\u00e1 al \u00e1rea \"workspace\" y estado \"modificado\". Vamos a probarlo.</p> <pre><code>    echo \" modificada\"&gt;&gt;ejemplo.txt\n    git status\n</code></pre> <p>Comprueba como te dice que el fichero ejemplo.txt esta en estado modificado.</p> </li> <li> <p>Ahora podr\u00edamos pasarlo al \u00e0rea \"stage\" nuevamente con <code>git add ejemplo.txt</code> o pasarlo directamente al \"Repositorio local\" con <code>git commit -a</code>. Por rapidez usaremos esta \u00faltima forma. F\u00edjate que usaremos siempre <code>-m</code> para incluir un comentario descriptivo a cada commit.</p> <pre><code>    git commit -am \"He modificado el fichero ejemplo.txt\"\n    git status\n    git push\n    git status\n</code></pre> <p>Note</p> <p>El git status que realizamos tras cada comando no es necesario. S\u00edmplemente lo hacemos para ir aprendiendo los distintos estados y \u00e1reas por las que pasa el fichero.</p> </li> <li> <p>Si quieres cambiar el nombre de un fichero o directorio de tu repositorio:</p> <pre><code>    git mv ejemplo.txt ejemplo2.txt\n    git commit -am \"He cambiado el nombre del fichero\"\n    git status\n    git push\n    git status\n</code></pre> </li> <li> <p>Si quieres borrar un fichero de tu repositorio:</p> <pre><code>    git rm ejemplo2.txt\n    git status\n    git commit -am \"He borrado el fichero ejemplo2\"\n    git status\n    git push\n</code></pre> </li> <li> <p>Puedes comprobar el historial de commits del proyecto as\u00ed</p> <pre><code>    git log\n</code></pre> </li> <li> <p>Para finalizar comprueba en GitHub el historial de commits.  </p> </li> </ul> <p>Note</p> <p>Puedes clonar tu repositorio de GitHub en varios ordenadores (por ejemplo, si quieres trabajar en tu casa y en el instituto), por lo tanto antes de trabajar en un repositorio local tienes que sincronizar los posibles cambios que se hayan producido en el repositorio remoto, para ello:</p> <pre><code>    git pull\n</code></pre> <p>\u00bfQu\u00e9 tienes que entregar?</p> <ol> <li>Una captura de pantalla donde se vea que has creado el repositorio.</li> <li>El contenido del fichero <code>.git/config</code> para que se vea que has clonado el repositorio con la URL ssh.</li> <li>La salida de la instrucci\u00f3n <code>git log</code> para ver los commits que has realizado (debe aparecer como autor tu nombre completo).</li> <li>Buscar informaci\u00f3n para crear un nuevo repositorio llamado repo2_tu_nombre. En esta ocasi\u00f3n, crea primero el repositorio local (usando <code>git init</code>) y luego busca informaci\u00f3n para sincronizarlo y crear el repositorio remoto en GitHub. Comenta los pasos que has realizado y manda alguna prueba de funcionamiento.</li> </ol>"},{"location":"Ud1%20Control%20de%20versiones/P1_5_tallerGitRamasUniones/","title":"Taller 2: Git. Trabajando con ramas y uniones","text":""},{"location":"Ud1%20Control%20de%20versiones/P1_5_tallerGitRamasUniones/#que-vas-a-aprender-en-este-taller","title":"\u00bfQu\u00e9 vas a aprender en este taller?","text":"<ul> <li>Aprender\u00e1s el concepto de rama.</li> <li>La gesti\u00f3n y el ciclo de vida (creaci\u00f3n, modificaci\u00f3n, borrado, ...) de ramas.</li> <li>Aprender\u00e1s el concepto de uni\u00f3n (merge) que nos posibilita la fusi\u00f3n de ramas.</li> <li>A solucionar los posibles conflictos que pueden aparecer en el momento del merge.</li> </ul>"},{"location":"Ud1%20Control%20de%20versiones/P1_5_tallerGitRamasUniones/#como-trabajar-en-equipo-con-git","title":"C\u00f3mo trabajar en equipo con <code>git</code>","text":"<p>Git nos permite trabajar de forma colaborativa en un proyecto mediante el concepto de \"rama\". Cada miembro del proyecto puede crear una rama del mismo, realizar modificaciones y, posteriormente, unir nuevamente las modificaciones realizadas por cada miembro en la rama principal. Git se encargar\u00e1 de detectar qu\u00e9 se ha modificado (incluso si m\u00e1s de un miembro han modificado la misma parte del proyecto) mostr\u00e1ndonos los cambios y permiti\u00e9ndonos elegir qu\u00e9 integrar en la rama principal y qu\u00e9 no.</p> <p>La siguiente imagen muestra una secuencia de trabajo colaborativa en un proyecto git.</p> <p></p> <p>Figura 2: Imagen extra\u00edda del blog de James Chambers.</p> <p>Se recomienda leer el post Using Git in a team: a cheatsheet. </p> <p>Veamos c\u00f3mo llevar a cabo este trabajo con ramas aunque no abordaremos el proceso completo que muestra este diagrama. De momento nos centraremos en crear una nueva rama, trabajar en ella, unirla con la principal y finalmente eliminarla.</p>"},{"location":"Ud1%20Control%20de%20versiones/P1_5_tallerGitRamasUniones/#que-tienes-que-hacer","title":"\u00bfQu\u00e9 tienes que hacer?","text":"<p>Trabaja con el repositorio de los talleres anteriores.</p> <ol> <li>Una rama representa una l\u00ednea independiente de desarrollo, es como crear un nuevo \u00e1rea de trabajo que tendr\u00e1 su historial propio de commits.</li> <li> <p>Para  listar las ramas locales ejecuta:</p> <pre><code>    $ git branch\n    * main\n</code></pre> <p>La rama en la que est\u00e1s trabajando actualmente se se\u00f1ala con un asterisco . La rama main (en proyectos antiguos se llama master*) es la rama con la que se comienza en cualquier proyecto, y es la que se utiliza como rama principal donde se encuentra el proyecto en su estado final. </p> </li> <li> <p>Crea una nueva rama con la instrucci\u00f3n:</p> <pre><code>    $ git branch nuevarama\n</code></pre> </li> <li> <p>Vuelve a lista las ramas, comprueba que todav\u00eda est\u00e1s en la rama <code>main</code>, para pasar a la nueva rama utiliza el comando:</p> <pre><code>    $ git checkout nuevarama\n</code></pre> <ul> <li>Comprueba que en la nueva rama tienes los mismos ficheros que en la rama principal.</li> <li>Todos los cambios que realices en los ficheros en esta rama no se ver\u00e1n en la rama principal.</li> <li>Truco: con el comando <code>git checkout -b [rama]</code> se crea una nueva rama y te posicionas en ella.</li> <li>Con el comando <code>git branch -v</code> se ve el \u00faltimo commit de cada rama. Comprueba que coinciden el \u00faltimo commit en las dos ramas.</li> <li>Truco: Puedes usar una extensi\u00f3n de tu shell (bash, zsh,...) para que te muestre en el prompt la rama en la que est\u00e1s trabajando.</li> </ul> </li> <li> <p>Prueba a modificar alg\u00fan fichero y crea un nuevo fichero en esta rama. Realiza el commit y comprueba que estos cambios no se han reflejado en los ficheros de la rama principal. Ejecuta <code>git branch -v</code> para ver el \u00faltimo commit de cada rama.</p> </li> <li> <p>Las ramas no se crean autom\u00e1ticamente en GitHub, hay que realizar un <code>push</code> para crearlas en remoto. Nota: <code>origin</code> es el nombre del repositorio remoto. Por lo tanto ejecutamos: </p> <p><pre><code>    $ git push origin nuevarama\n</code></pre> Comprueba en GitHub que se ha creado la nueva rama y que puedes seleccionar las 2 ramas existentes.</p> </li> <li> <p>Una vez que has trabajado en una rama, lo normal es querer incorporar los cambios a la rama principal. Para unir una rama a la principal, ejecutamos:</p> <p><pre><code>    $ git checkout main\n    $ git merge nuevarama\n</code></pre> Cuando s\u00f3lo se han a\u00f1adido o eliminado archivos en una rama, es f\u00e1cil unirla a la principal. El resultado simplemente ser\u00e1 la suma o resta de esos archivos en la principal. Cuando se hacen modificaciones en archivos, incluyendo cambios en los nombres de los archivos, git detecta esos cambios y los adapta autom\u00e1ticamente, pero a veces surgen conflictos.</p> <p>Realiza la fusi\u00f3n de la nueva rama a la principal. \u00bfSe han producido conflictos?</p> </li> <li> <p>Los conflictos aparecen cuando se ha modificado la misma parte del c\u00f3digo en dos ramas diferentes. Veamos un ejemplo:</p> <ul> <li>Crea un fichero <code>prueba.txt</code> en la rama principal. Recuerda hacer un commit.</li> <li>Crea una nueva rama y accede a ella. </li> <li>Modifica el fichero en la nueva rama. Recuerda hacer un commit.</li> <li>Vuelve a la rama principal. Y modifica de nuevo el fichero antes de realizar el merge.</li> <li> <p>Realiza la uni\u00f3n y aparece el conflicto:</p> <pre><code>    $ git merge nuevo \n    Auto-fusionando prueba.txt\n    CONFLICTO (contenido): Conflicto de fusi\u00f3n en prueba.txt\n    Fusi\u00f3n autom\u00e1tica fall\u00f3; arregle los conflictos y luego realice un commit con el resultado.\n</code></pre> </li> <li> <p>Si miramos el fichero:</p> </li> </ul> <p>```sh         $ cat prueba.txt </p> <pre><code>    &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n    Hola c\u00f3mo est\u00e1s\n    =======\n    hola que tal\n    &gt;&gt;&gt;&gt;&gt;&gt;&gt; nuevo\n```\n</code></pre> <p>Tenemos el contenido que estaba en la rama principal (HEAD) y lo que estaba en la rama nuevo. Ser\u00e1 el usuario el que tendr\u00e1 que dejar el contenido del fichero como quiera editando directamente el fichero en la rama main.</p> </li> <li> <p>Es bastante frecuente crear una rama, hacer los cambios que sean necesarios, unirla a una rama principal y despu\u00e9s eliminar la rama que se hab\u00eda creado.  Para eliminar una rama en local ejecutamos:      <pre><code>    $ git branch -d nuevarama\n</code></pre>     Para eliminarla en remoto     <pre><code>    git push origin --delete nuevarama\n</code></pre>     Si queremos eliminarla tanto en local como en remoto deberemos ejecutar ambos comandos.</p> </li> <li> <p>Acaba la pr\u00e1ctica eliminando el repositorio remoto en GitHub y el directorio local que has creado.</p> <ol> <li>En GitHub ve al proyecto, Settings, General, \"Danger zone\" y selecciona \"Delete this repository\"</li> <li>En local utiliza <code>rm -Rf pruebanombre</code> para eliminar todos el directorio del proyecto.</li> </ol> </li> </ol> <p>Hazlo t\u00fa solo</p> <ol> <li>Crea una rama que se llame <code>primera</code> en tu local, y ejecuta la instrucci\u00f3n necesaria para comprobar que se ha creado.</li> <li>Crea un nuevo fichero en esta rama y fusi\u00f3nalo con la principal. \u00bfSe ha producido conflicto? Razona la respuesta.</li> <li>Borra la rama <code>primera</code>.</li> <li>Crea una rama que se llame <code>segunda</code>, y modifica un fichero en ella para producir un conflicto al unirlo a la rama principal. Observa el contenido del fichero donde se ha producido el conflicto.</li> <li>Soluciona el conflicto que has creado en el punto anterior y sincroniza la rama <code>segunda</code> en el remoto. Comprueba que se ha creado la rama en el repositorio de GitHub.</li> </ol>"},{"location":"Ud1%20Control%20de%20versiones/P1_6_tallerMarkdown/","title":"Taller 3: Introducci\u00f3n a Markdown","text":"<p>Markdown es un lenguaje de marcado ligero que se utiliza para dar formato y estructura a documentos de texto de una manera sencilla y legible. Fue creado por John Gruber y Aaron Swartz en 2004 y se ha vuelto ampliamente popular entre escritores, desarrolladores y en la documentaci\u00f3n de proyectos de software debido a su simplicidad y facilidad de uso.</p> <p>En Markdown, puedes agregar formato b\u00e1sico, como encabezados, listas, enlaces, \u00e9nfasis (cursiva y negrita), im\u00e1genes y m\u00e1s, utilizando una sintaxis simple y legible. Aqu\u00ed hay algunos ejemplos de Markdown:</p> <ul> <li> <p>Encabezados:   <pre><code># T\u00edtulo principal\n## Subt\u00edtulo\n</code></pre></p> </li> <li> <p>Listas:   <pre><code>- Elemento de lista 1\n- Elemento de lista 2\n</code></pre></p> </li> <li> <p>\u00c9nfasis:   <pre><code>*Texto en cursiva* o **Texto en negrita**\n</code></pre></p> </li> <li> <p>Enlaces:   <pre><code>[Texto del enlace](URL)\n</code></pre></p> </li> </ul> <p>Markdown es especialmente \u00fatil para crear documentaci\u00f3n, escribir publicaciones de blog, crear README.md en repositorios de Git, y mucho m\u00e1s, ya que permite que el contenido se vea bien formateado tanto en formato de texto plano como en HTML. Muchas plataformas y editores de texto admiten Markdown, lo que facilita su adopci\u00f3n y uso en diversas aplicaciones.</p>"},{"location":"Ud1%20Control%20de%20versiones/P1_6_tallerMarkdown/#que-vas-a-aprender-en-este-taller","title":"\u00bfQu\u00e9 vas a aprender en este taller?","text":"<ul> <li>Aprender la sintaxis b\u00e1sica del lenguaje de marcas Markdown para estructura la informaci\u00f3n en nuestro documentos.</li> </ul>"},{"location":"Ud1%20Control%20de%20versiones/P1_6_tallerMarkdown/#recursos-para-realizar-este-taller","title":"Recursos para realizar este taller","text":"<ul> <li>Puedes usar cualquier manual b\u00e1sico de Markdown, por ejemplo Markdown cheat sheet.</li> </ul>"},{"location":"Ud1%20Control%20de%20versiones/P1_6_tallerMarkdown/#que-tienes-que-hacer","title":"\u00bfQu\u00e9 tienes que hacer?","text":"<ol> <li>Crea un repositorio nuevo en GitHub y cl\u00f3nalo en local.</li> <li> <p>A los archivos en markdown les solemos poner extensi\u00f3n md. Crea un fichero llamado <code>miprimermd.md</code>. Este fichero tiene que tener los siguientes elementos en este orden:</p> <ul> <li>Un t\u00edtulo principal</li> <li>Un subt\u00edtulo</li> <li>Un p\u00e1rrafo, con palabras en negrita, en cursiva, en c\u00f3digo (por ejemplo esto est\u00e1 escrito en <code>c\u00f3digo</code>).</li> <li>Un trozo de c\u00f3digo.</li> <li>Una lista ordenada</li> <li>Una lista desordenada.</li> <li>Un enlace a una URL externa.</li> <li>Un enlace a otro fichero Markdown que tengas en el repositorio.</li> <li>Una imagen</li> <li>Una tabla</li> </ul> </li> <li> <p>Sube el fichero al repositorio remoto y visualizalo all\u00ed.</p> </li> </ol> <p>\u00bfQu\u00e9 tienes que entregar?</p> <ol> <li>La URL de GitHub para acceder al fichero que has creado.</li> </ol>"},{"location":"Ud1%20Control%20de%20versiones/P1_7_tallerPractica/","title":"Pr\u00e1ctica 1.4 \u2013 Ciclo de despliegue: de local a publicado en web","text":""},{"location":"Ud1%20Control%20de%20versiones/P1_7_tallerPractica/#objetivo","title":"Objetivo","text":"<p>En esta pr\u00e1ctica vas a realizar el ciclo completo de despliegue web, desde tu equipo local hasta la publicaci\u00f3n en un servidor accesible por Internet. El documento detalla cada paso, con comandos listos para copiar y notas para evitar errores habituales.</p>"},{"location":"Ud1%20Control%20de%20versiones/P1_7_tallerPractica/#1-preparar-el-entorno-local","title":"1. Preparar el entorno local","text":"<p>En tu ordenador local (Casa o Instituto), abre un terminal y ejecuta:</p> <pre><code>mkdir P1_4\ncd P1_4\ncode .\n</code></pre> <p>Esto abrir\u00e1 Visual Studio Code en la carpeta <code>P1_4</code>.</p>"},{"location":"Ud1%20Control%20de%20versiones/P1_7_tallerPractica/#2-crear-indexhtml","title":"2. Crear <code>index.html</code>","text":"<p>Crea un archivo llamado <code>index.html</code> con el siguiente contenido de ejemplo (puedes adaptarlo con tus datos reales):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Pr\u00e1ctica 1.4 - Despliegue Web&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Alumno: Juan Garc\u00eda P\u00e9rez&lt;/h1&gt;\n  &lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; juan.garcia01@alu.edu.gva.es&lt;/p&gt;\n  &lt;p&gt;&lt;strong&gt;Curso:&lt;/strong&gt; 2\u00ba DAW&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/P1_7_tallerPractica/#3-subir-el-proyecto-a-github","title":"3. Subir el proyecto a GitHub","text":"<p>Desde el terminal integrado de Visual Studio Code, sube tu proyecto al repositorio de GitHub de la pr\u00e1ctica (<code>P1_4</code>). Aseg\u00farate de tener Git instalado y la autenticaci\u00f3n por SSH configurada previamente. </p>"},{"location":"Ud1%20Control%20de%20versiones/P1_7_tallerPractica/#pasos","title":"Pasos","text":"<p>1) Inicializa el repositorio y crea el primer commit:</p> <pre><code>git init\ngit add .\ngit commit -m \"Subida inicial pr\u00e1ctica P1_4\"\n</code></pre> <p>2) Define la rama principal y vincula el remoto:</p> <pre><code># Opci\u00f3n A (recomendada en GitHub actual)\ngit branch -M main\n\n# Opci\u00f3n B (si tu entorno usa master)\n# git branch -M master\n</code></pre> <p>3) A\u00f1ade el remoto y sube la rama principal (sustituye tu_usuario por tu usuario real de GitHub):</p> <pre><code>git remote add origin git@github.com:tu_usuario/P1_4.git\n\n# Si usas main\ngit push -u origin main\n\n# Si usas master\n# git push -u origin master\n</code></pre> <p>4) Etiqueta la entrega para identificar la versi\u00f3n:</p> <pre><code>git tag -a P1_4 -m \"Entrega pr\u00e1ctica 1.4\"\ngit push origin P1_4\n</code></pre> <p>Nota: Mant\u00e9n coherencia entre <code>main</code> o <code>master</code> en todos los comandos (push/pull/merge).</p>"},{"location":"Ud1%20Control%20de%20versiones/P1_7_tallerPractica/#4-conexion-al-servidor-remoto-aws","title":"4. Conexi\u00f3n al servidor remoto (AWS)","text":"<p>En el aula solo se permiten conexiones SSH a dominios autorizados (p. ej., GitHub o AWS). Por ello, usar\u00e1s una instancia en AWS para continuar el despliegue.</p> <p>1) Ten creada tu instancia (p. ej., Debian) y descarga la clave privada <code>.pem</code> al crearla. 2) Asigna permisos adecuados a la clave:</p> <pre><code>chmod 400 mi_clave.pem\n</code></pre> <p>3) Con\u00e9ctate a tu instancia desde el ordenador local</p> <pre><code>ssh -i \"ruta/mi_clave.pem\" debian@&lt;IP_PUBLICA_AWS&gt;\n</code></pre> <p>Ejemplo:</p> <pre><code>ssh -i \"~/.ssh/mi_clave.pem\" debian@ip_AWS\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/P1_7_tallerPractica/#5-generar-claves-ssh-para-el-servidor-del-profesor-iespublicocom","title":"5. Generar claves SSH para el servidor del profesor (<code>iespublico.com</code>)","text":"<p>Desde tu servidor AWS, genera un par de claves para acceder al servidor del profesor. No compartas nunca la clave privada.</p> <pre><code>ssh-keygen -t ed25519 -C \"tu_correo@alu.edu.gva.es\" -f ~/.ssh/iespublico\n</code></pre> <p>Entrega la clave p\u00fablica en Aules para que el profesor la a\u00f1ada al servidor:</p> <pre><code>cat ~/.ssh/iespublico.pub\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/P1_7_tallerPractica/#6-conexion-al-servidor-iespublicocom-y-despliegue","title":"6. Conexi\u00f3n al servidor <code>iespublico.com</code> y despliegue","text":"<p>1) Con\u00e9ctate al servidor del dominio <code>iespublico.com</code> usando tu subdominio como usuario:</p> <pre><code>ssh -i ~/.ssh/iespublico subdominio@subdominio.iespublico.com\n</code></pre> <p>2) Dentro del servidor, genera un par de claves para conectar con GitHub y a\u00f1ade la clave p\u00fablica en tu cuenta de GitHub (Settings \u2192 SSH and GPG keys \u2192 New SSH key):</p> <pre><code>ssh-keygen -t ed25519 -C \"tu_correo@alu.edu.gva.es\" -f ~/.ssh/github\ncat ~/.ssh/github.pub\n</code></pre> <p>3) Ve al directorio p\u00fablico de tu sitio y descarga el repositorio:</p> <pre><code>cd /var/www/subdominio/public_html\n\n# Si ya existe el repo remoto configurado en esta carpeta\ngit pull origin main      # o: git pull origin master\n\n# Si es la primera vez\ngit clone git@github.com:tu_usuario/P1_4.git .\n</code></pre> <p>Conexi\u00f3n SSH con GitHub</p> <p>Para la conexi\u00f3n correcta se debe poner: <code>ssh -i ~/.ssh/id_ed25519 git@github.com</code></p> <p>Ya que la clave que hemos creado no es predeterminada, debemos usar la opci\u00f3n -i para indicar cu\u00e1l utilizar.</p> <p>Puedes hacer una mejora configurando una vez el archivo <code>~/.ssh/config</code>:</p> <pre><code>Host github.com\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/nombreClaveGithub\n</code></pre> <p>A partir de ah\u00ed, ya podr\u00e1s conectarte directamente con: <code>ssh git@github.com</code></p> <p>4) Comprueba que <code>index.html</code> est\u00e1 en <code>public_html</code> y verifica la publicaci\u00f3n accediendo a:</p> <pre><code>http://subdominio.iespublico.com\n</code></pre> <p>Ver\u00e1s que el navegador quiere ir por defecto a https, debes quitar la s de SSL. Aprenderemos m\u00e1s adelante a generar la web con SSL.</p>"},{"location":"Ud1%20Control%20de%20versiones/P1_7_tallerPractica/#resultado-esperado","title":"Resultado esperado","text":"<p>Tu <code>index.html</code> debe estar accesible en tu subdominio dentro de <code>iespublico.com</code>, mostrando correctamente la informaci\u00f3n indicada.</p>"},{"location":"Ud1%20Control%20de%20versiones/P1_7_tallerPractica/#proximos-pasos","title":"Pr\u00f3ximos pasos","text":"<p>Este es un ejercicio base para comprender el flujo de despliegue. En pr\u00e1cticas posteriores se realizar\u00e1 el proceso con Docker, y stacks como LAMP y LEMP, entre otros.</p>"},{"location":"Ud1%20Control%20de%20versiones/T02_cvs/","title":"Sistemas de control de versiones","text":""},{"location":"Ud1%20Control%20de%20versiones/T02_cvs/#definicion-clasificacion-y-funcionamiento","title":"Definici\u00f3n, clasificaci\u00f3n y funcionamiento","text":"<p>Se llama control de versiones a la gesti\u00f3n de los diversos cambios que se realizan sobre los elementos de alg\u00fan producto o una configuraci\u00f3n del mismo. Una versi\u00f3n, revisi\u00f3n o edici\u00f3n de un producto, es el estado en el que se encuentra dicho producto en un momento dado de su desarrollo o modificaci\u00f3n. Aunque un sistema de control de versiones puede realizarse de forma manual, es muy aconsejable disponer de herramientas que faciliten esta gesti\u00f3n dando lugar a los llamados sistemas de control de versiones o SVC (del ingl\u00e9s System Version Control).</p> <p>Estos sistemas facilitan la administraci\u00f3n de las distintas versiones de cada producto desarrollado, as\u00ed como las posibles especializaciones realizadas (por ejemplo, para alg\u00fan cliente espec\u00edfico). Ejemplos de este tipo de herramientas son entre otros: CVS, Apache Subversion, Ms Visual Studio Team Foundation Server, IBM ClearCase, Darcs, Canonical Bazaar, Plastic SCM, Git, Mercurial, Perforce.</p>"},{"location":"Ud1%20Control%20de%20versiones/T02_cvs/#clasificacion","title":"Clasificaci\u00f3n","text":"<p>Podemos clasificar los sistemas de control de versiones atendiendo a la arquitectura utilizada para el almacenamiento del c\u00f3digo: locales, centralizados y distribuidos.</p>"},{"location":"Ud1%20Control%20de%20versiones/T02_cvs/#locales","title":"Locales","text":"<p>Los cambios son guardados localmente y no se comparten con nadie. Esta arquitectura es la antecesora de las dos siguientes.</p> <p></p>"},{"location":"Ud1%20Control%20de%20versiones/T02_cvs/#centralizados","title":"Centralizados","text":"<p>Existe un repositorio centralizado de todo el c\u00f3digo, del cual es responsable un \u00fanico usuario (o conjunto de ellos). Se facilitan las tareas administrativas a cambio de reducir flexibilidad, pues todas las decisiones fuertes (como crear una nueva rama) necesitan la aprobaci\u00f3n del responsable. Algunos ejemplos son CVS y Subversion.</p> <p></p>"},{"location":"Ud1%20Control%20de%20versiones/T02_cvs/#distribuidos","title":"Distribuidos","text":"<p>Cada usuario tiene su propio repositorio. Los distintos repositorios pueden intercambiar y mezclar revisiones entre ellos. Es frecuente el uso de un repositorio, que est\u00e1 normalmente disponible, que sirve de punto de sincronizaci\u00f3n de los distintos repositorios locales. Ejemplos: Git y Mercurial.</p> <p></p>"},{"location":"Ud1%20Control%20de%20versiones/T02_cvs/#ventajas-de-sistemas-distribuidos","title":"Ventajas de sistemas distribuidos","text":"<ul> <li>No es necesario estar conectado para guardar cambios.</li> <li>Posibilidad de continuar trabajando si el repositorio remoto no est\u00e1 accesible.</li> <li>El repositorio central est\u00e1 m\u00e1s libre de ramas de pruebas.</li> <li>Se necesitan menos recursos para el repositorio remoto.</li> <li>M\u00e1s flexibles al permitir gestionar cada repositorio personal como se quiera.</li> </ul>"},{"location":"Ud1%20Control%20de%20versiones/T03_introduccion/","title":"Introducci\u00f3n a git","text":"<p>Git es un sistema de control de versiones distribuido que se diferencia del resto en el modo en que modela sus datos. La mayor\u00eda de los dem\u00e1s sistemas almacenan la informaci\u00f3n como una lista de cambios en los archivos, mientras que Git modela sus datos m\u00e1s como un conjunto de instant\u00e1neas de un mini sistema de archivos.</p> <p></p> <p></p>"},{"location":"Ud1%20Control%20de%20versiones/T03_introduccion/#los-tres-estados","title":"Los tres estados","text":"<p>Git tiene tres estados principales en los que se pueden encontrar tus archivos: confirmado (committed), modificado (modified), y preparado (staged). </p> <ul> <li>Modificado modified significa que has modificado el archivo pero todav\u00eda no lo has preparado ni confirmado a tu repositorio local.</li> <li>Preparado staged significa que has marcado un archivo modificado en su versi\u00f3n actual para que vaya en tu pr\u00f3xima confirmaci\u00f3n.</li> <li>Confirmado committed significa que los datos est\u00e1n almacenados de manera segura en tu repositorio local. </li> </ul> <p>Esto nos lleva a las tres secciones principales de un proyecto de Git: el directorio de Git (Git directory), el directorio de trabajo (working directory), y el \u00e1rea de preparaci\u00f3n (staging area).</p> <p></p> <p>Esto es solo una introducci\u00f3n. Lo veremos en detalle m\u00e1s adelante.</p>"},{"location":"Ud1%20Control%20de%20versiones/T03_introduccion/#flujos-de-trabajo-distribuidos-con-git","title":"Flujos de trabajo distribuidos con git","text":"<p>Hemos visto en qu\u00e9 consiste un entorno de control de versiones distribuido, pero m\u00e1s all\u00e1 de la simple definici\u00f3n, existe m\u00e1s de una manera de gestionar los repositorios. Estos son los flujos de trabajo m\u00e1s comunes en Git.</p>"},{"location":"Ud1%20Control%20de%20versiones/T03_introduccion/#flujo-de-trabajo-centralizado","title":"Flujo de trabajo centralizado","text":"<p>Existe un \u00fanico repositorio o punto central que guarda el c\u00f3digo y todo el mundo sincroniza su trabajo con \u00e9l. Si dos desarrolladores clonan desde el punto central, y ambos hacen cambios, tan solo el primero de ellos en enviar sus cambios de vuelta lo podr\u00e1 hacer limpiamente. El segundo desarrollador deber\u00e1 fusionar previamente su trabajo con el del primero, antes de enviarlo, para evitar el sobreescribir los cambios del primero</p> <p></p>"},{"location":"Ud1%20Control%20de%20versiones/T03_introduccion/#flujo-de-trabajo-del-gestor-de-integraciones","title":"Flujo de trabajo del Gestor-de-Integraciones","text":"<p>Al permitir m\u00faltiples repositorios remotos, en Git es posible tener un flujo de trabajo donde cada desarrollador tenga acceso de escritura a su propio repositorio p\u00fablico y acceso de lectura a los repositorios de todos los dem\u00e1s. Habitualmente, este escenario suele incluir un repositorio can\u00f3nico, representante \"oficial\" del proyecto.</p> <p></p> <p>Info</p> <p>Este modelo se puso muy de moda a ra\u00edz de la forja GitHub que se ver\u00e1 m\u00e1s adelante.</p>"},{"location":"Ud1%20Control%20de%20versiones/T03_introduccion/#flujo-de-trabajo-con-dictador-y-tenientes","title":"Flujo de trabajo con Dictador y Tenientes","text":"<p>Es una variante del flujo de trabajo con m\u00faltiples repositorios. Se utiliza generalmente en proyectos muy grandes, con cientos de colaboradores. Un ejemplo muy conocido es el del kernel de Linux. Unos gestores de integraci\u00f3n se encargan de partes concretas del repositorio; y se denominan tenientes. Todos los tenientes rinden cuentas a un gestor de integraci\u00f3n; conocido como el dictador benevolente. El repositorio del dictador benevolente es el repositorio de referencia, del que recuperan (pull) todos los colaboradores.</p> <p></p>"},{"location":"Ud1%20Control%20de%20versiones/T04_git/","title":"Instalaci\u00f3n y configuraci\u00f3n de Git","text":""},{"location":"Ud1%20Control%20de%20versiones/T04_git/#instalacion","title":"Instalaci\u00f3n","text":""},{"location":"Ud1%20Control%20de%20versiones/T04_git/#instalando-en-linux","title":"Instalando en Linux","text":"<p>Si quieres instalar Git en Linux a trav\u00e9s de un instalador binario, en general puedes hacerlo a trav\u00e9s de la herramienta b\u00e1sica de gesti\u00f3n de paquetes que trae tu distribuci\u00f3n. Si est\u00e1s en Fedora, puedes usar yum:</p> <pre><code>$ yum install git-core\n</code></pre> <p>O si est\u00e1s en una distribuci\u00f3n basada en Debian como Ubuntu, prueba con apt-get:</p> <pre><code>$ apt-get install git-all\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T04_git/#instalando-en-windows","title":"Instalando en Windows","text":"<p>Instalar Git en Windows es muy f\u00e1cil. El proyecto \"Gti for Windows\" (antes msysGit) tiene uno de los procesos de instalaci\u00f3n m\u00e1s sencillos. Simplemente descarga el archivo exe del instalador desde la p\u00e1gina de GitHub, y ejec\u00fatalo:</p> <p>https://gitforwindows.org/</p> <p>Una vez instalado, tendr\u00e1s tanto la versi\u00f3n de l\u00ednea de comandos (incluido un cliente SSH que nos ser\u00e1 \u00fatil m\u00e1s adelante) como la interfaz gr\u00e1fica de usuario est\u00e1ndar. Se recomienda no modificar las opciones que trae por defecto el instalador.</p>"},{"location":"Ud1%20Control%20de%20versiones/T04_git/#instalando-en-macos","title":"Instalando en MacOS","text":"<p>En MacOS se recomienda tener instalada la herramienta homebrew. Despu\u00e9s, es tan f\u00e1cil como ejecutar:</p> <pre><code>$ brew install git\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T04_git/#recomendacion","title":"Recomendaci\u00f3n","text":"<p>En este curso estamos acostumbrados a usar m\u00e1quinas virtuales en AWS. Si vas a estar trabajando en casa y en el instituto, te recomiendo que crees una MV Debian con par\u00e1metros por defecto en AWS para ir siguiendo el curso. De esta forma tendr\u00e1s lo mismo en ambos lugares.</p> <p>Si optas por esa opci\u00f3n recuerda realizar lo primero un <code>sudo apt-get update &amp;&amp; upgrade</code> antes de instalar git para contar con la \u00faltima versi\u00f3n disponible.</p> <p>Informaci\u00f3n</p> <p>Puedes comprobar la versi\u00f3n de git que est\u00e1s usando con <code>git --version</code>. En el momento de escribir estas notas la versi\u00f3n es la 2.39.2</p>"},{"location":"Ud1%20Control%20de%20versiones/T04_git/#configuracion","title":"Configuraci\u00f3n","text":""},{"location":"Ud1%20Control%20de%20versiones/T04_git/#tu-identidad","title":"Tu identidad","text":"<p>Lo primero que deber\u00edas hacer cuando instalas Git es establecer tu nombre de usuario y direcci\u00f3n de correo electr\u00f3nico. Esto es importante porque las confirmaciones de cambios (commits) en Git usan esta informaci\u00f3n, y es introducida de manera inmutable en los commits que env\u00edas:</p> <pre><code>$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n</code></pre> <p>Tambi\u00e9n se recomienda configurar el siguiente par\u00e1metro:</p> <pre><code>$ git config --global push.default simple\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T04_git/#bash-completion","title":"Bash Completion","text":"<p>Si est\u00e1s trabajando en linux Bash completion es una utilidad que permite a bash completar \u00f3rdenes y par\u00e1metros. Por defecto suele venir desactivada en Ubuntu y es necesario modificar el archivo <code>$HOME/.bashrc</code> para poder activarla. Simplemente hay que descomentar las l\u00edneas que lo activan.</p>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/","title":"Uso b\u00e1sico de Git","text":"<p>Vamos primero a recordar algunas cuestiones b\u00e1sicas de git.</p>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#secciones-principales-de-un-repositorio-git","title":"Secciones principales de un repositorio <code>git</code>","text":"<p>En un repositorio <code>git</code> podemos diferenciar las siguientes secciones:</p> <ul> <li>Workspace</li> <li>Staging area (aparece en la imagen como Index)</li> <li>Local repository</li> <li>Remote repository</li> </ul> <p></p> <p>Figura 1: Imagen de Oliver Steele.</p>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#estados-de-un-archivo-en-git","title":"Estados de un archivo en <code>git</code>","text":"<p>Un archivo puede estar en alguno de los siguientes estados:</p> <ul> <li>Sin seguimiento (untracked)</li> <li>Modificado (modified)</li> <li>Preparado (staged)</li> <li>Confirmado (commited)</li> </ul> <p>El siguiente diagrama muestra en qu\u00e9 secci\u00f3n se puede encontrar cada archivo en funci\u00f3n de su estado.</p> <pre><code>+-------------+  +-------------+  +-------------+  +-------------+\n|  Working    |  |   Staging   |  |    Local    |  |    Remote   |\n|  Directory  |  |     Area    |  |  Repository |  |  Repository |\n+------+------+  +------+------+  +------+------+  +------+------+\n       |                |                |                |\n   Untracked            |                |                |\n       |                |                |                |\n   Modified          Staged          Commited             |\n       |                |                |                |\n       +                +                +                +\n</code></pre> <p>Para consultar el estado de los archivos usamos el comando:</p> <pre><code>git status\n</code></pre> <p>Este comando es muy usado ya que es fundamental conocer el estado de los archivos de nuestro repositorio.</p> <p>Utilizando distintos comandos podemos pasar los archivos de una secci\u00f3n a otra y cambiar su estado. A continuaci\u00f3n veremos los comandos b\u00e1sicos que nos permitir\u00e1n una utilizaci\u00f3n b\u00e1sica de git usando como repositorio remoto GitHub.</p> <p>Para ir recordando los distintos comandos que vayamos aprendiendo es muy recomendable utilizar un \"cheatsheet\" o ir creando el nuestro propio. Aqu\u00ed ten\u00e9is uno que pod\u00e9is utilizar. Pod\u00e9is ir marcando con un subrayador los comandos que vais aprendiendo.</p>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#crear-un-proyecto","title":"Crear un proyecto","text":""},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#crear-un-programa-hola-mundo","title":"Crear un programa \"Hola Mundo\"","text":"<p>Creamos un directorio donde colocar el c\u00f3digo</p> <pre><code>$ mkdir curso-de-git\n$ cd curso-de-git\n</code></pre> <p>Creamos un fichero <code>hola.php</code> que muestre Hola Mundo.</p> <pre><code>&lt;?php\necho \"Hola Mundo\\n\";\n?&gt;\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#crear-el-repositorio","title":"Crear el repositorio","text":"<p>Para crear un nuevo repositorio se usa la orden <code>git init</code></p> <pre><code>$ git init\nInitialized empty Git repository in /home/admin/curso-de-git/.git/\n</code></pre> <p>Comprueba con un <code>ls -la</code> que hay un nuevo directorio oculto .git donde git guardar\u00e1 toda la informaci\u00f3n que necesite de forma transparente al usuario.</p> <p>Al inicializar nuestro proyecto, el archivo <code>hola.php</code> estar\u00e1 en el Workspace o Working Directory.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                | \n   hola.php             |                | \n       |                |                | \n       +                +                +\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#anadir-la-aplicacion","title":"A\u00f1adir la aplicaci\u00f3n","text":"<p>Vamos a almacenar el archivo que hemos creado en el repositorio para poder trabajar, despu\u00e9s explicaremos para qu\u00e9 sirve cada orden.</p> <pre><code>$ git add hola.php\n</code></pre> <p>Al ejecutar el git add, el archivo pasar\u00e1 a la \"Staging area\" o \u00e1rea de preparaci\u00f3n. Podemos ejecutar el siguiente comando tras cada orden para ir comprobando el estado del proyecto:</p> <pre><code>    $ git status\n</code></pre> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                | \n       |             hola.php            |\n       |                |                | \n       +                +                +\n</code></pre> <pre><code>$ git commit -m \"Creaci\u00f3n del proyecto\"\n[master (root-commit) e19f2c1] Creaci\u00f3n del proyecto\n 1 file changed, 3 insertions(+)\n create mode 100644 hola.php\n</code></pre> <p>El archivo pasar\u00e1 al \"Local Ropository\" y se le asignar\u00e1 un hash o c\u00f3digo de inserci\u00f3n.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Workspace  |  |   Staging   |  |    Local    | \n|             |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                | \n       |                |             hola.php (e19f2c1)\n       |                |                | \n       +                +                +\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#comprobar-el-estado-del-repositorio","title":"Comprobar el estado del repositorio","text":"<p>Con la orden <code>git status</code> podemos ver en qu\u00e9 estado se encuentran los archivos de nuestro repositorio.</p> <pre><code>$ git status\nOn branch master\nnothing to commit (working tree clean)\n</code></pre> <p>Si modificamos el archivo <code>hola.php</code>:</p> <pre><code>&lt;?php\n@print \"Hola {$argv[1]}\\n\";\n?&gt;\n</code></pre> <p>Y volvemos a comprobar el estado del repositorio:</p> <pre><code>    $ git status\n    On branch master\n    Changes not staged for commit:\n      (use \"git add &lt;file&gt;...\" to update what will be committed)\n      (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n\n       modified:   hola.php\n\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Nos indica que <code>hola.php</code> vuelve a estar en el working directory, porque lo hemos modificado. Y nos dice que podemos usar <code>git add hola.php</code> para volverlo a pasar a la \"Staging Area\" o bien <code>git restore hola.php</code> para descartar los cambios en el Working Directory y recuperar la version anterior en \"Local Repository\". En nuestro esquema veremos m\u00e1s arriba las versiones m\u00e1s recientes y m\u00e1s abajo las m\u00e1s antiguas, que es como nos lo mostrar\u00e1n los comandos git para ver hist\u00f3ricos. Es como una pila en la que la nueva versi\u00f3n queda sobre las anteriores.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n   hola.php             |                | \n       |                |             hola.php (e19f2c1)       \n       |                |                | \n       +                +                +\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#anadir-cambios","title":"A\u00f1adir cambios","text":"<p>Con la orden <code>git add</code> indicamos a git que prepare los cambios para que sean almacenados.</p> <pre><code>    $ git add hola.php\n    $ git status\n    On branch master\n    Changes to be committed:\n      (use \"git restore --staged &lt;file&gt;...\" to unstage)\n\n      modified:   hola.php\n</code></pre> <p>Hemos vuelto a pasar <code>hola.php</code> a la \"Staging area\"</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n       |             hola.php            |\n       |                |             hola.php (e19f2c1)         \n       |                |                | \n       +                +                +\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#confirmar-los-cambios","title":"Confirmar los cambios","text":"<p>Con la orden <code>git commit</code> confirmamos los cambios definitivamente, lo que hace que se guarden permanentemente en nuestro repositorio.</p> <pre><code>    $ git commit -m \"Parametrizaci\u00f3n del programa\"\n    [master efc252e] Parametrizaci\u00f3n del programa\n     1 file changed, 1 insertion(+), 1 deletion(-)\n    $ git status\n    On branch master\n    nothing to commit, working tree clean\n</code></pre> <p>El archivo pasar\u00e1 al \"Local Ropository\" con un nuevo hash.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1)          \n       |                |                | \n       +                +                +\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#diferencias-entre-workdir-y-staging","title":"Diferencias entre workdir y staging.","text":"<p>Modificamos nuestra aplicaci\u00f3n para que soporte un par\u00e1metro por defecto y a\u00f1adimos los cambios.</p> <pre><code>&lt;?php\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n?&gt;\n</code></pre> <p>Al modificarlo volvemos a tenerlo en \"Working Directory\"</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+  \n       |                |                |\n     hola.php           |                |  \n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1)          \n       |                |                | \n       +                +                +\n</code></pre> <p>Este vez a\u00f1adimos los cambios a la fase de staging pero sin confirmarlos (commit).</p> <pre><code>git add hola.php\n</code></pre> <p>Al hacer el add volvemos a tenerlo en \"Staging Area\"</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+  \n       |                |                |\n       |             hola.php            |\n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1) \n       |                |                | \n       +                +                +\n</code></pre> <p>Volvemos a modificar el programa para indicar con un comentario lo que hemos hecho.</p> <pre><code>&lt;?php\n// El nombre por defecto es Mundo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n?&gt;\n</code></pre> <p>Y vemos el estado en el que est\u00e1 el repositorio</p> <pre><code>    $ git status\n    On branch master\n    Changes to be committed:\n      (use \"git restore --staged &lt;file&gt;...\" to unstage)\n\n      modified:   hola.php\n\n    Changes not staged for commit:\n      (use \"git add &lt;file&gt;...\" to update what will be committed)\n      (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n\n      modified:   hola.php\n</code></pre> <p>Podemos ver como aparecen el archivo <code>hola.php</code> dos veces. El primero est\u00e1 preparado para ser confirmado y est\u00e1 almacenado en la \"Staging Area\" y es el que hicimos el add en primer lugar. El segundo indica que el archivo <code>hola.php</code> est\u00e1 modificado otra vez en la zona de trabajo \"Working Directory\". Como vemos en el gr\u00e1fico, el mismo archivo est\u00e1 en 2 zonas distintas en este momento, adem\u00e1s de las 2 versiones anteriores que hicimos commit.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |    \n     hola.php        hola.php            |\n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1)\n       |                |                | \n       +                +                +\n</code></pre> <p>Warning</p> <p>Si volvieramos a hacer un <code>git add hola.php</code> sobreescribir\u00edamos los cambios previos que hab\u00eda en la zona de staging.</p> <p>Almacenamos los cambios por separado:</p> <pre><code>    $ git commit -m \"Se a\u00f1ade un par\u00e1metro por defecto\"\n    [master 3283e0d] Se a\u00f1ade un par\u00e1metro por defecto\n     1 file changed, 2 insertions(+), 1 deletion(-)\n\n    $ git status\n    On branch master\n    Changes not staged for commit:\n      (use \"git add &lt;file&gt;...\" to update what will be committed)\n      (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n\n       modified:   hola.php\n\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Con el commit hemos pasado el hola.php que estaba en Staging Area al Local Repository quedando en el \"Working Directory\" el \u00faltimo que hab\u00edamos editado.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |           \n     hola.php           |                |\n       |                |             hola.php (3283e0d) \n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1)\n       |                |                | \n       +                +                +\n</code></pre> <p>Si ahora hacemos un git add:</p> <pre><code>    $ git add .\n    $ git status\n    On branch master\n    Changes to be committed:\n      (use \"git restore --staged &lt;file&gt;...\" to unstage)\n\n      modified:   hola.php\n</code></pre> <p>El archivo en Working Directory pasa a Staging Area.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n       |             hola.php            |\n       |                |             hola.php (3283e0d) \n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1)               \n       |                |                | \n       +                +                +\n</code></pre> <p>Y si ahora hacemos un commit.</p> <pre><code>    $ git commit -m \"Se a\u00f1ade un comentario al cambio del valor por defecto\"\n    [master fd4da94] Se a\u00f1ade un comentario al cambio del valor por defecto\n     1 file changed, 1 insertion(+)\n</code></pre> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |             \n       |                |             hola.php (fd4da94) \n       |                |             hola.php (3283e0d) \n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1) \n       |                |                | \n       +                +                +\n</code></pre> <p>Info</p> <p>El valor \".\" despues de <code>git add</code> indica que se a\u00f1adan todos los archivos de forma recursiva.</p> <p>Warning</p> <p>Cuidado cuando uses <code>git add .</code> aseg\u00farate de que no est\u00e1s a\u00f1adiendo archivos que no quieres a\u00f1adir.</p>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#ignorando-archivos","title":"Ignorando archivos","text":"<p>La orden <code>git add .</code> o <code>git add nombre_directorio</code> es muy c\u00f3moda, ya que nos permite a\u00f1adir todos los archivos del proyecto o todos los contenidos en un directorio y sus subdirectorios. Es mucho m\u00e1s r\u00e1pido que tener que ir a\u00f1adi\u00e9ndolos uno por uno. El problema es que, si no se tiene cuidado, se puede terminar por a\u00f1adir archivos innecesarios o con informaci\u00f3n sensible.</p> <p>Por lo general se debe evitar a\u00f1adir archivos que se hayan generado como producto de la compilaci\u00f3n del proyecto, los que generen los entornos de desarrollo (archivos de configuraci\u00f3n y temporales) y aquellos que contentan informaci\u00f3n sensible, como contrase\u00f1as o tokens de autenticaci\u00f3n. Por ejemplo, en un proyecto de <code>C/C++</code>, los archivos objeto no deben incluirse, solo los que contengan c\u00f3digo fuente y los make que los generen.</p> <p>Para indicarle a git que debe ignorar un archivo, se puede crear un fichero llamado .gitignore, bien en la ra\u00edz del proyecto o en los subdirectorios que queramos. Dicho fichero puede contener patrones, uno en cada l\u00ednea, que especiquen qu\u00e9 archivos deben ignorarse. El formato es el siguiente:</p> <pre><code># .gitignore\ndir1/           # ignora todo lo que contenga el directorio dir1\n!dir1/info.txt  # El operador ! excluye del ignore a dir1/info.txt (s\u00ed se guardar\u00eda)\ndir2/*.txt      # ignora todos los archivos txt que hay en el directorio dir2\ndir3/**/*.txt   # ignora todos los archivos txt que hay en el dir3 y sus subdirectorios\n*.o             # ignora todos los archivos con extensi\u00f3n .o en todos los directorios\n</code></pre> <p>Cada tipo de proyecto genera sus ficheros temporales, as\u00ed que para cada proyecto hay un <code>.gitignore</code> apropiado. Existen repositorios que ya tienen creadas plantillas. Pod\u00e9is encontrar uno en https://github.com/github/gitignore</p>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#ignorando-archivos-globalmente","title":"Ignorando archivos globalmente","text":"<p>Si bien, los archivos que hemos metido en <code>.gitignore</code>, deben ser aquellos ficheros temporales o de configuraci\u00f3n que se pueden crear durante las fases de compilaci\u00f3n o ejecuci\u00f3n del programa, en ocasiones habr\u00e1 otros ficheros que tampoco debemos introducir en el repositorio y que son recurrentes en todos los proyectos. En dicho caso, es m\u00e1s \u00fatil tener un gitignore que sea global a todos nuestros proyectos. Esta configuraci\u00f3n ser\u00eda complementaria a la que ya tenemos. Ejemplos de lo que se puede ignorar de forma global son los ficheros temporales del sistema operativo (<code>*~</code>, <code>.nfs*</code>) y los que generan los entornos de desarrollo.</p> <p>Para indicar a git que queremos tener un fichero de gitignore global, tenemos que configurarlo con la siguiente orden:</p> <pre><code>git config --global core.excludesfile $HOME/.gitignore_global\n</code></pre> <p>Ahora podemos crear un archivo llamado <code>.gitignore_global</code> en la ra\u00edz de nuestra cuenta con este contenido:</p> <pre><code># Compiled source #\n###################\n*.com\n*.class\n*.dll\n*.exe\n*.o\n*.so\n\n# Packages #\n############\n# it's better to unpack these files and commit the raw source\n# git has its own built in compression methods\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n\n# Logs and databases #\n######################\n*.log\n*.sql\n*.sqlite\n\n# OS generated files #\n######################\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n*~\n*.swp\n\n# IDEs               #\n######################\n.idea\n.settings/\n.classpath\n.project\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#trabajando-con-el-historial","title":"Trabajando con el historial","text":""},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#observando-los-cambios","title":"Observando los cambios","text":"<p>Con la orden <code>git log</code> podemos ver todos los cambios que hemos hecho. Antes de nada vuelve al directorio <code>curso-de-git</code> en el que est\u00e1bamos trabajando:</p> <pre><code>    $ git log\n    commit fd4da946326fbe8b24e89282ad25a71721bf40f6  (HEAD -&gt; master)\n    Author: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n    Date:   Sun Jun 16 12:51:01 2013 +0200\n\n        Se a\u00f1ade un comentario al cambio del valor por defecto\n\n    commit 3283e0d306c8d42d55ffcb64e456f10510df8177\n    Author: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n    Date:   Sun Jun 16 12:50:00 2013 +0200\n\n        Se a\u00f1ade un par\u00e1metro por defecto\n\n    commit efc252e11939351505a426a6e1aa5bb7dc1dd7c0\n    Author: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n    Date:   Sun Jun 16 12:13:26 2013 +0200\n\n        Parametrizaci\u00f3n del programa\n\n    commit e19f2c1701069d9d1159e9ee21acaa1bbc47d264\n    Author: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n    Date:   Sun Jun 16 11:55:23 2013 +0200\n\n        Creaci\u00f3n del proyecto\n</code></pre> <p>Para salir escribe <code>q</code>.</p> <p>Recuerda los distintos hash que se hab\u00edan generado cada vez que hac\u00edamos un commit. F\u00edjate que antes vimos solo los primeros caracteres hexadecimales del hash.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n       |                |             hola.php (fd4da94) \n       |                |             hola.php (3283e0d) \n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1) \n       |                |                | \n       +                +                +\n</code></pre> <p>Tambi\u00e9n es posible ver versiones abreviadas o limitadas, dependiendo de los par\u00e1metros:</p> <pre><code>    $ git log --oneline\n    fd4da94 (HEAD -&gt; master) Se a\u00f1ade un comentario al cambio del valor por defecto\n    3283e0d Se a\u00f1ade un par\u00e1metro por defecto\n    efc252e Parametrizaci\u00f3n del programa\n    e19f2c1 Creaci\u00f3n del proyecto\n</code></pre> <p>Prueba estas otras opciones y comprobar\u00e1s lo que hace cada una.</p> <pre><code>    git log --oneline --max-count=2\n    git log --oneline --since='5 minutes ago'\n    git log --oneline --until='5 minutes ago'\n    git log --oneline --author=sergio   # Cambia sergio por tu nombre de usuario\n    git log --oneline --all\n</code></pre> <p>Una versi\u00f3n muy \u00fatil de <code>git log</code> es la siguiente, pues nos permite ver en que lugares est\u00e1 master y HEAD, entre otras cosas:</p> <pre><code>    $ git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\n    * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (HEAD, master) [Sergio G\u00f3mez]\n    * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto [Sergio G\u00f3mez]\n    * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n    * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#crear-alias","title":"Crear alias","text":"<p>Como estas \u00f3rdenes son demasiado largas, Git nos permite crear alias para crear nuevas \u00f3rdenes parametrizadas. Para ello podemos configurar nuestro entorno con la orden <code>git config</code> de la siguiente manera:</p> <pre><code>git config --global alias.hist \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\"\n</code></pre> <p>Ahora basta con ejecutar:</p> <pre><code>git hist\n</code></pre> <p>Example</p> <p>Puedes configurar incluso alias para abreviar comandos. Algunos ejemplos de alias \u00fatiles:</p> <pre><code>git config --global alias.br branch\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.st \"status -u\"\ngit config --global alias.cane \"commit --amend --no-edit\"\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#recuperando-versiones-anteriores","title":"Recuperando versiones anteriores","text":"<p>Cada cambio es etiquetado por un hash, para poder regresar a ese momento del estado del proyecto se usa la orden <code>git checkout</code>. Prueba con el hash de tu primer commit.</p> <pre><code>    $ git checkout e19f2c1\n    Note: switching to 'e19f2c1'.\n\n    You are in 'detached HEAD' state. You can look around, make experimental\n    changes and commit them, and you can discard any commits you make in this\n    state without impacting any branches by switching back to a branch.\n\n    If you want to create a new branch to retain commits you create, you may\n    do so (now or later) by using -c with the switch command. Example:\n\n    git switch -c &lt;new-branch-name&gt;\n\n    Or undo this operation with:\n\n    git switch -\n\n    urn off this advice by setting config variable advice.detachedHead to false\n\n    HEAD is now at e19f2c1 Parametrizaci\u00f3n del programa     \n</code></pre> <p>Hemos vuelto a aqu\u00ed:</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n       |                |             hola.php (e19f2c1)          \n       |                |                | \n       +                +                +\n</code></pre> <p>El aviso que nos sale nos indica que estamos en un estado donde no trabajamos en ninguna rama concreta. Eso significa que los cambios que hagamos podr\u00edan \"perderse\" porque si no son guardados en una nueva rama, en principio no podr\u00edamos volver a recuperarlos. Hay que pensar que Git es como un \u00e1rbol donde un nodo tiene informaci\u00f3n de su nodo padre, no de sus nodos hijos, con lo que siempre necesitar\u00edamos informaci\u00f3n de d\u00f3nde se encuentran los nodos finales o de otra manera no podr\u00edamos acceder a ellos. Vamos a comprobarlo.</p> <p>Edita <code>hola.php</code> y a\u00f1ade un comentario. Haz un commit y comentalo como \"Prueba en detached HEAD\". Despu\u00e9s haz un log para comprobar la rama.</p> <p>Antes de continuar desharemos con </p> <pre><code>$ git switch -\n</code></pre> <p>Comprueba que todos los cambios que hiciste en el \"detached HEAD\" se han perdido.</p>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#volver-a-la-ultima-version-de-la-rama-master","title":"Volver a la \u00faltima versi\u00f3n de la rama master.","text":"<p>Ya hemos tratado el concepto de HEAD, pero no lo hemos definido formalmente. HEAD hace referencia al puntero que se\u00f1ala a la referencia actual de la rama activa o commit en el que est\u00e1s trabajando. En otras palabras, es un indicador que te dice en qu\u00e9 commit est\u00e1s situado en ese momento.</p> <p>Vamos a ver otra forma de llevar nuevamente el HEAD a nuestro primer commit, como hicimos en el punto anterior. \u00bfRecuerdas c\u00f3mo lo hicimos?</p> <p>A continuaci\u00f3n usamos <code>git checkout</code> indicando el nombre de la rama:</p> <pre><code>$ git checkout master\nPrevious HEAD position was e19f2c1... Creaci\u00f3n del proyecto\n</code></pre> <p>Comprueba en qu\u00e9 posici\u00f3n est\u00e1s con alguno de los comandos que aprendiste anteriormente.</p>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#etiquetando-versiones","title":"Etiquetando versiones","text":"<p>Para poder recuperar versiones concretas en la historia del repositorio, podemos etiquetarlas, lo cual es m\u00e1s facil que usar un hash. Para eso usaremos la orden <code>git tag</code>.</p> <pre><code>$ git tag v1\n</code></pre> <p>Ahora vamos a etiquetar la versi\u00f3n inmediatamente anterior como v1-beta. Para ello podemos usar los modificadores <code>^</code> o <code>~</code> que nos llevar\u00e1n a un ancestro determinado. Las siguientes dos \u00f3rdenes son equivalentes:</p> <pre><code>$ git checkout v1^\n$ git checkout v1~1\n</code></pre> <p>Asignamos ahora el tag v1-beta a la versi\u00f3n anterior.</p> <pre><code>$ git tag v1-beta\n</code></pre> <p>Vuelve al estado final con </p> <pre><code>$ git switch -\n</code></pre> <p>Si ejecutamos la orden sin par\u00e1metros nos mostrar\u00e1 todas las etiquetas existentes.</p> <pre><code>$ git tag\nv1\nv1-beta\n</code></pre> <p>Y para verlas en el historial:</p> <pre><code>$ git hist master --all\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1, master) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (HEAD, tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>En nuestro esquema:</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n       |                |             hola.php (fd4da94) tag: v1 \n       |                |             hola.php (3283e0d) tag: v1-beta  \n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1) \n       |                |                | \n       +                +                +\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#borrar-etiquetas","title":"Borrar etiquetas","text":"<p>Para borrar etiquetas:</p> <pre><code>git tag -d nombre_etiqueta\n</code></pre> <p>De momento no borres las que hemos creado.</p>"},{"location":"Ud1%20Control%20de%20versiones/T05_usobasico/#visualizar-cambios","title":"Visualizar cambios","text":"<p>Para ver los cambios que se han realizado en el c\u00f3digo usamos la orden <code>git diff</code>. La orden sin especificar nada m\u00e1s, mostrar\u00e1 los cambios que no han sido a\u00f1adidos a\u00fan, es decir, todos los cambios que se han hecho antes de usar la orden <code>git add</code>. Despu\u00e9s se puede indicar un par\u00e1metro y dar\u00e1 los cambios entre la versi\u00f3n indicada y el estado actual. O para comparar dos versiones entre s\u00ed, se indica la m\u00e1s antigua y la m\u00e1s nueva. Ejemplo:</p> <pre><code>    $ git diff v1-beta v1\n    diff --git a/hola.php b/hola.php\n    index a31e01f..25a35c0 100644\n    --- a/hola.php\n    +++ b/hola.php\n    @@ -1,3 +1,4 @@\n     &lt;?php\n    +// El nombre por defecto es Mundo\n     $nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n     @print \"Hola, {$nombre}\\n\";\n     ?&gt;\n</code></pre> <p>La salida del comando git diff v1-beta v1 muestra las diferencias entre dos puntos en la historia del repositorio de Git, espec\u00edficamente entre las versiones \"v1-beta\" y \"v1\". Aqu\u00ed est\u00e1 el desglose de la salida:</p> <ul> <li> <p>diff --git a/hola.php b/hola.php: Esto indica que se est\u00e1 comparando el archivo hola.php entre las dos versiones. La letra \"a/\" indica la versi\u00f3n original (en este caso, la versi\u00f3n de \"v1-beta\"), y la letra \"b/\" indica la versi\u00f3n modificada (en este caso, la versi\u00f3n de \"v1\").</p> </li> <li> <p>index a31e01f..25a35c0 100644: Los valores del \u00edndice (hash) para las dos versiones que est\u00e1n siendo comparadas. En este caso, el commit original (v1-beta) tiene el hash a31e01f y el commit modificado (v1) tiene el hash 25a35c0. El n\u00famero 100644 es el modo de archivo.</p> </li> <li> <p>--- a/hola.php: Indica que el archivo original (hola.php en la versi\u00f3n de \"v1-beta\") tiene el contenido que sigue.</p> </li> <li> <p>+++ b/hola.php: Indica que el archivo modificado (hola.php en la versi\u00f3n de \"v1\") tiene el contenido que sigue.</p> </li> <li> <p>@@ -1,3 +1,4 @@: Muestra la secci\u00f3n modificada del archivo. En este caso, indica que desde la l\u00ednea 1 hasta la l\u00ednea 3 en la versi\u00f3n original y desde la l\u00ednea 1 hasta la l\u00ednea 4 en la versi\u00f3n modificada hay diferencias.</p> </li> <li> <p>&lt;?php: Este es el contenido original de la l\u00ednea 1.</p> </li> <li> <p>+// El nombre por defecto es Mundo: Esta l\u00ednea fue agregada en la versi\u00f3n modificada.</p> </li> <li> <p>$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";: Esta l\u00ednea est\u00e1 presente tanto en la versi\u00f3n original como en la versi\u00f3n modificada, por lo que no hay cambios aqu\u00ed.</p> </li> <li> <p>@print \"Hola, {$nombre}\\n\";: Esta l\u00ednea est\u00e1 presente tanto en la versi\u00f3n original como en la versi\u00f3n modificada.</p> </li> </ul> <p>En resumen, la salida indica que se ha agregado un comentario en la l\u00ednea 2 de la versi\u00f3n \"v1\", y la diferencia en el contenido de la l\u00ednea 3 se debe a la adici\u00f3n del comentario en la versi\u00f3n \"v1\".</p> <p>No borres lo que hemos hecho hasta aqu\u00ed. Seguiremos con este ejemplo en el siguiente apartado.</p>"},{"location":"Ud1%20Control%20de%20versiones/T06_usoavanzado/","title":"Uso avanzado de Git","text":""},{"location":"Ud1%20Control%20de%20versiones/T06_usoavanzado/#deshacer-cambios","title":"Deshacer cambios","text":""},{"location":"Ud1%20Control%20de%20versiones/T06_usoavanzado/#deshaciendo-cambios-antes-de-la-fase-de-staging","title":"Deshaciendo cambios antes de la fase de staging.","text":"<p>Volvemos a la rama m\u00e1ster y vamos a modificar el comentario que pusimos:</p> <pre><code>$ git checkout master\nPrevious HEAD position was 3283e0d... Se a\u00f1ade un par\u00e1metro por defecto\nSwitched to branch 'master'\n</code></pre> <p>Recordamos, la situaci\u00f3n es la siguiente:</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n       |                |             hola.php (fd4da94) tag: v1 \n       |                |             hola.php (3283e0d) tag: v1-beta  \n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1) \n       |                |                | \n       +                +                +\n</code></pre> <p>Modificamos hola.php de la siguiente manera:</p> <pre><code>&lt;?php\n// Este comentario est\u00e1 mal y hay que borrarlo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n?&gt;\n</code></pre> <p>Y comprobamos:</p> <pre><code>    $ git status\n    On branch master\n    Changes not staged for commit:\n      (use \"git add &lt;file&gt;...\" to update what will be committed)\n      (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n\n       modified:   hola.php\n\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Tenemos hola.php en Working Directory y nada en Staging Area.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n    hola.php            |                |\n       |                |             hola.php (fd4da94) tag: v1 \n       |                |             hola.php (3283e0d) tag: v1-beta  \n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1) \n       |                |                | \n       +                +                +\n</code></pre> <p>El mismo Git nos indica que debemos hacer para a\u00f1adir los cambios o para deshacerlos. En este caso los desharemos:</p> <pre><code>    $ git restore hola.php\n\n    $ git status\n    On branch master\n    nothing to commit, working tree clean\n\n    $ cat hola.php\n    &lt;?php\n    // El nombre por defecto es Mundo\n    $nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n    @print \"Hola, {$nombre}\\n\";\n    ?&gt;\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T06_usoavanzado/#deshaciendo-cambios-antes-del-commit","title":"Deshaciendo cambios antes del commit","text":"<p>Vamos a hacer lo mismo que la vez anterior, pero esta vez s\u00ed a\u00f1adiremos el cambio al staging (sin hacer commit). As\u00ed que volvemos a modificar hola.php igual que la anterior ocasi\u00f3n:</p> <pre><code>&lt;?php\n// Este comentario est\u00e1 mal y hay que borrarlo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n?&gt;\n</code></pre> <p>Y lo a\u00f1adimos al staging</p> <pre><code>    $ git add hola.php\n\n    $ git status\n    On branch master\n    Changes to be committed:\n      (use \"git restore --staged &lt;file&gt;...\" to unstage)\n\n       modified:   hola.php\n</code></pre> <p>Ahora tenemos una nueva versi\u00f3n de hola.php en Staging Area.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n       |             hola.php            |\n       |                |             hola.php (fd4da94) tag: v1 \n       |                |             hola.php (3283e0d) tag: v1-beta  \n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1) \n       |                |                | \n       +                +                +\n</code></pre> <p>De nuevo, Git nos indica qu\u00e9 debemos hacer para deshacer el cambio. Primero lo sacamos del Staging Area.</p> <pre><code>    $ git restore --staged hola.php\n\n    $ git status\n    On branch master\n    Changes not staged for commit:\n      (use \"git add &lt;file&gt;...\" to update what will be committed)\n      (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n\n       modified:   hola.php\n\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Vuelve a estar en Working Directory.</p> <pre><code>+-------------+  +-------------+  +-------------+  \n|  Working    |  |   Staging   |  |    Local    | \n|  Directory  |  |     Area    |  |  Repository | \n+------+------+  +------+------+  +------+------+ \n       |                |                |\n    hola.php            |                |\n       |                |             hola.php (fd4da94) tag: v1 \n       |                |             hola.php (3283e0d) tag: v1-beta  \n       |                |             hola.php (efc252e)\n       |                |             hola.php (e19f2c1) \n       |                |                | \n       +                +                +\n</code></pre> <p>Y ahora restaruramos la \u00faltima versi\u00f3n en Local Repository, eliminando la versi\u00f3n en Working Directory.</p> <pre><code>$ git restore hola.php\n</code></pre> <p>Y ya tenemos nuestro repositorio limpio otra vez. Como vemos hay que hacerlo en dos pasos: uno para pasar el fichero de Staging Area a Working Directory y limpiar as\u00ed la Staging Area; y otro para descartar los cambios en Working Directory.</p>"},{"location":"Ud1%20Control%20de%20versiones/T06_usoavanzado/#deshaciendo-commits-no-deseados","title":"Deshaciendo commits no deseados.","text":"<p>Si a pesar de todo hemos hecho un commit y nos hemos equivocado, podemos deshacerlo con la orden <code>git revert</code>. Modificamos otra vez el archivo como antes:</p> <pre><code>&lt;?php\n// Este comentario est\u00e1 mal y hay que borrarlo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n?&gt;\n</code></pre> <p>Pero ahora s\u00ed hacemos commit:</p> <pre><code>    $ git add hola.php\n\n    $ git commit -m \"Ups... este commit est\u00e1 mal.\"\n    master 5a5d067] Ups... este commit est\u00e1 mal\n     1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre> <p>Bien, una vez confirmado el cambio, vamos a deshacer el cambio con la orden <code>git revert</code>:</p> <pre><code>    $ git revert HEAD --no-edit\n    [master 817407b] Revert \"Ups... este commit est\u00e1 mal\"\n    1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre> <p>Explicaci\u00f3n del comando:</p> <ul> <li>git revert HEAD: Reviertes el \u00faltimo commit (el que apunta HEAD). Esto crea un nuevo commit que deshace los cambios realizados en ese commit.</li> <li>--no-edit: Este par\u00e1metro le indica a Git que use el mensaje de commit por defecto que genera autom\u00e1ticamente (algo como \"Revert 'mensaje original del commit'\") y no abra el editor para modificarlo.</li> </ul> <pre><code>    $ git hist\n    * 817407b 2013-06-16 | Revert \"Ups... este commit est\u00e1 mal\" (HEAD -&gt; master) [Sergio G\u00f3mez]\n    * 5a5d067 2013-06-16 | Ups... este commit est\u00e1 mal [Sergio G\u00f3mez]\n    * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n    * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n    * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n    * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T06_usoavanzado/#borrar-commits-de-una-rama","title":"Borrar commits de una rama","text":"<p>El anterior apartado revierte un commit, pero deja huella en el historial de cambios. Para hacer que no aparezca hay que usar la orden <code>git reset</code>.</p> <pre><code>    $ git reset --hard v1\n    HEAD is now at fd4da94 Se a\u00f1ade un comentario al cambio del valor por defecto\n\n    $ git hist\n    * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (HEAD -&gt; master, tag: v1) [Sergio G\u00f3me\n    * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n    * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n    * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>El resto de cambios no se han borrado (a\u00fan), simplemente no est\u00e1n accesibles porque git no sabe como referenciarlos. Si sabemos su hash podemos acceder a\u00fan a ellos. Pasado un tiempo, eventualmente Git tiene un recolector de basura que los borrar\u00e1. Se puede evitar etiquetando el estado final.</p> <p>Danger</p> <p>La orden reset es una operaci\u00f3n delicada. Debe evitarse si no se sabe bien lo que se est\u00e1 haciendo, sobre todo cuando se trabaja en repositorios compartidos, porque podr\u00edamos alterar la historia de cambios lo cual puede provocar problemas de sincronizaci\u00f3n.</p>"},{"location":"Ud1%20Control%20de%20versiones/T06_usoavanzado/#modificar-un-commit","title":"Modificar un commit","text":"<p>Esto se usa cuando hemos olvidado a\u00f1adir un cambio a un commit que acabamos de realizar. Tenemos nuestro archivo hola.php de la siguiente manera:</p> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez\n// El nombre por defecto es Mundo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n?&gt;\n</code></pre> <p>Y lo confirmamos:</p> <pre><code>$ git commit -a -m \"A\u00f1adido el autor del programa\"\n[master cf405c1] A\u00f1adido el autor del programa\n 1 file changed, 1 insertion(+)\n</code></pre> <p>Tip</p> <p>El par\u00e1metro <code>-a</code> hace un <code>git add</code> antes de hacer commit de todos los archivos modificados  o borrados (de los nuevos no), con lo que nos ahorramos un paso.</p> <p>Ahora nos percatamos que se nos ha olvidado poner el correo electr\u00f3nico. As\u00ed que volvemos a modificar nuestro archivo:</p> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n// El nombre por defecto es Mundo\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\n@print \"Hola, {$nombre}\\n\";\n?&gt;\n</code></pre> <p>Y en esta ocasi\u00f3n usamos <code>commit --amend</code> que nos permite modificar el \u00faltimo estado confirmado, sustituy\u00e9ndolo por el estado actual:</p> <pre><code>    $ git add hola.php\n\n    $ git commit --amend -m \"A\u00f1adido el autor del programa y su email\"\n    [master 96a39df] A\u00f1adido el autor del programa y su email\n     1 file changed, 1 insertion(+)\n\n    $ git hist\n    * 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email (HEAD -&gt; master) [Sergio G\u00f3mez]\n    * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n    * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n    * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n    * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Danger</p> <p>Nunca modifiques un commit que ya hayas sincronizado con otro repositorio o que hayas recibido de \u00e9l. Estar\u00edas alterando la historia de cambios y provocar\u00edas problemas de sincronizaci\u00f3n.</p>"},{"location":"Ud1%20Control%20de%20versiones/T06_usoavanzado/#moviendo-y-borrando-archivos","title":"Moviendo y borrando archivos","text":""},{"location":"Ud1%20Control%20de%20versiones/T06_usoavanzado/#mover-un-archivo-a-otro-directorio-con-git","title":"Mover un archivo a otro directorio con git","text":"<p>Para mover archivos usaremos la orden <code>git mv</code>:</p> <pre><code>    $ mkdir lib\n\n    $ git mv hola.php lib\n\n    $ git status\n    On branch master\n    Changes to be committed:\n      (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n      renamed:    hola.php -&gt; lib/hola.php\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T06_usoavanzado/#mover-y-borrar-archivos","title":"Mover y borrar archivos.","text":"<p>Pod\u00edamos haber hecho el paso anterior con la \u00f3rden del sistema mv y el resultado hubiera sido el mismo. Lo siguiente es a modo de ejemplo y no es necesario que lo ejecutes:</p> <pre><code>    $ mkdir lib\n    $ mv hola.php lib\n    $ git add lib/hola.php\n    $ git rm hola.php\n</code></pre> <p>Y, ahora s\u00ed, ya podemos guardar los cambios:</p> <pre><code>    $ git commit -m \"Movido hola.php a lib.\"\n    [master 8c2a509] Movido hola.php a lib.\n     1 file changed, 0 insertions(+), 0 deletions(-)\n     rename hola.php =&gt; lib/hola.php (100%)\n</code></pre> <p>Info</p> <p>Hasta aqu\u00ed hemos aprendido los aspectos b\u00e1sicos de git trabajando en entorno local. Hemos instalado git, configurado sus par\u00e1metros globales, creado un proyecto y aprendido los 3 estados en los que puede estar un archivo. Tambi\u00e9n hemos aprendido los comandos para incorporar cambios a la zona \"staged\" y a \"working directory\". En las pr\u00f3ximas secciones aprenderemos a trabajar con ramas y a utilizar un repositorio compartido en GitHub</p>"},{"location":"Ud1%20Control%20de%20versiones/T07_ramas/","title":"Ramas","text":""},{"location":"Ud1%20Control%20de%20versiones/T07_ramas/#administracion-de-ramas","title":"Administraci\u00f3n de ramas","text":""},{"location":"Ud1%20Control%20de%20versiones/T07_ramas/#crear-una-nueva-rama","title":"Crear una nueva rama","text":"<p>Cuando vamos a trabajar en una nueva funcionalidad, es conveniente hacerlo en una nueva rama, para no modificar la rama principal y dejarla inestable. Aunque la orden para manejar ramas es <code>git branch</code> podemos usar tambi\u00e9n <code>git checkout</code>.</p> <p>Vamos a crear una nueva rama:</p> <pre><code>git branch hola\n</code></pre> <p>Info</p> <p>Si usamos <code>git branch</code> sin ning\u00fan argumento, nos devolver\u00e1 la lista de ramas disponibles.</p> <p>La orden anterior no devuelve ning\u00fan resultado y tampoco nos cambia de rama, para eso debemos usar checkout:</p> <pre><code>$ git checkout hola\nSwitched to branch 'hola'\n</code></pre> <p>Tip</p> <p>Hay una forma m\u00e1s rapida de hacer ambas acciones en un solo paso. Con el par\u00e1metro <code>-b</code> de <code>git checkout</code> podemos cambiarnos a una rama que, si no existe, se crea instant\u00e1neamente.</p> <pre><code>$ git checkout -b hola\nSwitched to a new branch 'hola'\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T07_ramas/#modificaciones-en-la-rama-secundaria","title":"Modificaciones en la rama secundaria","text":"<p>A\u00f1adimos un nuevo archivo en el directorio <code>lib</code> llamado <code>HolaMundo.php</code>:</p> <pre><code>&lt;?php\n\nclass HolaMundo\n{\n   private $nombre;\n\n   function __construct($nombre)\n   {\n      $this-&gt;nombre = $nombre;\n   }\n\n   function __toString()\n   {\n      return sprintf (\"Hola, %s.\\n\", $this-&gt;nombre);\n   }\n}\n?&gt;\n</code></pre> <p>Y modificamos <code>hola.php</code>:</p> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n// El nombre por defecto es Mundo\nrequire('HolaMundo.php');\n\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\nprint new HolaMundo($nombre);\n?&gt;\n</code></pre> <p>Podr\u00edamos confirmar los cambios todos de golpe, pero lo haremos de uno en uno, con su comentario.</p> <pre><code>$ git add lib/HolaMundo.php\n\n$ git commit -m \"A\u00f1adida la clase HolaMundo\"\n[hola 6932156] A\u00f1adida la clase HolaMundo\n 1 file changed, 17 insertions(+)\n create mode 100644 lib/HolaMundo.php\n\n$ git add lib/hola.php\n\n$ git commit -m \"hola usa la clase HolaMundo\"\n[hola 9862f33] hola usa la clase HolaMundo\n 1 file changed, 3 insertions(+), 1 deletion(-)\n</code></pre> <p>Y ahora con la orden <code>git checkout</code> podemos movernos entre ramas:</p> <pre><code>$ git checkout master\nSwitched to branch 'master'\n\n$ git checkout hola\nSwitched to branch 'hola'\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T07_ramas/#modificaciones-en-la-rama-master","title":"Modificaciones en la rama master","text":"<p>Podemos volver y a\u00f1adir un nuevo archivo a la rama principal:</p> <pre><code>$ git checkout master\nSwitched to branch 'master'\n</code></pre> <p>Creamos un archivo llamado <code>README.md</code> en la ra\u00edz de nuestro proyecto con el siguiente contenido:</p> <pre><code># Curso de GIT\n\nEste proyecto contiene el curso de introducci\u00f3n a GIT\n</code></pre> <p>Y lo a\u00f1adimos a nuestro repositorio en la rama en la que estamos:</p> <pre><code>$ git add README.md\n\n$ git commit -m \"A\u00f1adido README.md\"\n[master c3e65d0] A\u00f1adido README.md\n 1 file changed, 3 insertions(+)\n create mode 100644 README.md\n</code></pre> <p>Vamos a usar nuestro comando <code>git hist</code> con el modificador --all que nos mostrar\u00e1 los cambios en todas las ramas.</p> <pre><code>$ git hist --all\n* c3e65d0 2013-06-16 | A\u00f1adido README.md (HEAD -&gt; master) [Sergio G\u00f3mez]\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Y vemos como <code>git hist --all</code> muestra la bifurcaci\u00f3n en nuestro c\u00f3digo.</p>"},{"location":"Ud1%20Control%20de%20versiones/T07_ramas/#fusion-de-ramas-y-resolucion-de-conflictos","title":"Fusi\u00f3n de ramas y resoluci\u00f3n de conflictos","text":""},{"location":"Ud1%20Control%20de%20versiones/T07_ramas/#mezclar-ramas","title":"Mezclar ramas","text":"<p>Podemos incorporar los cambios de una rama a otra con la orden <code>git merge</code>. Primero nos posicionamos en la rama en la que queremos incorporar los cambios. En nuestro caso \"hola\".</p> <pre><code>$ git checkout hola\nSwitched to branch 'hola'\n</code></pre> <p>Y en esta rama ejecutamos el <code>git merge nombrerama</code> con el nombre de la rama cuyos cambios queremos incorporar a la actual.</p> <pre><code>$ git merge master\nMerge made by the 'ort' strategy.\n README.md | 3 +++\n 1 file changed, 3 insertions(+)\n create mode 100644 README.md\n\n$ git hist --all\n*   9c6ac06 2013-06-16 | Merge branch 'master' into hola (HEAD -&gt; hola) [Sergio G\u00f3mez]\n|\\\n| * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* | 9862f33 2013-06-16 | hola usa la clase HolaMundo [Sergio G\u00f3mez]\n* | 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>De esa forma se puede trabajar en una rama secundaria incorporando los cambios de la rama principal o de otra rama.</p>"},{"location":"Ud1%20Control%20de%20versiones/T07_ramas/#resolver-conflictos","title":"Resolver conflictos","text":"<p>Un conflicto es cuando se produce una fusi\u00f3n que Git no es capaz de resolver. Vamos a modificar la rama master para crear uno con la rama hola.</p> <pre><code>$ git checkout master\nSwitched to branch 'master'\n</code></pre> <p>Modificamos nuestro archivo hola.php de nuevo:</p> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\nprint \"Introduce tu nombre:\";\n$nombre = trim(fgets(STDIN));\n@print \"Hola, {$nombre}\\n\";\n?&gt;\n</code></pre> <p>Y guardamos los cambios:</p> <pre><code>$ git add lib/hola.php\n\n$ git commit -m \"Programa interactivo\"\n[master 9c85275] Programa interactivo\n 1 file changed, 2 insertions(+), 2 deletions(-)\n\n$ git hist --all\n</code></pre> <p>Comprueba el resultado</p> <pre><code>$ git hist --all\n* 8ca56f7 2013-06-16 | Programa interactivo (HEAD -&gt; master) [Sergio G\u00f3mez]\n| *   9c6ac06 2013-06-16 | Merge branch 'master' into hola (hola) [Sergio G\u00f3mez]\n| |\\  \n| |/  \n|/| \n* | c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Volvemos a la rama hola y fusionamos. Recuerda que hemos modificado hola.php en la rama <code>master</code> y ahora hay l\u00edneas distintas dentro de ese fichero en cada una de las ramas.</p> <pre><code>$ git checkout hola\nSwitched to branch 'hola'\n\n$ git merge master\nAuto-merging lib/hola.php\nCONFLICT (content): Merge conflict in lib/hola.php\nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre> <p>Si editamos nuestro archivo <code>lib/hola.php</code> obtendremos algo similar a esto:</p> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n// El nombre por defecto es Mundo\nrequire('HolaMundo.php');\n\n$nombre = isset($argv[1]) ? $argv[1] : \"Mundo\";\nprint new HolaMundo($nombre);\n=======\nprint \"Introduce tu nombre:\";\n$nombre = trim(fgets(STDIN));\n@print \"Hola, {$nombre}\\n\";\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; master\n?&gt;\n</code></pre> <p>La primera parte marca el c\u00f3digo que estaba en la rama donde trabaj\u00e1bamos (HEAD), que era la rama <code>hola</code> y la parte final el c\u00f3digo desde donde fusion\u00e1bamos, que era <code>master</code>. Resolvemos el conflicto, dejando el archivo como sigue:</p> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\nrequire('HolaMundo.php');\n\nprint \"Introduce tu nombre:\";\n$nombre = trim(fgets(STDIN));\nprint new HolaMundo($nombre);\n?&gt;\n</code></pre> <p>Y resolvemos el conflicto confirmando los cambios:</p> <pre><code>$ git add lib/hola.php\n$ git commit -m \"Solucionado el conflicto al fusionar con la rama master\"\n[hola a36af04] Solucionado el conflicto al fusionar con la rama master\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T07_ramas/#rebasing-vs-merging","title":"Rebasing vs Merging","text":"<p>Rebasing es otra t\u00e9cnica para fusionar distinta a merge y usa la orden <code>git rebase</code>. Vamos a dejar nuestro proyecto como estaba antes del fusionado. Para ello necesitamos anotar el hash anterior al de la acci\u00f3n de merge. El que tiene la anotaci\u00f3n \"hola usa la clase HolaMundo\".</p> <p>Para ello podemos usar la orden <code>git reset</code> que nos permite mover HEAD donde queramos.</p> <pre><code>$ git checkout hola\nSwitched to branch 'hola'\n$ git hist\n*   a36af04 2013-06-16 | Solucionado el conflicto al fusionar con la rama master (HEAD -&gt; hola) [Sergio G\u00f3mez]\n|\\\n| * 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* | 9c6ac06 2013-06-16 | Merge branch 'master' into hola [Sergio G\u00f3mez]\n|\\|\n| * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* | 9862f33 2013-06-16 | hola usa la clase HolaMundo [Sergio G\u00f3mez]\n* | 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n$ git reset --hard 9862f33\nHEAD is now at 9862f33 hola usa la clase HolaMundo\n</code></pre> <p>Y nuestro estado ser\u00e1:</p> <pre><code>$ git hist --all\n* 9862f33 2013-06-16 | hola usa la clase HolaMundo (HEAD, hola) [Sergio G\u00f3mez]\n* 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n| * 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n| * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n|/\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Hemos desecho todos los merge y nuestro \u00e1rbol est\u00e1 \"limpio\". Vamos a probar ahora a hacer un rebase. Continuamos en la rama <code>hola</code> y ejecutamos lo siguiente:</p> <pre><code>$ git rebase master\nAuto-merging lib/hola.php\nCONFLICT (content): Merge conflict in lib/hola.php\nerror: could not apply 9862f33... hola usa la clase HolaMundo\nhint: Resolve all conflicts manually, mark them as resolved with\nhint: \"git add/rm &lt;conflicted_files&gt;\", then run \"git rebase --continue\".\nhint: You can instead skip this commit: run \"git rebase --skip\".\nhint: To abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\nCould not apply 9862f33... hola usa la clase HolaMundo\n</code></pre> <p>El conflicto, por supuesto, se sigue dando. Resolvemos guardando el archivo <code>hola.php</code> como en los casos anteriores:</p> <pre><code>&lt;?php\n// Autor: Sergio G\u00f3mez &lt;sergio@uco.es&gt;\nrequire('HolaMundo.php');\n\nprint \"Introduce tu nombre:\";\n$nombre = trim(fgets(STDIN));\nprint new HolaMundo($nombre);\n?&gt;\n</code></pre> <p>A\u00f1adimos los cambios en staging y en esta ocasi\u00f3n, y tal como nos indicaba en el mensaje anterior, no tenemos que hacer <code>git commit</code> sino continuar con el rebase:</p> <pre><code>$ git add lib/hola.php\n$ git status\ninteractive rebase in progress; onto 269eaca\nLast commands done (2 commands done):\n    pick 4e0f425 A\u00f1adida clase HolaMundo\n    pick 9862f33 hola usa la clase HolaMundo\nNo commands remaining.\nYou are currently rebasing branch 'hola' on '8ca56f7'.\n    (all conflicts fixed: run \"git rebase --continue\")\n\nChanges to be committed:\n    (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   lib/hola.php\n\n\n$ git rebase --continue\n[detached HEAD 9862f33] hola usa la clase HolaMundo\n1 file changed, 3 insertions(+), 1 deletion(-)\nSuccessfully rebased and updated refs/heads/hola.\n</code></pre> <p>Y ahora vemos que nuestro \u00e1rbol tiene un aspecto distinto, mucho m\u00e1s limpio:</p> <pre><code>$ git hist --all\n* 9862f33 2013-06-16 | hola usa la clase HolaMundo (HEAD -&gt; hola) [Sergio G\u00f3mez]\n* 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Lo que hace rebase es volver a aplicar todos los cambios a la rama m\u00e1ster, desde su nodo m\u00e1s reciente. Eso significa que se modifica el orden o la historia de creaci\u00f3n de los cambios. Por eso rebase no debe usarse si el orden es importante o si la rama es compartida.</p>"},{"location":"Ud1%20Control%20de%20versiones/T07_ramas/#mezclando-con-la-rama-master","title":"Mezclando con la rama master","text":"<p>Ya hemos terminado de implementar los cambios en nuestra rama secundaria y es hora de llevar los cambios a la rama principal. Usamos <code>git merge</code> para hacer una fusi\u00f3n normal:</p> <pre><code>$ git checkout master\nSwitched to branch 'master'\n$ git merge hola\nUpdating c3e65d0..491f1d2\nFast-forward\n lib/HolaMundo.php | 16 ++++++++++++++++\n lib/hola.php      |  4 +++-\n 2 files changed, 19 insertions(+), 1 deletion(-)\n create mode 100644 lib/HolaMundo.php\n $ git hist --all\n * 9862f33 2013-06-16 | hola usa la clase HolaMundo (HEAD -&gt; master, hola) [Sergio G\u00f3mez]\n * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n * 9c85275 2013-06-16 | Programa interactivo [Sergio G\u00f3mez]\n * c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n * 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n * 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n * fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n * 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n * efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n * e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Vemos que indica que el tipo de fusi\u00f3n es fast-forward. Este tipo de fusi\u00f3n tiene el problema que no deja rastro de la fusi\u00f3n, por eso suele ser recomendable usar el par\u00e1metro <code>--no-ff</code> para que quede constancia siempre de que se ha fusionado una rama con otra.</p> <p>Vamos a volver a probar ahora sin hacer fast-forward. Reseteamos master al estado \"Programa interactivo\".</p> <pre><code>$ git reset --hard 9c85275\n$ git hist\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Vemos que estamos como en el final de la secci\u00f3n anterior, as\u00ed que ahora mezclamos:</p> <pre><code>$ git merge -m \"Aplicando los cambios de la rama hola\" --no-ff hola\nMerge made by the 'recursive' strategy.\n lib/HolaMundo.php | 16 ++++++++++++++++\n lib/hola.php      |  4 +++-\n 2 files changed, 19 insertions(+), 1 deletion(-)\n create mode 100644 lib/HolaMundo.php\n$ git hist --all\n*   2eab8ca 2013-06-16 | Aplicando los cambios de la rama hola (HEAD -&gt; master) [Sergio Gomez]\n*\\\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>En la siguiente imagen se puede ver la diferencia:</p> <p></p>"},{"location":"Ud1%20Control%20de%20versiones/T08_github/","title":"Github","text":"<p>Github es lo que se denomina una forja, un repositorio de proyectos que usan Git como sistema de control de versiones. Es la forja m\u00e1s popular, ya que alberga m\u00e1s de 10 millones de repositorios. Debe su popularidad a sus funcionalidades sociales, principalmente dos: </p> <ul> <li>la posibilidad de hacer forks de otros proyectos y </li> <li>la posibilidad de cooperar aportando c\u00f3digo para arreglar errores o mejorar el c\u00f3digo. </li> </ul> <p>Si bien, no es que fuera una novedad, s\u00ed lo es lo f\u00e1cil que resulta hacerlo. A ra\u00edz de este proyecto han surgido otros como Gitorius o Gitlab, pero Github sigue siendo el m\u00e1s popular y el que tiene mejores y mayores caracter\u00edsticas. Algunas de estas son:</p> <ul> <li>Un wiki para documentar el proyecto, que usa MarkDown como lenguaje de marca.</li> <li>Un portal web para cada proyecto.</li> <li>Funcionalidades de redes sociales como followers.</li> <li>Gr\u00e1ficos estad\u00edsticos.</li> <li>Revisi\u00f3n de c\u00f3digo y comentarios.</li> <li>Sistemas de seguimiento de incidencias.</li> </ul> <p>Lo primero es entrar en el portal (https://github.com/) para crearnos una cuenta si no la tenemos a\u00fan.</p>"},{"location":"Ud1%20Control%20de%20versiones/T08_github/#tu-clave-publicaprivada","title":"Tu clave p\u00fablica/privada","text":"<p>Muchos servidores Git utilizan la autentificaci\u00f3n a trav\u00e9s de claves p\u00fablicas SSH. Y, para ello, cada usuario del sistema ha de generarse una, si es que no la tiene ya. El proceso para hacerlo es similar en casi cualquier sistema operativo. Ante todo, asegurarte que no tengas ya una clave. (comprueba que el directorio <code>$HOME/usuario/.ssh</code> no tiene un archivo id_dsa.pub o id_rsa.pub).</p> <p>Para crear una nueva clave usamos la siguiente orden:</p> <pre><code>$ ssh-keygen -t rsa -C \"Cuenta GitHub\"\n</code></pre> <p>Warning</p> <p>Tu clave RSA te identifica contra los repositorios remotos, aseg\u00farate de no compartir la clave privada con nadie. Por defecto la clave se crea como solo lectura.</p>"},{"location":"Ud1%20Control%20de%20versiones/T08_github/#configuracion","title":"Configuraci\u00f3n","text":"<p>Vamos a aprovechar para a\u00f1adir la clave RSA que generamos antes, para poder acceder desde git a los repositorios. Para ellos nos vamos al men\u00fa de configuraci\u00f3n de usuario (Settings)</p> <p></p> <p>Nos vamos al men\u00fa 'SSH and GPG Keys' y a\u00f1adimos una nueva clave. En Title indicamos una descripci\u00f3n que nos ayude a saber de d\u00f3nde procede la clave y en key volcamos el contenido del archivo <code>~/.ssh/id_rsa.pub</code>. Y guardamos la clave.</p> <p></p> <p>Con esto ya tendriamos todo nuestro entorno para poder empezar a trabajar desde nuestro equipo.</p>"},{"location":"Ud1%20Control%20de%20versiones/T08_github/#clientes-graficos-para-github","title":"Clientes gr\u00e1ficos para GitHub","text":"<p>Adem\u00e1s, para Github existe un cliente propio tanto para Windows como para MacOSX:</p> <ul> <li> <p>Cliente Windows: http://windows.github.com/</p> </li> <li> <p>Cliente MacOSX: http://mac.github.com/</p> </li> </ul> <p>Para Linux no hay cliente propio, pero s\u00ed hay plugin para la mayor\u00eda de editores de texto como atom, netbeans, eclipe o los editores de jetbrains.</p> <p>De todas maneras, estos clientes solo tienen el fin de facilitar el uso de Github, pero no son necesarios para usarlo. Es perfectamente v\u00e1lido usar el cliente de consola de Git o cualquier otro cliente gen\u00e9rico para Git. Uno de los m\u00e1s usados actualmente es GitKraken.</p>"},{"location":"Ud1%20Control%20de%20versiones/T08_github/#crear-un-repositorio","title":"Crear un repositorio","text":"<p>Vamos a crear un repositorio donde guardar nuestro proyecto. Para ello pulsamos el signo <code>+</code> que hay en la barra superior y seleccionamos <code>New repository</code>.</p> <p>Ahora tenemos que designar un nombre para nuestro repositorio, por ejemplo: 'taller-de-git'.</p> <p></p> <p>Nada m\u00e1s crear el repositorio nos saldr\u00e1 una pantalla con instrucciones precisas de como proceder a continuaci\u00f3n.</p> <p>B\u00e1sicamente podemos partir de 3 situaciones:</p> <ol> <li>Quick setup - olvidamos por ahora</li> <li>Todav\u00eda no hemos creado ning\u00fan repositorio en nuestro equipo. (\u2026or create a new repository on the command line)</li> <li>Ya tenemos un repositorio creado y queremos sincronizarlo con Github. (\u2026or push an existing repository from the command line)</li> </ol> <p>Warning</p> <p>Veremos una pantalla similar a esta. Los comandos pueden variar ligeramente si existe una nueva versi\u00f3n de git. F\u00edjate en los comandos que a ti te aparecen.</p> <p>En el momento de revisar estas notas la \u00faltima de las opciones que se ve en la captura ya no aparece en GitHub</p> <p></p> <p>Nuestra situaci\u00f3n es la tercera, ya tenemos un repositorio creado y vamos a sincronizarlo con github as\u00ed que seguiremos las instrucciones de la apartado \"\u2026or push an existing repository from the command line\" desde la consola de nuestro equipo y dentro del directorio <code>curso-de-git</code> que venimos utilizando en estas notas.</p> <pre><code>$ git remote add origin git@github.com:sgomez/taller-de-git.git\n$ git branch -M main\n$ git push -u origin main\nCounting objects: 33, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (24/24), done.\nWriting objects: 100% (33/33), 3.35 KiB | 1.12 MiB/s, done.\nTotal 33 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), done.\nTo github.com:sgomez/taller-de-git.git\n * [new branch]      main -&gt; main\nrama 'main' configurada para rastrear 'origin/main'.\n</code></pre> <p>Atenci\u00f3n</p> <p>En la versi\u00f3n de git utilizada al realizar estos apuntes a la rama principal le llama \"master\". En la versi\u00f3n actual le denomina \"main\". Cambiar\u00e9 los comandos y salidas para evitar errores, aunque podr\u00edan diferir ligeramente de lo que obtengas.</p> <p>Si recargamos la p\u00e1gina veremos que ya aparece nuestro proyecto.</p> <p></p>"},{"location":"Ud1%20Control%20de%20versiones/T08_github/#clonar-un-repositorio","title":"Clonar un repositorio","text":"<p>Una vez que ya tengamos sincronizado el repositorio contra Github, eventualmente vamos a querer descargarlo en otro de nuestros ordenadores para poder trabajar en \u00e9l. Esta acci\u00f3n se denomina clonar y para ello usaremos la orden <code>git clone</code>.</p> <p>En la p\u00e1gina principal de nuestro proyecto podemos ver un bot\u00f3n que indica <code>Clone or download</code>. Si la pulsamos nos da, de nuevo, la opci\u00f3n de elegir entre clonar con ssh o https. Recordad que si est\u00e1is en otro equipo y quer\u00e9is seguir utilizando ssh deber\u00e9is generar otra para de claves privada/p\u00fablica como hicimos en la secci\u00f3n de Tu clave p\u00fablica/privada y instalarla en nuestro perfil de Github, como vimos anteriormente.</p> <p>Para clonar nuestro repositorio y poder trabajar con \u00e9l todo lo que debemos hacer es lo siguiente:</p> <pre><code>$ git clone git@github.com:sgomez/taller-de-git.git\n$ cd taller-de-git\n</code></pre>"},{"location":"Ud1%20Control%20de%20versiones/T08_github/#ramas-remotas","title":"Ramas remotas","text":"<p>Si ahora vemos el estado de nuestro proyecto veremos algo similar a esto:</p> <pre><code>$ git hist --all\n* 2eab8ca 2013-06-16 | Aplicando los cambios de la rama hola (HEAD -&gt; main, origin/main) [Sergio Gomez]\n*\\\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Aparece que hay una nueva rama llamada <code>origin/main</code>. Esta rama indica el estado de sincronizaci\u00f3n de nuestro repositorio con un repositorio remoto llamado origin/main   . En este caso el de Github.</p> <p>Info</p> <p>Por norma se llama autom\u00e1ticamente origin al primer repositorio con el que sincronizamos nuestro repositorio.</p> <p>Podemos ver la configuraci\u00f3n de este repositorio remoto con la orden <code>git remote</code>:</p> <pre><code>$ git remote show origin\n* remote origin\n  Fetch URL: git@github.com:sgomez/taller-de-git.git\n  Push  URL: git@github.com:sgomez/taller-de-git.git\n  HEAD branch: main\n  Remote branch:\n    main tracked\n  Local ref configured for 'git push':\n    main pushes to main (up to date)\n</code></pre> <p>De la respuesta tenemos que fijarnos en las l\u00edneas que indican fetch y push puesto que son las acciones de sincronizaci\u00f3n de nuestro repositorio con el remoto. Mientras que fetch se encarga de traer los cambios desde el repositorio remoto al nuestro, push los env\u00eda.</p>"},{"location":"Ud1%20Control%20de%20versiones/T08_github/#enviando-actualizaciones","title":"Enviando actualizaciones","text":"<p>Vamos a a\u00f1adir una licencia a nuestra aplicaci\u00f3n. Creamos un fichero LICENSE con el siguiente contenido:</p> <pre><code>MIT License\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre> <p>Y a\u00f1adidos y confirmamos los cambios:</p> <pre><code>$ git add LICENSE\n$ git commit -m \"A\u00f1adida licencia\"\n[master 3f5cb1c] A\u00f1adida licencia\n 1 file changed, 21 insertions(+)\n create mode 100644 LICENSE\n$ git hist --all\n* 3f5cb1c 2013-06-16 | A\u00f1adida licencia (HEAD -&gt; main) [Sergio G\u00f3mez]\n*   2eab8ca 2013-06-16 | Aplicando los cambios de la rama hola (origin/main) [Sergio Gomez]\n*\\\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Viendo la historia podemos ver como nuestro master no est\u00e1 en el mismo punto que <code>origin/main</code>. Si vamos a la web de Github veremos que <code>LICENSE</code> no aparece a\u00fan. As\u00ed que vamos a enviar los cambios con la primera de las acciones que vimos <code>git push</code>:</p> <pre><code>$ git push\nCounting objects: 3, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 941 bytes | 0 bytes/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@github.com:sgomez/taller-de-git.git\n   2eab8ca..3f5cb1c  main -&gt; main\n</code></pre> <p>Info</p> <p>La orden <code>git push</code> necesita dos par\u00e1metros para funcionar: el repositorio y la rama destino. As\u00ed que realmente lo que ten\u00edamos que haber escrito es:</p> <pre><code>$ git push origin main\n</code></pre> <p>Para ahorrar tiempo escribiendo git nos deja vincular nuestra rama local con una rama remota, de tal manera que no tengamos que estar siempre indic\u00e1ndolo. Eso es posible con el par\u00e1metro <code>--set-upstream</code> o <code>-u</code> en forma abreviada.</p> <pre><code>$ git push -u origin main\n</code></pre> <p>Si repasas las \u00f3rdenes que te indic\u00f3 Github que ejecutaras ver\u00e1s que el par\u00e1metro <code>-u</code> estaba presente y por eso no ha sido necesario indicar ning\u00fan par\u00e1metro al hacer push.</p>"},{"location":"Ud1%20Control%20de%20versiones/T08_github/#recibiendo-actualizaciones","title":"Recibiendo actualizaciones","text":"<p>Si trabajamos con m\u00e1s personas, o trabajamos desde dos ordenadores distintos, nos encontraremos con que nuestro repositorio local es m\u00e1s antiguo que el remoto. Necesitamos descargar los cambios para poder incorporarlos a nuestro directorio de trabajo.</p> <p>Para la prueba, Github nos permite editar archivos directamente desde la web. Pulsamos sobre el archivo <code>README.md</code>. En la vista del archivo, veremos que aparece el icono de un l\u00e1piz. Esto nos permite editar el archivo.</p> <p></p> <p>Info</p> <p>Los archivos con extensi\u00f3n <code>.md</code> est\u00e1n en un formato denominado MarkDown. Se trata de un lenguaje de marca que nos permite escribir texto enriquecido de manera muy sencilla.</p> <p>Dispones de un tutorial aqu\u00ed: https://www.markdowntutorial.com/</p> <p>Modificamos el archivo como queramos, por ejemplo, a\u00f1adiendo nuestro nombre:</p> <pre><code># Curso de GIT\n\nEste proyecto contiene el curso de introducci\u00f3n a GIT\n\nDesarrollado por Sergio G\u00f3mez.\n</code></pre> <p></p> <p>El cambio quedar\u00e1 incorporado al repositorio de Github, pero no al nuestro. Necesitamos traer la informaci\u00f3n desde el servidor remoto. La orden asociada es <code>git fetch</code>:</p> <pre><code>$ git fetch\n$ git hist --all\n* cbaf831 2013-06-16 | Actualizado README.md (origin/main) [Sergio G\u00f3mez]\n* 3f5cb1c 2013-06-16 | A\u00f1adida licencia (HEAD -&gt; main) [Sergio G\u00f3mez]\n*   2eab8ca 2013-06-16 | Aplicando los cambios de la rama hola [Sergio Gomez]\n*\\\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Ahora vemos el caso contrario, tenemos que <code>origin/master</code> est\u00e1 por delante que <code>HEAD</code> y que la rama <code>main</code> local.</p> <p>Atenci\u00f3n</p> <p><code>git fetch</code> trae la informaci\u00f3n de los cambios realizados en GitHub, pero no importa directamente los cambios en local</p> <p>Ahora necesitamos incorporar los cambios de la rama remota en la local. La forma de hacerlo lo vimos en el cap\u00edtulo de ramas usando <code>git merge</code> o <code>git rebase</code>.</p> <p>Habitualmente se usa <code>git merge</code>:</p> <pre><code>$ git merge origin/main\nUpdating 3f5cb1c..cbaf831\nFast-forward\n README.md | 2 ++\n 1 file changed, 2 insertions(+)\n$ git hist --all\n* cbaf831 2013-06-16 | Actualizado README.md (HEAD -&gt; main, origin/main) [Sergio G\u00f3mez]\n* 3f5cb1c 2013-06-16 | A\u00f1adida licencia [Sergio G\u00f3mez]\n* 2eab8ca 2013-06-16 | Aplicando los cambios de la rama hola [Sergio Gomez]\n*\\\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Como las operaciones de traer cambios (<code>git fetch</code>) y de mezclar ramas (<code>git merge</code> o <code>git rebase</code>) est\u00e1n muy asociadas, git nos ofrece una posibilidad para ahorrar pasos que es la orden <code>git pull</code> que realiza las dos acciones simult\u00e1neamente.</p> <p>Para probar, vamos a editar de nuevo el archivo README.md en GitHub y a\u00f1adimos algo m\u00e1s:</p> <pre><code># Curso de GIT\n\nEste proyecto contiene el curso de introducci\u00f3n a GIT del Aula de Software Libre.\n\nDesarrollado por Sergio G\u00f3mez.\n</code></pre> <p>Como mensaje del commit: 'Indicado que se realiza en el ASL'.</p> <p>Y ahora probamos a actualizar con <code>git pull</code>:</p> <pre><code>$ git pull\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (3/3), 811 bytes | 811.00 KiB/s, done.\nFrom github.com:sgomez/taller-de-git\n   cbaf831..d8922e4  main     -&gt; origin/main\nUpdating 6e4cda3..bb3dc3e\nFast-forward\n README.md | 2 +-\n 1 file changed, 1 insertion(+), 1 deletion(-)\n$ git hist --all\n* d8922e4 2013-06-16 | Update README.md (HEAD -&gt; main, origin/main) [Sergio G\u00f3mez]\n* cbaf831 2013-06-16 | Update README.md [Sergio G\u00f3mez]\n* 3f5cb1c 2013-06-16 | A\u00f1adida licencia [Sergio G\u00f3mez]\n* 2eab8ca 2013-06-16 | Aplicando los cambios de la rama hola [Sergio Gomez]\n*\\\n| * 9862f33 2013-06-16 | hola usa la clase HolaMundo (hola) [Sergio G\u00f3mez]\n| * 6932156 2013-06-16 | A\u00f1adida la clase HolaMundo [Sergio G\u00f3mez]\n|/\n* 9c85275 2013-06-16 | Programa interactivo (master) [Sergio G\u00f3mez]\n* c3e65d0 2013-06-16 | A\u00f1adido README.md [Sergio G\u00f3mez]\n* 81c6e93 2013-06-16 | Movido hola.php a lib [Sergio G\u00f3mez]\n* 96a39df 2013-06-16 | A\u00f1adido el autor del programa y su email [Sergio G\u00f3mez]\n* fd4da94 2013-06-16 | Se a\u00f1ade un comentario al cambio del valor por defecto (tag: v1) [Sergio G\u00f3mez]\n* 3283e0d 2013-06-16 | Se a\u00f1ade un par\u00e1metro por defecto (tag: v1-beta) [Sergio G\u00f3mez]\n* efc252e 2013-06-16 | Parametrizaci\u00f3n del programa [Sergio G\u00f3mez]\n* e19f2c1 2013-06-16 | Creaci\u00f3n del proyecto [Sergio G\u00f3mez]\n</code></pre> <p>Vemos que los cambios se han incorporado y que las ramas remota y local de master est\u00e1n sincronizadas.</p>"},{"location":"Ud1%20Control%20de%20versiones/T08_github/#problemas-de-sincronizacion","title":"Problemas de sincronizaci\u00f3n","text":""},{"location":"Ud1%20Control%20de%20versiones/T08_github/#no-puedo-hacer-push","title":"No puedo hacer push","text":"<p>Al intentar subir cambios nos podemos encontrar un mensaje como este:</p> <pre><code>$ git push\ngit push\nTo git@github.com:sgomez/taller-de-git.git\n ! [rejected]        main -&gt; main (fetch first)\nerror: failed to push some refs to 'git@github.com:sgomez/taller-de-git.git'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n</code></pre> <p>La causa es que el repositorio remoto tambi\u00e9n se ha actualizado y nosotros a\u00fan no hemos recibido esos cambios. Es decir, ambos repositorios se han actualizado y el remoto tiene preferencia. Hay un conflicto en ciernes y se debe resolver localmente antes de continuar.</p> <p>Vamos a provocar una situaci\u00f3n donde podamos ver esto en acci\u00f3n. Vamos a modificar el archivo <code>README.md</code> tanto en local como en remoto a trav\u00e9s del interfaz web.</p> <p>En el web vamos a cambiar el t\u00edtulo para que aparezca de la siguiente manera.</p> <pre><code>Curso de GIT, 2020\n</code></pre> <p>En local vamos a cambiar el t\u00edtulo para que aparezca de la siguiente manera.</p> <pre><code>Curso de GIT, febrero\n</code></pre> <p>Question</p> <p>Haz el commit para guardar el cambio en local.</p> Respuesta al ejercicio anterior <p>A\u00f1adimos el fichero actualizado:</p> <pre><code>$ git commit -am \"A\u00f1adido el mes al README\"\n[master 1e8c0b7] A\u00f1adido el mes al README\n1 file changed, 1 insertion(+), 1 deletion(-)\n</code></pre> <p>La forma de proceder en este caso es hacer un <code>git fetch</code> y un <code>git rebase</code>. Si hay conflictos deber\u00e1n resolverse. Cuando est\u00e9 todo solucionado ya podremos hacer <code>git push</code>.</p> <p>Info</p> <p>Por defecto <code>git pull</code> lo que hace es un <code>git merge</code>, si queremos hacer <code>git rebase</code> deberemos especificarlos con el par\u00e1metro <code>-r</code>:</p> <pre><code>$ git pull --rebase\n</code></pre> <p>Vamos a hacer el pull con rebase y ver qu\u00e9 sucede.</p> <pre><code>$ git pull --rebase\nFirst, rewinding head to replay your work on top of it...\nApplying: A\u00f1adido el mes al README\nUsing index info to reconstruct a base tree...\nM   README.md\nFalling back to patching base and 3-way merge...\nAuto-merging README.md\nCONFLICT (content): Merge conflict in README.md\nerror: Failed to merge in the changes.\nPatch failed at 0001 A\u00f1adido el mes al README\nhint: Use 'git am --show-current-patch' to see the failed patch\n\nResolve all conflicts manually, mark them as resolved with\n\"git add/rm &lt;conflicted_files&gt;\", then run \"git rebase --continue\".\nYou can instead skip this commit: run \"git rebase --skip\".\nTo abort and get back to the state before \"git rebase\", run \"git rebase --abort\".\n</code></pre> <p>Evidentemente hay un conflicto porque hemos tocado el mismo archivo. Se deja como ejercicio resolverlo.</p> Respuesta al ejercicio anterior <p>El contenido del fichero final podr\u00eda ser:</p> <pre><code>Curso de GIT, febrero, 2020\n</code></pre> <p>A continuaci\u00f3n confirmamos los cambios y los enviamos al servidor</p> <pre><code>$ git add README.md\n$ git rebase --continue\n$ git push\n</code></pre> <p>Warning</p> <p>\u00bfPor qu\u00e9 hemos hecho rebase en master si a lo largo del curso hemos dicho que no se debe cambiar la linea principal?</p> <p>B\u00e1sicamente hemos dicho que lo que no debemos hacer es modificar la l\u00ednea temporal compartida. En este caso nuestros cambios en master solo estaban en nuestro repositorio, porque al fallar el env\u00edo nadie m\u00e1s ha visto nuestras actualizaciones. Al hacer rebase estamos deshaciendo nuestros cambios, bajarnos la \u00faltima actualizaci\u00f3n compartida de master y volvi\u00e9ndolos a aplicar. Con lo que realmente la historia compartida no se ha modificado.</p> <p>Este es un problema que debemos evitar en la medida de lo posible. La menor cantidad de gente posible debe tener acceso de escritura en master y las actualizaciones de dicha rama deben hacerse a trav\u00e9s de ramas secundarias y haciendo merge en master como hemos visto en el cap\u00edtulo de ramas.</p>"},{"location":"Ud1%20Control%20de%20versiones/T08_github/#no-puedo-hacer-pull","title":"No puedo hacer pull","text":"<p>Al intentar descargar cambios nos podemos encontrar un mensaje como este:</p> <pre><code>$ git pull\nerror: Cannot pull with rebase: You have unstaged changes.\n</code></pre> <p>O como este:</p> <pre><code>$ git pull\nerror: Cannot pull with rebase: Your index contains uncommitted changes.\n</code></pre> <p>B\u00e1sicamente lo que ocurre es que tenemos cambios sin confirmar en nuestro espacio de trabajo. Una opci\u00f3n es confirmar (commit) y entonces proceder como el caso anterior.</p> <p>Pero puede ocurrir que a\u00fan estemos trabajando todav\u00eda y no nos interese confirmar los cambios, solo queremos sincronizar y seguir trabajando. Para casos como estos git ofrece una pila para guardar cambios temporalmente. Esta pila se llama stash y nos permite restaurar el espacio de trabajo al \u00faltimo commit.</p> <p>De nuevo vamos a modificar nuestro proyecto para ver esta situaci\u00f3n en acci\u00f3n.</p> <p>Example</p> <p>En remoto borra el a\u00f1o de la fecha y en local borra el mes. Pero esta vez no hagas commit en local. El archivo solo debe quedar modificado.</p> <p>La forma de proceder es la siguiente:</p> <pre><code>$ git stash save # Guardamos los cambios en la pila\n$ git pull # Sincronizamos con el repositorio remoto, -r para hacer rebase puede ser requerido\n$ git stash pop # Sacamos los cambios de la pila\n</code></pre> <p>Info</p> <p>Como ocurre habitualmente, git nos proporciona una forma de hacer todos estos pasos de una sola vez. Para ello tenemos que ejecutar lo siguiente:</p> <pre><code>$ git pull --autostash\n</code></pre> <p>En general no es mala idea ejecutar lo siguiente si somos conscientes, adem\u00e1s, de que tenemos varios cambios sin sincronizar:</p> <pre><code>$ git pull --autostash --rebase\n</code></pre> <p>Podr\u00eda darse el caso de que al sacar los cambios de la pila hubiera alg\u00fan conflicto. En ese caso actuamos como con el caso de merge o rebase.</p> <p>De nuevo este tipo de problemas no deben suceder si nos acostumbramos a trabajar en ramas.</p>"},{"location":"Ud1%20Control%20de%20versiones/T08_github/#practicar","title":"Practicar","text":"<p>Llegados a este punto es buen momento para empezar a practicar solos. Realiza las siguientes pr\u00e1cticas antes de continuar con los contenidos del tema:</p> <ul> <li>P1.1 Introducci\u00f3n a git y GitHub</li> <li>P1.2 Git Trabajando con ramas y uniones</li> <li>P1.3 Ejercicios Git y GitHub</li> <li>P1.4 Ejercicios Git y GitHub II</li> <li>P1.5 Git avanzado - Aprendiendo branching</li> </ul>"},{"location":"Ud1%20Control%20de%20versiones/T09_github-flow/","title":"Flujo de trabajo en GitHub","text":""},{"location":"Ud1%20Control%20de%20versiones/T09_github-flow/#paso-0-abrir-una-incidencia-issue","title":"Paso 0. Abrir una incidencia (issue)","text":"<p>Habitualmente el trabajo puede partir a ra\u00edz de una reporte por parte de un miembro del equipo o de una persona externa. Para eso tenemos la secci\u00f3n Issues.</p> <p></p> <p>Una issue cuando se crea se compone de un t\u00edtulo y una descripci\u00f3n en Markdown. Si la persona es miembro del equipo, opcionalmente puede asignarle una serie de metadatos: etiquetas (labels), hitos (milestone), proyecto al que pertenece o responsables encargados de cerrar la incidencia.</p> <p></p> <p>Una vez creado, al mismo se le asignar\u00e1 un n\u00famero.</p> <p>Example</p> <p>Vamos a crear una incidencia llamada \"Crear archivo de autores\", donde indiquemos que vamos a crear un archivo <code>AUTHORS.md</code> con la lista de desarrolladores del proyecto.</p> <p></p>"},{"location":"Ud1%20Control%20de%20versiones/T09_github-flow/#paso-1-crear-una-rama","title":"Paso 1. Crear una rama","text":"<p>Crearemos una rama cada vez que queramos implementar una nueva caracter\u00edstica al proyecto que estamos realizando. La misma puede estar provocada por una incidencia o no.</p> <p>Tip</p> <p>Es una buena costumbre crear en Issues el listado de casos de uso, requisitos, historias de usuario o tareas (como lo queramos llamar), para tener un registro del trabajo que llevamos y el que nos queda.</p> <p>El nombre de la rama puede ser el que creamos conveniente, pero hay que intentar ser coherente y usar siempre el mismo m\u00e9todo, sobre todo si trabajamos en equipo.</p> <p>Un m\u00e9todo puede ser el siguiente (\u00a1No lo hagas, es solo un ejemplo!):</p> <pre><code>$ # tipo-n\u00famero/descripci\u00f3n\n$ git checkout -b feature-1/create-changelog\n$ git checkout -b hotfix-2/updated-database\n</code></pre> <p>En entornos de trabajo multiusuario se puede usar el siguiente (\u00a1No lo hagas, es solo un ejemplo!):</p> <pre><code>$ # usuario/tipo-n\u00famero/descripci\u00f3n\n$ git checkout -b sgomez/feature-1/create-changelog\n$ git checkout -b sgomez/hotfix-2/updated-database\n</code></pre> <p>De esa manera, podemos seguir f\u00e1cilmente qui\u00e9n abri\u00f3 la rama, en qu\u00e9 consiste y a qu\u00e9 issues est\u00e1 conectada. Pero como decimos es m\u00e1s un convenio que una imposici\u00f3n, pudi\u00e9ndole poner el nombre que queramos.</p> <p>Vamos a crear la rama y los commits correspondientes y subir la rama con push al servidor.</p> <pre><code>$ git checkout -b sgomez/feature-1/create-changelog\n</code></pre> <p>Ahora creamos el fichero AUTHORS.md</p> <pre><code>$ git add AUTHORS.md\n$ git commit -m \"A\u00f1adido fichero de autores\"\n</code></pre> <p>El archivo puede contener, por ejemplo, lo siguiente:</p> <pre><code># AUTHORS\n\n* Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n</code></pre> <p>Hacemos push y obtenemos algo como esto:</p> <pre><code>$ git push\nfatal: The current branch sgomez/feature-1/create-changelog has no upstream branch.\nTo push the current branch and set the remote as upstream, use\n\n    git push --set-upstream origin sgomez/feature-1/create-changelog\n</code></pre> <p>Como la rama es nueva, git no sabe d\u00f3nde debe hacer push. Le indicamos que debe hacerla en origin y adem\u00e1s que guarde la vinculaci\u00f3n (equivalente al par\u00e1metro -u que vimos en el cap\u00edtulo anterior). Probamos de nuevo:</p> <pre><code>$ git push -u origin sgomez/feature-1/create-changelog\nEnumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 1.03 KiB | 1.03 MiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nremote:\nremote: Create a pull request for 'sgomez/feature-1/create-changelog' on GitHub by visiting:\nremote:      https://github.com/sgomez/taller-de-git/pull/new/sgomez/feature-1/create-changelog\nremote:\nTo github.com:sgomez/taller-de-git.git\n* [new branch]      sgomez/feature-1/create-changelog -&gt; sgomez/feature-1/create-changelog\nBranch 'sgomez/feature-1/create-changelog' set up to track remote branch 'sgomez/feature-1/create-changelog' from 'origin'.\n</code></pre> <p>Ahora la rama ya se ha subido y nos informa, adem\u00e1s, de que podemos crear un Pull Request (PR). Si vamos al enlace que nos aparece veremos lo siguiente:</p> <p></p> <p>Informaci\u00f3n</p> <p>Un pull request (tambi\u00e9n conocido como \"PR\" en la jerga de desarrollo) es una funci\u00f3n que facilita la colaboraci\u00f3n en proyectos de Git, especialmente en plataformas como GitHub, GitLab o Bitbucket. Un pull request es una solicitud que un desarrollador hace para que los cambios que ha realizado en una rama de su repositorio se fusionen con otra rama, generalmente con la rama principal (como master o main).</p> <p>Aqu\u00ed podemos informar de en qu\u00e9 consiste la rama que estamos enviando. Si ya tenemos una issue abierta, no es necesario repetir la misma informaci\u00f3n. Podemos hacer referencia con el siguiente texto en el contenido (no en el t\u00edtulo):</p> <pre><code>Closes #1\n</code></pre> <p>Esto lo que le indica a GitHub que esta PR cierra el issues n\u00famero 1. Cuando se haga el merge de la rama, autom\u00e1ticamente se cerrar\u00e1 la incidencia.</p> <p>Lo hacemos y le damos a crear.</p> <p></p> <p>Ahora podr\u00edamos hacer ya el merge con nuestra rama master, pero vamos a esperar un poco y la haremos m\u00e1s adelante.</p>"},{"location":"Ud1%20Control%20de%20versiones/T09_github-flow/#paso-2-crear-commits","title":"Paso 2. Crear commits","text":"<p>A partir de ahora podemos seguir creando commits en local y enviarlos hasta que terminemos de trabajar.</p> <p>Editamos el archivo AUTHORS.md .</p> <pre><code># AUTHORS\n\n* Sergio G\u00f3mez &lt;sergio@uco.es&gt;\n* John Doe\n</code></pre> <p>Y mandamos otro commit</p> <pre><code>$ git commit -am \"Actualizado AUTHORS.md\"\n$ git push\n</code></pre> <p>Si volvemos a la p\u00e1gina de PR, veremos que aparece el nuevo commit que acabamos de enviar.</p>"},{"location":"Ud1%20Control%20de%20versiones/T09_github-flow/#paso-3-discutir","title":"Paso 3. Discutir","text":"<p>GitHub permite que entre los desarrolladores se pueda abrir una discusi\u00f3n sobre el c\u00f3digo, de tal manera que el trabajo de crear la rama sea colaborativo. Se puede incluso pedir revisiones por parte de terceros y que esas revisiones sean obligatorias antes de aceptar los cambios.</p>"},{"location":"Ud1%20Control%20de%20versiones/T09_github-flow/#paso-4-desplegar","title":"Paso 4. Desplegar","text":"<p>Una vez que hemos terminado de crear la funci\u00f3n de la rama ya podemos incorporar los cambios a master. Este trabajo ya no es necesario hacerlo en local y GitHub nos proporciona 3 maneras de hacerlo:</p> <p></p>"},{"location":"Ud1%20Control%20de%20versiones/T09_github-flow/#crear-un-merge-commit","title":"Crear un merge commit","text":"<p>Esta opci\u00f3n es el equivalente a hacer lo siguiente en nuestro repositorio:</p> <pre><code>$ git checkout main\n$ git merge --no-ff sgomez/feature-1/create-changelog\n$ git push\n</code></pre> <p>Es decir, el equivalente a hacer un merge entre nuestra rama y master.</p> <p>Info</p> <p>GitHub siempre desactiva el fast forward.</p>"},{"location":"Ud1%20Control%20de%20versiones/T09_github-flow/#crear-un-rebase-y-merge","title":"Crear un rebase y merge","text":"<p>Esta opci\u00f3n es el equivalente a hacer lo siguiente en nuestro repositorio</p> <pre><code>$ git rebase main\n$ git checkout main\n$ git merge --no-ff sgomez/feature-1/create-changelog\n$ git push\n</code></pre> <p>Es decir, nos aseguramos de que nuestra rama est\u00e1 al final de main haciendo rebase, como vimos en el cap\u00edtulo de ramas, y posteriormente se hace el merge.</p>"},{"location":"Ud1%20Control%20de%20versiones/T09_github-flow/#crear-un-squash-commit-y-un-merge","title":"Crear un squash commit y un merge","text":"<p>Esta opci\u00f3n es el equivalente a hacer lo siguiente en nuestro repositorio:</p> <pre><code>$ git checkout main\n$ git merge --squash sgomez/feature-1/create-changelog\n$ git push\n</code></pre> <p>Esta opci\u00f3n es algo especial. En vez de aplicar cada uno de los commits en la rama main, ya sea directamente (fast forward) o no, lo que hace es crear un solo commit con los cambios de todos los commits de la rama. El efecto final es como si en la rama solo hubiera producido un solo commit.</p> <p>Vamos a seleccionar este \u00faltimo (squash and merge) y le damos al bot\u00f3n para activarlo. Nos saldr\u00e1 una caja para que podamos crear una descripci\u00f3n del commit y le damos a confirmar.</p> <p></p> <p>Ya hemos terminado y nos aparecer\u00e1 una opci\u00f3n para borrar la rama, lo m\u00e1s recomendado para no tener ramas obsoletas.</p> <p>Las consecuencias de esta acci\u00f3n son las siguientes:</p> <ol> <li>El PR aparecer\u00e1 como estado merged y en la lista de PR como cerrado.</li> <li>El issue que abrimos se habr\u00e1 cerrado autom\u00e1ticamente.</li> <li>En el listado de commits aparecer\u00e1 solo uno con un enlace al PR (en vez de los dos commits que hicimos).</li> </ol>"},{"location":"Ud1%20Control%20de%20versiones/T09_github-flow/#paso-5-sincronizar","title":"Paso 5. Sincronizar","text":"<p>Hemos cambiado el repositorio en GitHub, pero nuestra rama master no contiene los mismos cambios que el de origin. As\u00ed que nos toca sincronizar y borrar la rama obsoleta:</p> <pre><code>$ git checkout main\n$ git pull --rebase --autostash\n$ git branch -D sgomez/feature-1/create-changelog\n</code></pre> <p>Info</p> <p>\u00bfPor qu\u00e9 squash and merge y no un merge o rebase? De nuevo depende de los gustos de cada equipo de desarrollo. Las cracter\u00edsticas de squash es que elimina (relativamente) rastros de errores intermedios mientras se implementaba la rama, deja menos commits en la rama master y nos enlace al PR donde se implementaron los cambios.</p> <p>Para algunas personas estas caracter\u00edsticas son unas ventajas, para otras no. Lo mejor es experimentar cada opci\u00f3n y cada uno decida como quiere trabajar.</p>"},{"location":"Ud2%20Contenedores/P2_1_despliegueDocker_fase1/","title":"Pr\u00e1ctica P2 \u2013 Fase 1: Despliegue local con Docker y Visual Studio Code","text":"<p>Centro: IES El Camin\u00e0s M\u00f3dulo: Despliegue de Aplicaciones Web Profesor: Pedro Segarra  Curso: 2025/2026  </p>"},{"location":"Ud2%20Contenedores/P2_1_despliegueDocker_fase1/#objetivo-de-la-practica","title":"Objetivo de la pr\u00e1ctica","text":"<p>Aprender a crear, ejecutar y explorar un contenedor Apache en entorno local utilizando Docker y Visual Studio Code, comprendiendo la estructura interna del servidor web y el flujo b\u00e1sico de despliegue local.</p>"},{"location":"Ud2%20Contenedores/P2_1_despliegueDocker_fase1/#1-preparar-el-entorno-local","title":"1. Preparar el entorno local","text":"<pre><code>mkdir P2\ncd P2\ncode .\n</code></pre> <p>Esto abrir\u00e1 Visual Studio Code en la carpeta <code>P2</code>.</p>"},{"location":"Ud2%20Contenedores/P2_1_despliegueDocker_fase1/#2-crear-el-archivo-indexhtml","title":"2. Crear el archivo <code>index.html</code>","text":"<p>Crea un archivo llamado <code>index.html</code> con el siguiente contenido:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Pr\u00e1ctica P2 - Apache en Docker&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Alumno: Nombre del alumno&lt;/h1&gt;\n  &lt;p&gt;&lt;strong&gt;Curso:&lt;/strong&gt; 2\u00ba DAW&lt;/p&gt;\n  &lt;p&gt;&lt;strong&gt;Centro:&lt;/strong&gt; IES El Camin\u00e0s&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Ud2%20Contenedores/P2_1_despliegueDocker_fase1/#3-crear-el-archivo-dockerfile","title":"3. Crear el archivo <code>Dockerfile</code>","text":"<pre><code>FROM httpd:2.4\nRUN mkdir -p /usr/local/apache2/htdocs/P2\nCOPY index.html /usr/local/apache2/htdocs/P2/index.html\nRUN echo \"ServerName localhost\" &gt;&gt; /usr/local/apache2/conf/httpd.conf\n</code></pre> <p>Informaci\u00f3n</p> <p>La imagen oficial de Apache (<code>httpd:2.4</code>) no utiliza <code>/var/www/html</code> como las instalaciones cl\u00e1sicas de Apache en Linux. El directorio ra\u00edz del servidor web dentro del contenedor es <code>/usr/local/apache2/htdocs</code>.</p>"},{"location":"Ud2%20Contenedores/P2_1_despliegueDocker_fase1/#4-construir-la-imagen-docker","title":"4. Construir la imagen Docker","text":"<pre><code>docker build -t p2:1.0 .\n</code></pre> <p>Consejo</p> <p>El punto final (<code>.</code>) indica que el Dockerfile se encuentra en el directorio actual.</p>"},{"location":"Ud2%20Contenedores/P2_1_despliegueDocker_fase1/#5-ejecutar-el-contenedor-apache","title":"5. Ejecutar el contenedor Apache","text":"<pre><code>docker run -d --name p2 -p 8080:80 p2:1.0\n</code></pre> <p>Abre el navegador y accede a:</p> <pre><code>http://localhost:8080/P2\n</code></pre> <p>Resultado esperado</p> <p>Debe mostrarse tu p\u00e1gina <code>index.html</code> con tus datos personales.</p>"},{"location":"Ud2%20Contenedores/P2_1_despliegueDocker_fase1/#6-explorar-el-contenedor-en-visual-studio-code","title":"6. Explorar el contenedor en Visual Studio Code","text":"<ol> <li>Abre el panel Docker en VS Code (icono de la ballena).  </li> <li>Localiza el contenedor p2 en la secci\u00f3n Containers.  </li> <li>Clic derecho \u2192 Attach Visual Studio Code.  </li> <li>Navega hasta:    <pre><code>/usr/local/apache2/htdocs/P2/index.html\n</code></pre></li> <li>Abre el archivo y verifica que coincide con la p\u00e1gina servida en el navegador.</li> </ol> <p>Extensiones necesarias</p> <ul> <li>Docker (Microsoft)  </li> <li>Dev Containers (Microsoft)</li> </ul>"},{"location":"Ud2%20Contenedores/P2_1_despliegueDocker_fase1/#7-consultar-el-contenido-desde-el-terminal-opcional","title":"7. Consultar el contenido desde el terminal (opcional)","text":"<pre><code>docker exec -it p2 sh\ncd /usr/local/apache2/htdocs/P2\nls\ncat index.html\nexit\n</code></pre>"},{"location":"Ud2%20Contenedores/P2_1_despliegueDocker_fase1/#8-detener-y-eliminar-el-contenedor","title":"8. Detener y eliminar el contenedor","text":"<pre><code>docker stop p2\ndocker rm p2\n</code></pre>"},{"location":"Ud2%20Contenedores/P2_1_despliegueDocker_fase1/#9-resumen-de-comandos-utiles","title":"9. Resumen de comandos \u00fatiles","text":"<pre><code># Crear proyecto\nmkdir P2 &amp;&amp; cd P2\n\n# Crear imagen\ndocker build -t p2:1.0 .\n\n# Ejecutar contenedor\ndocker run -d --name p2 -p 8080:80 p2:1.0\n\n# Consultar contenido\ndocker exec -it p2 sh\n\n# Detener y eliminar\ndocker stop p2 &amp;&amp; docker rm p2\n</code></pre>"},{"location":"Ud2%20Contenedores/P2_1_despliegueDocker_fase1/#10-notas-finales","title":"10. Notas finales","text":"<p>Recordatorio</p> <ul> <li>El contenedor Apache usa la ruta <code>/usr/local/apache2/htdocs</code> como ra\u00edz del sitio web.  </li> <li>Si el puerto 80 est\u00e1 ocupado, cambia <code>-p 8080:80</code> por otro puerto libre (ej. <code>-p 8081:80</code>).  </li> <li>El aviso \u201cCould not reliably determine the server\u2019s fully qualified domain name\u201d no es un error y puede ignorarse.</li> </ul>"},{"location":"Ud2%20Contenedores/P2_1_despliegueDocker_fase1/#resultado-de-la-fase-1","title":"Resultado de la Fase 1","text":"<p>Al finalizar esta fase, el alumno habr\u00e1 creado una imagen Docker con Apache, ejecutado el contenedor localmente y comprobado su funcionamiento tanto desde el navegador como dentro de Visual Studio Code.</p>"},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/","title":"Pr\u00e1ctica P2 \u2013 Fase 2: Publicaci\u00f3n en GitHub Container Registry (GHCR)","text":"<p>Centro: IES El Camin\u00e0s M\u00f3dulo: Despliegue de Aplicaciones Web Profesor: Pedro Segarra  Curso: 2025/2026  </p>"},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/#objetivo-de-la-fase","title":"Objetivo de la fase","text":"<p>Publicar la imagen Docker creada en la Fase 1 en el GitHub Container Registry (GHCR) y verificar que es accesible de forma p\u00fablica. En esta fase no se realiza el despliegue en el servidor del profesor. Ese paso se abordar\u00e1 en una fase posterior.</p>"},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/#requisitos-previos","title":"Requisitos previos","text":"<ul> <li>Haber completado la Fase 1 (imagen local construida como <code>p2:1.0</code>).  </li> <li>Repositorio Git en GitHub para el c\u00f3digo fuente (acceso por SSH).  </li> <li>Docker instalado en el equipo local.</li> </ul> <p>Recordatorio</p> <p>GHCR requiere autenticaci\u00f3n mediante token personal (PAT) para <code>docker login/push</code>. Las claves SSH se usan \u00fanicamente para Git (c\u00f3digo fuente), no para GHCR.</p>"},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/#1-subir-el-proyecto-a-github-por-ssh","title":"1. Subir el proyecto a GitHub (por SSH)","text":"<p>Desde la carpeta del proyecto <code>P2</code>:</p> <pre><code>git init\ngit add .\ngit commit -m \"Versi\u00f3n inicial Fase 2\"\ngit branch -M main\ngit remote add origin git@github.com:usuario/P2.git\ngit push -u origin main\n</code></pre> <p>Conexi\u00f3n SSH</p> <p>Aseg\u00farate de tener configurado <code>~/.ssh/config</code>: <pre><code>Host github.com\n  HostName github.com\n  User git\n  IdentityFile ~/.ssh/id_ed25519\n</code></pre></p> <p>Cuidado</p> <p>En vez de poner id_ed25519, pon tu clave</p>"},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/#2-etiquetar-la-imagen-local-con-el-espacio-de-nombres-de-ghcr","title":"2. Etiquetar la imagen local con el espacio de nombres de GHCR","text":"<pre><code>docker tag p2:1.0 ghcr.io/usuario/p2:1.0\n</code></pre> <p>Sustituci\u00f3n obligatoria</p> <p>Cambia <code>usuario</code> por tu nombre real de cuenta GitHub. Ejemplo: <code>https://github.com/juanperez01</code> \u2192 usuario = <code>juanperez01</code>.</p>"},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/#3-crear-token-personal-y-autenticarse-en-ghcr","title":"3. Crear token personal y autenticarse en GHCR","text":"<ol> <li>GitHub \u2192 Settings \u2192 Developer settings \u2192 Personal access tokens \u2192 Tokens (classic).  </li> <li>Generar un token con permisos:</li> <li><code>write:packages</code></li> <li><code>read:packages</code></li> <li><code>delete:packages</code> (opcional, solo si quieres poder borrar).</li> </ol> <p>Iniciar sesi\u00f3n en GHCR:</p> <pre><code>echo \"TOKEN_AQUI\" | docker login ghcr.io -u usuario --password-stdin\n</code></pre> <p>Salida esperada: <pre><code>Login Succeeded\n</code></pre></p> <p>Importante</p> <p>GHCR no acepta claves SSH para <code>push/pull</code> de im\u00e1genes. Usa token.</p>"},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/#4-publicar-la-imagen-en-ghcr","title":"4. Publicar la imagen en GHCR","text":"<pre><code>docker push ghcr.io/usuario/p2:1.0\n</code></pre> <p>Resultado esperado</p> <p>La imagen <code>p2:1.0</code> se sube correctamente. Podr\u00e1s verla en tu perfil de GitHub \u2192 pesta\u00f1a Packages.</p>"},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/#5-hacer-la-imagen-publica","title":"5. Hacer la imagen p\u00fablica","text":"<p>Por defecto, la imagen queda privada. Cambiar a p\u00fablica:</p> <ol> <li>GitHub \u2192 Profile \u2192 Packages \u2192 seleccionar el paquete <code>p2</code>.  </li> <li>Package settings \u2192 Change visibility \u2192 Public.</li> </ol> <p>Obligatorio</p> <p>Si no cambias la visibilidad, otros no podr\u00e1n descargar tu imagen desde GHCR.</p>"},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/#6-verificaciones-finales","title":"6. Verificaciones finales","text":""},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/#61-comprobar-desde-la-web","title":"6.1. Comprobar desde la web","text":"<ul> <li>Ve a Profile \u2192 Packages y confirma que aparece el paquete <code>p2</code> con la etiqueta <code>1.0</code>.</li> <li>Debe indicarse que la visibilidad es Public.</li> </ul>"},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/#62-comprobar-con-docker-pull-opcional","title":"6.2. Comprobar con <code>docker pull</code> (opcional)","text":"<p>Haz logout y prueba a descargar sin credenciales:</p> <p><pre><code>docker logout ghcr.io\ndocker pull ghcr.io/usuario/p2:1.0\n</code></pre> Usuario es tu usuario de github.  Si funciona sin pedir login, la imagen es realmente p\u00fablica.</p>"},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/#7-entrega-de-la-fase-2","title":"7. Entrega de la Fase 2","text":"<p>El alumno entregar\u00e1: 1. URL del repositorio GitHub del proyecto: <code>https://github.com/usuario/P2</code> 2. URL p\u00fablica del paquete GHCR (captura o enlace): <code>ghcr.io/usuario/p2:1.0</code> 3. Captura de pantalla de Packages mostrando el paquete <code>p2</code> como Public y la etiqueta <code>1.0</code>.</p>"},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/#8-problemas-comunes-y-soluciones","title":"8. Problemas comunes y soluciones","text":"<p>denied: requested access to the resource is denied</p> <ul> <li>Causa: no has hecho <code>docker login ghcr.io</code> con token v\u00e1lido, o <code>usuario</code> no coincide con tu cuenta GitHub.  </li> <li>Soluci\u00f3n:   <pre><code>echo \"TOKEN_AQUI\" | docker login ghcr.io -u usuario --password-stdin\ndocker tag p2:1.0 ghcr.io/usuario/p2:1.0\ndocker push ghcr.io/usuario/p2:1.0\n</code></pre></li> </ul> <p>name unknown: repository not found</p> <ul> <li>Causa: est\u00e1s empujando a <code>ghcr.io/usuario/p2:1.0</code> con <code>usuario</code> incorrecto.  </li> <li>Verifica tu perfil: <code>https://github.com/&lt;usuario&gt;</code>.</li> </ul> <p>La imagen no aparece en Packages</p> <ul> <li>Aseg\u00farate de haber ejecutado <code>docker push ghcr.io/usuario/p2:1.0</code> sin errores.  </li> <li>Recarga la p\u00e1gina del perfil de GitHub.</li> </ul> <p>Comprobar etiquetas locales</p> <ul> <li>Lista las im\u00e1genes locales:   <pre><code>docker images\n</code></pre></li> <li>Debes ver dos etiquetas con el mismo IMAGE ID: <code>p2:1.0</code> y <code>ghcr.io/usuario/p2:1.0</code>.</li> </ul>"},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/#9-resumen-de-comandos","title":"9. Resumen de comandos","text":"<pre><code># 1) Subir c\u00f3digo a GitHub (SSH)\ngit init &amp;&amp; git add . &amp;&amp; git commit -m \"Versi\u00f3n inicial Fase 2\"\ngit branch -M main\ngit remote add origin git@github.com:usuario/P2.git\ngit push -u origin main\n\n# 2) Etiquetar imagen para GHCR\ndocker tag p2:1.0 ghcr.io/usuario/p2:1.0\n\n# 3) Autenticaci\u00f3n GHCR\necho \"TOKEN_AQUI\" | docker login ghcr.io -u usuario --password-stdin\n\n# 4) Publicar imagen\ndocker push ghcr.io/usuario/p2:1.0\n\n# 5) Verificaci\u00f3n opcional\ndocker logout ghcr.io\ndocker pull ghcr.io/usuario/p2:1.0\n</code></pre>"},{"location":"Ud2%20Contenedores/P2_2_subidaAGHCR/#resultado-de-la-fase-2","title":"Resultado de la Fase 2","text":"<p>La imagen Docker <code>p2:1.0</code> ha sido publicada en GHCR bajo el espacio de nombres del alumno, con visibilidad p\u00fablica y verificaci\u00f3n de descarga. El despliegue en el servidor del profesor se realizar\u00e1 en una fase posterior.</p>"},{"location":"Ud2%20Contenedores/P2_3_Fase3_Alumno/","title":"Pr\u00e1ctica 2 \u2013 Fase 3: Verificaci\u00f3n de despliegue y acceso en servidor","text":"<p>Centro: IES El Camin\u00e0s M\u00f3dulo: Despliegue de Aplicaciones Web Profesor: Pedro Segarra Curso: 2025/2026  </p>"},{"location":"Ud2%20Contenedores/P2_3_Fase3_Alumno/#objetivo","title":"Objetivo","text":"<p>Comprobar que la imagen Docker publicada en GitHub Container Registry (GHCR) funciona correctamente tanto en local como en el servidor del profesor (<code>iespublico.com</code>).</p> <p>Esta fase reproduce el ciclo completo de despliegue profesional:</p> <ol> <li>Descargar la imagen publicada desde GHCR.  </li> <li>Ejecutarla en local.  </li> <li>Verificar el acceso en el navegador local.  </li> <li>Verificar el acceso remoto en el servidor del profesor.</li> </ol>"},{"location":"Ud2%20Contenedores/P2_3_Fase3_Alumno/#1-preparar-el-entorno-local","title":"1. Preparar el entorno local","text":"<p>Verifica que Docker est\u00e1 instalado y operativo:</p> <pre><code>docker --version\n</code></pre> <p>Comprobaci\u00f3n del entorno</p> <p>Si el comando devuelve un n\u00famero de versi\u00f3n (por ejemplo <code>24.0.6</code>), puedes continuar. Si no reconoce el comando, revisa la instalaci\u00f3n de Docker.</p>"},{"location":"Ud2%20Contenedores/P2_3_Fase3_Alumno/#2-descargar-la-imagen-publicada-desde-ghcr","title":"2. Descargar la imagen publicada desde GHCR","text":"<p>Comprueba que tu imagen es p\u00fablica y accesible. Sustituye <code>&lt;usuario&gt;</code> por tu nombre de usuario en GitHub:</p> <pre><code>docker pull ghcr.io/&lt;usuario&gt;/p2:1.0\n</code></pre> <p>Resultado esperado</p> <p>Si se descarga correctamente, ver\u00e1s un mensaje similar a:</p> <pre><code>Status: Downloaded newer image for ghcr.io/&lt;usuario&gt;/p2:1.0\nghcr.io/&lt;usuario&gt;/p2:1.0\n</code></pre> <p>Posibles errores</p> <p>Si aparece un error de autenticaci\u00f3n o \u201cnot found\u201d, revisa: - Que en GitHub \u2192 Profile \u2192 Packages la imagen est\u00e9 marcada como Public. - Que el nombre y el tag (<code>p2:1.0</code>) sean correctos. - Que no hayas cerrado tu cuenta o eliminado el paquete.</p>"},{"location":"Ud2%20Contenedores/P2_3_Fase3_Alumno/#3-ejecutar-la-imagen-en-local","title":"3. Ejecutar la imagen en local","text":"<p>Ejecuta tu contenedor simulando el despliegue en un servidor web:</p> <pre><code>docker run -d --name p2test -p 8080:80 ghcr.io/&lt;usuario&gt;/p2:1.0\n</code></pre> <p>Descripci\u00f3n del comando</p> <p>Este comando ejecuta el servidor Apache dentro del contenedor y lo publica localmente en el puerto 8080. Si ya tienes un contenedor con el mismo nombre, puedes cambiarlo (<code>--name p2test2</code>) o eliminar el anterior.</p>"},{"location":"Ud2%20Contenedores/P2_3_Fase3_Alumno/#4-verificar-el-acceso-local","title":"4. Verificar el acceso local","text":"<p>Abre el navegador y accede a:</p> <pre><code>http://localhost:8080/P2/\n</code></pre> <p>Resultado esperado</p> <p>Deber\u00eda mostrarse el archivo <code>index.html</code> con tus datos.</p> <p>Errores comunes</p> <ul> <li>Si se muestra la p\u00e1gina It works, significa que el <code>index.html</code> no est\u00e1 en la ruta correcta.  </li> <li>Si aparece un error 404, revisa:</li> <li>Que el <code>Dockerfile</code> incluya <code>COPY . /usr/local/apache2/htdocs/P2/</code>.  </li> <li>Que el nombre de la carpeta <code>P2</code> coincida exactamente.</li> </ul>"},{"location":"Ud2%20Contenedores/P2_3_Fase3_Alumno/#5-parar-y-eliminar-el-contenedor-local","title":"5. Parar y eliminar el contenedor local","text":"<p>Una vez verificado el funcionamiento, det\u00e9n y elimina el contenedor:</p> <pre><code>docker stop p2test\ndocker rm p2test\n</code></pre> <p>Recomendaci\u00f3n</p> <p>Es buena pr\u00e1ctica detener los contenedores una vez validados, para evitar conflictos en el puerto 8080 o consumo innecesario de recursos.</p>"},{"location":"Ud2%20Contenedores/P2_3_Fase3_Alumno/#6-verificacion-en-el-servidor-del-profesor","title":"6. Verificaci\u00f3n en el servidor del profesor","text":"<p>Cuando el profesor despliegue las im\u00e1genes en el servidor <code>iespublico.com</code>, cada alumno tendr\u00e1 una direcci\u00f3n p\u00fablica con su subdominio:</p> <pre><code>http://&lt;tu_subdominio&gt;.iespublico.com/P2/\n</code></pre> <p>Ejemplo:</p> <pre><code>http://peseca.iespublico.com/P2/\n</code></pre> <p>Resultado esperado</p> <p>La p\u00e1gina debe mostrarse igual que en local. Si se visualiza correctamente, el despliegue ha sido exitoso.</p> <p>En caso de error</p> <ul> <li>Avisa al profesor si tu subdominio no carga o muestra otra p\u00e1gina.  </li> <li>Comprueba que tu imagen sigue siendo p\u00fablica en GHCR.</li> </ul>"},{"location":"Ud2%20Contenedores/P2_3_Fase3_Alumno/#7-entrega-en-aules","title":"7. Entrega en Aules","text":"<p>Debes entregar una captura de pantalla que muestre:</p> <ol> <li>Tu navegador con <code>http://localhost:8080/P2/</code> funcionando.  </li> <li>La p\u00e1gina publicada en <code>http://&lt;tu_subdominio&gt;.iespublico.com/P2/</code> una vez desplegada.</li> </ol> <p>Incluye tambi\u00e9n un breve comentario indicando si la descarga (<code>docker pull</code>) y el despliegue funcionaron correctamente.</p> <p>Formato de entrega</p> <ul> <li>Formato recomendado: imagen PNG o PDF.  </li> <li>Nombra el archivo con tu usuario GitHub, por ejemplo: <code>peseca_fase3.png</code>.</li> </ul>"},{"location":"Ud2%20Contenedores/P2_3_Fase3_Alumno/#8-consejos-finales","title":"8. Consejos finales","text":"<ul> <li>Si <code>docker pull</code> pide autenticaci\u00f3n, tu imagen no es p\u00fablica.  </li> <li>Si el servidor remoto no muestra tu p\u00e1gina, contacta con el profesor para revisar el despliegue.  </li> <li>No elimines tu imagen de GHCR hasta final de curso.  </li> <li>Revisa peri\u00f3dicamente que sigue visible en tu perfil de GitHub, secci\u00f3n Packages.</li> </ul>"},{"location":"Ud2%20Contenedores/P2_3_Fase3_Alumno/#resultado-esperado","title":"Resultado esperado","text":"<p>Pr\u00e1ctica completada correctamente</p> <ul> <li>La imagen <code>ghcr.io/&lt;usuario&gt;/p2:1.0</code> se descarga sin errores.  </li> <li>La p\u00e1gina se muestra en local en <code>http://localhost:8080/P2/</code>.  </li> <li>La p\u00e1gina se muestra en el servidor del profesor en <code>http://&lt;subdominio&gt;.iespublico.com/P2/</code>.</li> </ul> <p>Fin de la Fase 3 IES El Camin\u00e0s \u2013 M\u00f3dulo Despliegue de Aplicaciones Web</p>"},{"location":"Ud2%20Contenedores/T01_introduction/","title":"Introducci\u00f3n","text":"<p>En esta unidad, realizaremos una introducci\u00f3n al concepto de contenedores. Nos centraremos en contenedores Linux y, en concreto, en la tecnolog\u00eda de Docker.</p> <p>Para ello vamos a utilizar los contenidos de este fant\u00e1stico curso:</p> <p>Introducci\u00f3n a los contenedores y a Docker</p> <p>Para nuestro curso estudiaremos con atenci\u00f3n los apartados:</p> <p>1 . Introducci\u00f3n</p> <p>2 . Conceptos previos</p> <pre><code>2.1. Virtualizaci\u00f3n\n\n2.2. \u00bfQu\u00e9 es una m\u00e1quina virtual?\n\n2.3. \u00bfQu\u00e9 es una m\u00e1quina virtual de proceso?\n\n2.4. \u00bfQu\u00e9 es un hipervisor?\n</code></pre> <p>3 . Contenedores</p> <pre><code>3.1. \u00bfQu\u00e9 son los contenedores?\n\n3.2. Analog\u00eda con contenedores de transporte mar\u00edtimo\n\n3.3. Contenedores para desarrollo y despliegue de aplicaciones\n\n3.4. Contenedores para despliegue de servicios\n\n3.5. Ventajas e inconvenientes del uso de contenedores\n\n3.6. En resumen \u00bfCuando es adecuado usar contenedores?\n</code></pre> <p>5 . Contenedores Docker</p> <pre><code>5.1. \u00bfQu\u00e9 es Docker?\n\n5.2. La arquitectura de Docker\n</code></pre> <p>Los siguientes cap\u00edtulos resultan interesantes aunque no los veremos ni evaluaremos en nuestro curso. Recomendamos una lectura de los mismos:</p> <p>4 . Contenedores en sistemas Linux</p> <pre><code>4.1. \u00bfEs nuevo el concepto de entornos privados en sistemas Unix?\n\n4.2. Sistemas privados modernos en Linux: contenedores\n\n4.3. \u00bfC\u00f3mo funcionan los contenedores modernos en Linux?\n\n4.4. \u00bfPuedo poner en marcha un contenedor Linux \u201cA mano\u201d?\n\n4.5. Los contenedores Linux \u00bfPueden funcionar en sistemas como Windows o MacOS?\n</code></pre> <p>5 . Contenedores Docker</p> <pre><code>5.3. Docker en sistemas Windows y MacOS\n\n5.4. Docker corriendo contenedores Windows Server Core y contenedores MacOS\n</code></pre> <p>8 . Conclusi\u00f3n</p> <p>9 . Bibliograf\u00eda</p> <p>10 . Licencias de elementos externos utilizados</p>"},{"location":"Ud2%20Contenedores/T02_installation/","title":"Instalaci\u00f3n","text":"<p>En el curso que estamos utilizando tenemos un cap\u00edtulo completo dedicado a la instalaci\u00f3n de Docker tanto en Linux, Windows y MacOSX. Puedes consultarlo aqu\u00ed:</p> <p>Instalaci\u00f3n de Docker</p> <p>Vamos a aprender a usar Docker sobre una distribuci\u00f3n Linux Debian como hemos hecho hasta ahora. Si cuentas con un sistema operativo Linux basado en Debian puedes seguir el curso directamente sobre tu S.O. Sino, te aconsejo crear una m\u00e1quina virtual en AWS con un Debian con opciones por defecto y seguir all\u00ed el curso. Recuerda, lo primero actualizar paquetes para contar con las \u00faltimas versiones disponibles:</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade\n</code></pre> <p>Puedes seguir las instrucciones de instalaci\u00f3n del PDF anterior. No obstante, yo te aconsejo que sigas el presente manual que te llevar\u00e1 a las instrucciones oficiales, m\u00e1s actualizadas.</p>"},{"location":"Ud2%20Contenedores/T02_installation/#disponibilidad","title":"Disponibilidad","text":"<p>Existe dos versiones de Docker, una libre y otra que no lo es. En nuestro curso nos ocuparemos exclusivamente de la primera: Docker CE (Community Edition).</p> <p>Docker CE est\u00e1 disponible para los siguientes sistemas GNU/Linux: CentOS, Debian, Fedora y Ubuntu. No todas est\u00e1n en m\u00faltiples arquitecturas, pero s\u00ed todas soportan x86_64/amd64. Si tienes otra arquitectura u otro sistema es mejor que uses una m\u00e1quina virtual para arrancar una distribuci\u00f3n compatible.</p> <p>Para m\u00e1s informaci\u00f3n sobre sistemas privativos soportados, leer la secci\u00f3n de plataformas soportadas de la documentaci\u00f3n oficial.</p>"},{"location":"Ud2%20Contenedores/T02_installation/#instalacion_1","title":"Instalaci\u00f3n","text":"<p>Debido a que, dependiendo de la distribuci\u00f3n, la forma de instalarlo difiere, es mejor consultar la documentaci\u00f3n oficial para saber como instalar Docker en tu m\u00e1quina.</p> <ul> <li>Ubuntu: https://docs.docker.com/install/linux/docker-ce/ubuntu/</li> <li>Debian: https://docs.docker.com/install/linux/docker-ce/debian/</li> <li>CentOS: https://docs.docker.com/install/linux/docker-ce/centos/</li> <li>Fedora: https://docs.docker.com/install/linux/docker-ce/fedora/</li> </ul> <p>Como hemos quedado nosotros usaremos una Debian sobre AWS. As\u00ed pues, sigue las instrucciones anteriores para dicha distribuci\u00f3n. No har\u00e1 falta que hagas la parte de \"Uninstall old versions\" ya que es una m\u00e1quina virtual reci\u00e9n instalada. Y utiliza la opcion \"Install using the apt repository\".</p> <p>Una vez finalizado el proceso comprueba que Docker engine CE se ha instalado correctamente con:</p> <pre><code>sudo docker version\n</code></pre> <p>Para saber si tienes Docker bien instalado, los tutoriales oficiales siempre te indican inicies un contenedor de ejemplo. Esto es lo que sucede:</p> <p>Example</p> <p>Los c\u00f3digos de ejemplo ir\u00e1n acompa\u00f1ados de una caja como esta para poder copiar y pegar los comandos.</p> <pre><code>sudo docker run hello-world\n</code></pre> <p>El resultado es el siguiente:</p> <pre><code>$ sudo docker run hello-world\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\nd1725b59e92d: Pull complete \nDigest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n1. The Docker client contacted the Docker daemon.\n2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n$ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\nhttps://hub.docker.com/\n\nFor more examples and ideas, visit:\nhttps://docs.docker.com/get-started/\n</code></pre> <p>En la l\u00ednea 1 estamos ejecutando el cliente de Docker, y estamos indicando que queremos ejecutar un contenedor a partir de la imagen hello-world del registro p\u00fablico de Docker.</p> <p>Si es la primera vez que hemos ejecutado esa imagen, nos aparecer\u00e1 la l\u00ednea 2, que indica que la imagen no puede ser encontrada y va a proceder a buscarla, por defecto, en el registro p\u00fablico. Si tenemos conexi\u00f3n a Internet se descargar\u00e1 la imagen  (l\u00ednea 6) y autom\u00e1ticamente crear\u00e1 un contenedor.</p> <p>Tanto si se ha descargado la imagen o ya estaba descargada, el contenedor se ejecutar\u00e1, obteniendo el texto de bienvenida que se ve en el cuadro anterior.</p>"},{"location":"Ud2%20Contenedores/T02_installation/#post-instalacion","title":"Post instalaci\u00f3n","text":"<p>Para finalizar la instalaci\u00f3n vamos a hacer un par de cosas que nos simplificar\u00e1n la vida.</p>"},{"location":"Ud2%20Contenedores/T02_installation/#permitir-administrar-docker-a-un-usuario-sin-privilegios","title":"Permitir administrar Docker a un usuario sin privilegios","text":"<p>Si estamos usando Docker en nuestro ordenador personal, podemos configurar nuestro usuario para usar el cliente sin tener que poner sudo delante. Para ello ejecuta lo siguiente:</p> <p>Example</p> <p>A\u00f1ade tu usuario al grupo de docker.</p> <pre><code>sudo usermod -aG docker $USER\n</code></pre> <p>Para que los nuevos permisos surtan efecto, debes cerrar y volver a abrir la sesi\u00f3n. Para problemas relacionados con los permisos visitad la p\u00e1gina del manual oficial.</p>"},{"location":"Ud2%20Contenedores/T02_installation/#instalar-docker-compose","title":"Instalar Docker Compose","text":"<p>Tambi\u00e9n es necesario traer una herramienta llamada <code>Docker Compose</code>. Puedes instalarla con las instrucciones que hay en la p\u00e1gina de Instalaci\u00f3n de Docker Compose.</p> <p>Sin embargo, si usas Ubuntu o Debian puedes instalarlo de forma m\u00e1s f\u00e1cil con apt:</p> <p>Example</p> <p>Instalaci\u00f3n de Docker Compose:</p> <pre><code>sudo apt install docker-compose\n</code></pre> <p>Llegados a este punto deber\u00edamos tener todas las herramientas necesarias para seguir este curso.</p>"},{"location":"Ud2%20Contenedores/T03_principales_acciones/","title":"Principales acciones con Docker","text":"<p>En este apartado vamos a empezar a realizar acciones con Docker. Para ello seguiremos este documento.</p> <p>Principales acciones con Docker</p> <p>Para ir recordando los distintos comandos que vayamos usando imprime y ve marcando los comandos que uses en este CheatSheet:</p> <p>Cheatsheet</p>"},{"location":"Ud2%20Contenedores/T03_principales_acciones/#docker-exec","title":"Docker exec","text":"<p>En el apartado 9. E JECUTANDO COMANDOS EN UN CONTENEDOR CON \u201c DOCKER EXEC \u201d nos explica c\u00f3mo hacerlo pero no nos gu\u00eda para probarlo. Vamos a verlo aqu\u00ed.</p> <p>Vamos primero a crear un contenedor ubuntu y a lanzar una terminal. </p> <pre><code>docker run -it --name=ubuntu_pruebas ubuntu /bin/bash\nroot@e0f7b22e64d7:/#\n</code></pre> <p>F\u00edjate que el prompt ahora es \"root@e0f7b22e64d7:/#\", es decir, estamos trabajando dentro de nuestro contenedor. Vamos a ver qu\u00e9 hay dentro del directorio /tmp</p> <pre><code>root@e0f7b22e64d7:/# ls /tmp\n</code></pre> <p>Est\u00e1 vac\u00edo.</p> <p>Ahora abre en tu m\u00e1quina host otra terminal y con\u00e9ctate por ssh a la m\u00e1quina virtual AWS en la que estamos trabajando. Desde este otro terminal vamos a lanzar comandos a nuestro contenedor <code>ubuntu_pruebas</code>. A este otro terminal le llamaremos <code>terminal2</code> y al primero, en el que estamos trabajando directamente dentro del contenedor <code>terminal1</code>. Vamos a ejecutar en <code>terminal2</code> el primer comando que nos indica nuestro manual:</p> <pre><code>docker exec -d ubuntu_pruebas touch /tmp/prueba\n</code></pre> <p>En este ejemplo se ejecuta ejecuta en \u201cbackground\u201d, gracias al par\u00e1metro \u201c-d\u201d. Este ejemplo simplemente crea mediante el comando \u201ctouch\u201d un fichero \u201cprueba\u201d en \u201c/tmp\u201d.</p> <p>Ahora vuelve a <code>terminal1</code> y vuelve a comprobar si hay algo en /tmp</p> <pre><code>root@e0f7b22e64d7:/# ls /tmp\nprueba\n</code></pre> <p>Ahora deber\u00edas tener el fichero prueba que creaste con <code>docker exec</code>.</p> <p>Siguiendo con los comandos del manual vamos a conectarnos al contenedor en <code>terminal2</code>. Luego salimos con <code>exit</code>.</p> <pre><code>docker exec -it ubuntu_pruebas bash\nroot@e0f7b22e64d7:/# exit\nexit\n</code></pre> <p>Esta orden que ejecutar\u00e1 la \u201cshell\u201d bash en nuestra consola (gracias al par\u00e1metro \u201c-it\u201d se enlaza la entrada y salida est\u00e1ndar a nuestra terminal). A efectos pr\u00e1cticos, con esta orden accederemos a una \u201cshell\u201d bash dentro del contenedor.</p> <p>Seguimos con las pruebas. Vamos a crear una variable de entorno en el contenedor. Comando que establece un variable de entorno con el par\u00e1metro \u201c-e\u201d . Se enlaza la entrada y salida de la ejecuci\u00f3n del comando con \u201c-it\u201d . A efectos pr\u00e1cticos, en esa \u201cshell\u201d estar\u00e1 disponible la variable de entorno \u201cVAR\u201d con valor 1. Lo podemos probar con \u201cecho $VAR\u201d.</p> <pre><code>$ docker exec -it -e VAR=1 ubuntu_pruebas bash\nroot@e0f7b22e64d7:/# echo $VAR \n1\nroot@e0f7b22e64d7:/# exit\nexit\n$\n</code></pre>"},{"location":"Ud2%20Contenedores/T03_principales_acciones/#docker-cp","title":"Docker cp","text":"<p>En el apartado 10. COPIANDO FICHEROS ENTRE ANFITRI\u00d3N Y CONTENEDORES CON \u201c DOCKER CP \u201d nos explica como copiar ficheros entre la m\u00e1quina anfitri\u00f3n y el contenedor. Sustituye en los comandos <code>idcontainer</code> por el nombre que le hemos dado a nuestro contenedor <code>ubuntu_pruebas</code> para probar los distintos comandos. Puedes lanzar los comandos en <code>terminal2</code> y probar que los ficheros se guardan en el contenedor en <code>terminal1</code>.</p>"},{"location":"Ud2%20Contenedores/T03_principales_acciones/#docker-attach","title":"Docker attach","text":"<p>Para probar los comandos del apartado 11. A CCEDIENDO A UN PROCESO EN EJECUCI\u00d3N CON \u201c DOCKER ATTACH \u201d sal del contenedor <code>ubuntu_pruebas</code> en <code>terminal1</code>. Ahora no deber\u00edas estar dentro de ning\u00fan contenedor en ninguno de los 2 terminales que tienes abiertos.</p> <p>En <code>terminal1</code> lanzaremos el comando que nos propone el manual:</p> <pre><code>docker run -d --name=muchotexto busybox sh -c \"while true; do $(echo date) ; sleep 1; done\"\n</code></pre> <p>Ahora en <code>terminal2</code> ejecuta el comando:</p> <pre><code>docker attach muchotexto\n</code></pre> <p>Vemos c\u00f3mo hemos anlazado la salida del contenedor <code>muchotexto</code> a la salida estandar del <code>terminal2</code> y vemos la salida del comando que se est\u00e1 ejecutando en el contendor.</p>"},{"location":"Ud2%20Contenedores/T03_principales_acciones/#docker-logs","title":"Docker logs","text":"<p>Para probar este comando mant\u00e9n el contenedor <code>muchotexto funcionando</code>. En <code>terminal2</code> ejecuta:</p> <pre><code>docker logs -f --until=2s muchotexto\n</code></pre> <p>Una vez finalices la parte te\u00f3rica prueba a realizar esta pr\u00e1ctica para afianzar conocimientos:</p> <p>Caso pr\u00e1ctico 01- Pr\u00e1ctica de comandos en contenedor Docker</p>"},{"location":"Ud2%20Contenedores/T04_images/","title":"Im\u00e1genes","text":"<p>Las im\u00e1genes son la base de Docker. Nuestros contenedores se iniciar\u00e1n a partir de ellas. Como se indic\u00f3 en la introducci\u00f3n, es una plantilla de solo lectura, que se crea incorporando los requisitos necesarios para cumplir el objetivo para el cual fue creada.</p> <p>Por ejemplo, si estamos creando un proyecto con PHP, incorporar\u00e1 el int\u00e9rprete del lenguaje de PHP. Si es una p\u00e1gina web, incorporar\u00e1 el servidor web (apache, nginx, etc.).</p> <p>En este apartado vamos a ver el manejo de im\u00e1genes con Docker. Para ello seguiremos este documento.</p> <p>Im\u00e1genes Docker</p> <p>Para ir recordando los distintos comandos que vayamos usando imprime y ve marcando los comandos que uses en este CheatSheet:</p> <p>Cheatsheet</p> <p>Una vez finalices la parte te\u00f3rica prueba a realizar estas dos pr\u00e1cticas para afianzar conocimientos:</p>"},{"location":"Ud2%20Contenedores/T04_images/#caso-practico-01-creando-una-imagen-ubuntu-con-nano","title":"Caso pr\u00e1ctico 01 - Creando una imagen Ubuntu con nano","text":"<p>Caso pr\u00e1ctico 01 - Creando una imagen Ubuntu con nano</p>"},{"location":"Ud2%20Contenedores/T04_images/#caso-practico-02-apache-2-con-php-desde-alpine","title":"Caso pr\u00e1ctico 02 - Apache 2 con PHP desde Alpine","text":"<p>Caso pr\u00e1ctico 02 - Apache 2 con PHP desde Alpine</p> <p>Warning</p> <p>Esta pr\u00e1ctica despliega un servidor web APACHE con Php. Todav\u00eda no hemos visto el tema de servidores web as\u00ed que no te preocupes por los detalles referentes al servidor web. Lo importante de esta pr\u00e1ctica es ver c\u00f3mo usa los distintos comandos en el Dockerfile ADD, RUN, EXPOSE... Lo que va detr\u00e1s no es necesario que lo entiendas ahora</p> <p>En esta pr\u00e1ctica, en el punto 2 ver\u00e9is que el Dockerfile contiene la l\u00ednea \"ADD ./start.sh /start.sh\". Ten\u00e9is que crear en el mismo directorio donde est\u00e1 el Dockerfile un archivo <code>start.sh</code> con este contenido:</p> <pre><code>#/bin/sh\n#Lanzamos servicio Apache2 en segundo plano\n/usr/sbin/httpd -D FOREGROUND\n</code></pre> <p>En el punto 3. Probando la imagen te propone lanzar la aplicaci\u00f3n sobre el puerto 80 de nuestra m\u00e1quina. Si ese puerto ya estuviera usado por otra aplicaci\u00f3n te podr\u00eda dar problemas. En ese caso puedes lanzarlo sobre el puerto 8080 con el comando:</p> <pre><code>docker run -d -p 8080:80 alpineapache\n</code></pre> <p>En este caso para acceder despu\u00e9s desde el navegador tendr\u00edas que usar:</p> <pre><code>http://localhost:8080\n</code></pre> <p>Recuerda que si estuvieras trabajando sobre una m\u00e1quina virtual en AWS Academy, deber\u00e1s abrir el puerto 8080 y sustituir localhost por la IP p\u00fablica de esa m\u00e1quina virtual.</p>"},{"location":"Ud2%20Contenedores/T05_volumes/","title":"Persistiendo datos","text":"<p>Por defecto ya hemos indicado que un contenedor est\u00e1 aislado de todo. Hemos visto como podemos conectar el contenedor a un puerto de red para poder acceder a \u00e9l. Eso incluye al sistema de archivos que contiene. De tal manera que si se elimina el contenedor, se eliminan tambi\u00e9n sus archivos.</p> <p>Si queremos almacenar datos (una web, una base de datos, etc.) dentro de un contenedor necesitamos una manera de almacenarlos sin perderlos.</p> <p>Docker ofrece tres maneras:</p> <ul> <li>A trav\u00e9s de vol\u00famenes, que son objetos de Docker como las im\u00e1genes y los contenedores.</li> <li>Montando un directorio de la m\u00e1quina anfitri\u00f3n dentro del contenedor.</li> <li>Almacen\u00e1ndolo en la memoria del sistema (aunque tambi\u00e9n se perder\u00edan al reiniciar el servidor).</li> </ul> <p>Lo normal es usar vol\u00famenes, pero habr\u00e1 ocasiones en que es preferible montar directamente un directorio de nuestro espacio de trabajo. Por ejemplo, para guardar los datos de una base de datos usaremos vol\u00famenes, pero para guardar el c\u00f3digo de una aplicaci\u00f3n o de una p\u00e1gina web montaremos el directorio.</p> <p>La raz\u00f3n para esto \u00faltimo es que tanto nuestro entorno de desarrollo como el contenedor tengan acceso a los archivos del c\u00f3digo fuente. Los vol\u00famenes, al contrario que los directorios montados, no deben accederse desde la m\u00e1quina anfitri\u00f3n.</p>"},{"location":"Ud2%20Contenedores/T05_volumes/#crear-un-volumen","title":"Crear un volumen","text":"<p>Como en la siguiente secci\u00f3n necesitaremos crear una base de datos para instalar un blog con WordPress vamos a crear un volumen donde guardar la informaci\u00f3n:</p> <pre><code>$ docker volume create wordpress-db\nwordpress-db\n</code></pre>"},{"location":"Ud2%20Contenedores/T05_volumes/#listar-volumenes","title":"Listar vol\u00famenes","text":"<p>Con <code>docker volume ls</code> podemos visualizar todos los vol\u00famenes disponibles.</p> <pre><code>$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               wordpress-db\n</code></pre>"},{"location":"Ud2%20Contenedores/T05_volumes/#visualizar-volumenes","title":"Visualizar vol\u00famenes","text":"<p>Los vol\u00famenes se crean en un directorio del sistema y no es recomendable acceder a \u00e9l, no al menos mientras haya un contenedor us\u00e1ndolo. En cualquier caso, si queremos ver los metadatos de un volumen podemos usar <code>docker volume inspect</code></p> <pre><code>$ docker volume inspect wordpress-db \n[\n    {\n        \"CreatedAt\": \"yyyy-mm-ddThh:ii:ss+Z\",\n        \"Driver\": \"local\",\n        \"Labels\": {},\n        \"Mountpoint\": \"/var/lib/docker/volumes/wordpress-db/_data\",\n        \"Name\": \"wordpress-db\",\n        \"Options\": {},\n        \"Scope\": \"local\"\n    }\n]\n</code></pre>"},{"location":"Ud2%20Contenedores/T05_volumes/#borrar-volumenes","title":"Borrar vol\u00famenes","text":"<p>Como todos los objetos de Docker, los vol\u00famenes tambi\u00e9n pueden ser borrados, pero solo si no est\u00e1n en uso. Mucha precauci\u00f3n al borrar los vol\u00famenes, porque perder\u00edamos todos los datos que contenga.</p> <p>Para borrar un contenedor usaremos <code>docker volume rm</code> y el nombre del volumen.</p> <pre><code>$ docker volume rm wordpress-db\n</code></pre>"},{"location":"Ud2%20Contenedores/T05_volumes/#para-saber-mas","title":"Para saber m\u00e1s","text":"<p>Se puede profundizar mucho m\u00e1s en el tema de vol\u00famenes en Docker, pero para el prop\u00f3sito de nuestro curso es suficiente con lo visto hasta aqu\u00ed. Si quieres profundizar m\u00e1s en el tema, as\u00ed como aprender c\u00f3mo trata Docker el \"Networking\" puedes consultar este documento.</p> <p>Redes Y vol\u00famenes</p> <p>En este cheatsheet tienes los principales comandos de vol\u00famenes y networking:</p> <p>Cheatsheet</p> <p>Y aqu\u00ed tienes esta pr\u00e1ctica para afianzar conocimientos:</p> <p>Caso pr\u00e1ctico 02 - Balanceo de carga con HAProxy</p>"},{"location":"Ud2%20Contenedores/T06_integrandovolsyconts/","title":"Integrar contenedores y vol\u00famenes","text":"<p>Ya tenemos suficientes conocimientos para montar un servicio completo usando Docker. Para ello vamos a necesitar levantar contenedores que trabajen juntos y accedan a vol\u00famenes para guardar los datos. </p> <p>En este caso vamos a montar un blog con WordPress. </p> <p>Atenci\u00f3n</p> <p>Lo importante de este cap\u00edtulo no es saber montar un Wordpress. Eso es solo un ejemplo y no necesitas saber c\u00f3mo se monta un Wordpress. Lo importante es saber crear los contenedores, enlazarlos entre ellos, usar un volumen. No te preocupes si no entiendes los detalles de los par\u00e1metros que se pasan a Wordpress. No es relevante.</p> <p>Wordpress es un servicio de blogs y p\u00e1ginas web que necesita para funcionar:</p> <ul> <li>PHP</li> <li>Una base de datos MySQL o MariaDB.</li> <li>Soporte HTTPS</li> </ul> <p>En una instalaci\u00f3n tradicional bastar\u00eda un servidor donde instalar\u00edamos PHP, una base de datos, un servidor web Apache o Nginx con soporte https y el propio servidor worpress. La base de datos se almacenar\u00eda en el sistema de archivos del propio servidor. Los ficheros de configuraci\u00f3n y las p\u00e1ginas que se fueran creando se almacenar\u00edan tambi\u00e9n en el propio servidor.</p> <p>Pero en el despliegue con contenedores usaremos:</p> <ul> <li>Un contenedor, que llamaremos wordpress, conendr\u00e1 el servidor Wordpress.</li> <li>Este contenedor almacenar\u00e1 los ficheros de configuraci\u00f3n y p\u00e1ginas que creemos en una carpeta de la m\u00e1quina host </li> <li>Otro contenedor, que llamaremos wordpress-db, contendr\u00e1 el sistema gestor de base de datos MariaDB. </li> <li>Dicho gestor MariaDB guardar\u00e1 la base de datos en un volumen docker, no en el propio contenedor. Usaremos el volumen creado en el cap\u00edtulo anterior y que llamamos vol-wordpress-db.</li> <li>Enlazaremos ambos contenedores wordpress y wordpres-db</li> </ul> <p>Importante</p> <p>Como vemos al hacer un despliegue en docker independizamos los servidores de los datos. De esta forma podremos actualizar el sistema a otra versi\u00f3n, o hacer pruebas de plugins o modificaciones simplemente creando o sustituyendo el contenedor del servidor por uno nuevo que acceda a los mismos datos.</p>"},{"location":"Ud2%20Contenedores/T06_integrandovolsyconts/#crear-el-volumen","title":"Crear el volumen","text":"<p>Empezaremos creando un volumen que se llame vol-wordpress-db</p> <pre><code>    $ docker volume create vol-wordpress-db\n</code></pre>"},{"location":"Ud2%20Contenedores/T06_integrandovolsyconts/#crear-un-contenedor-con-mariadb","title":"Crear un contenedor con MariaDB.","text":"<p>WordPress soporta los motores relaciones MySQL y MariaDB. Usaremos este \u00faltimo. Vamos a crear nuestra base de datos usando volumen el volumen que acabamos de crear para que guarde los datos.</p> <p><pre><code>docker run -d --name wordpress-db \\\n    --mount source=vol-wordpress-db,target=/var/lib/mysql \\\n    -e MYSQL_ROOT_PASSWORD=secret \\\n    -e MYSQL_DATABASE=wordpress \\\n    -e MYSQL_USER=manager \\\n    -e MYSQL_PASSWORD=secret \\\n    mariadb:10.3.9\n</code></pre> La imagen se descargar\u00e1, si no lo estaba ya, y se iniciar\u00e1 nuestro contenedor de MariaDB:</p> <pre><code>docker run -d --name wordpress-db \\\n    --mount source=vol-wordpress-db,target=/var/lib/mysql \\\n    -e MYSQL_ROOT_PASSWORD=secret \\\n    -e MYSQL_DATABASE=wordpress \\\n    -e MYSQL_USER=manager \\\n    -e MYSQL_PASSWORD=secret \\\n    mariadb:10.3.9\nUnable to find image 'mariadb:10.3.9' locally\n10.3.9: Pulling from library/mariadb\n124c757242f8: Pull complete \n9d866f8bde2a: Pull complete \nfa3f2f277e67: Pull complete \n398d32b153e8: Pull complete \nafde35469481: Pull complete \n31f2ae82b3e3: Pull complete \n3eeaf7e45ea6: Pull complete \n716982328e17: Pull complete \n34ce605c9036: Pull complete \n4502ed9073c0: Pull complete \n2afafbdf5a96: Pull complete \n43d52b11dd31: Pull complete \n30c7b70556f3: Pull complete \n8b1b39f2f89a: Pull complete \n41480b9319d7: Pull complete \nDigest: sha256:b7894bd08e5752acdd41fea654cb89467c99e67b8293975bb5d787b27e66ce1a\nStatus: Downloaded newer image for mariadb:10.3.9\n30634831d17108aa553a5774e27f398760bdbdf32debc3179843e73aa5957956\n\n$ docker ps\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n30634831d171        mariadb:10.3.9      \"docker-entrypoint.s\u2026\"   20 seconds ago      Up 16 seconds       3306/tcp            wordpress-db\n</code></pre> <p>Analicemos las distintas partes del comando.</p> <ul> <li> <p>Lo primero que habremos notado es que el contenedor ya no se queda en primer plano. El par\u00e1metro <code>-d</code> indica que debe ejecutarse como un proceso en segundo plano. As\u00ed no podremos pararlo por accidente con <code>Control+C</code>.</p> </li> <li> <p>Lo segundo es que vemos que el contenedor usa un puerto, el <code>3306/tcp</code>, pero no est\u00e1 enlazado a ning\u00fan puerto de la m\u00e1quina anfitri\u00f3n. Nosotros no hemos usado el par\u00e1metro <code>-p PUERTOANFITRION:PUERTOCONTENEDOR</code> como en otros casos ni hemos dicho en la configuraci\u00f3n nada respecto al puerto a exponer. Esa informaci\u00f3n ya est\u00e1 en la imagen que usamos. Con esta configuraci\u00f3n no tenemos forma de acceder a la base de datos directamente. Nuestra intenci\u00f3n es que solo el contenedor de WordPress (que crearemos a continuaci\u00f3n) pueda acceder. En este caso el puerto 3306/tcp, por el que se accede al servidor de MariaDB se est\u00e1 exponiendo, es decir, haci\u00e9ndolo disponible solo a otros contenedores. Ni siquiera se podr\u00e1 acceder desde la m\u00e1quina anfitri\u00f3n.</p> </li> <li> <p>Luego una serie de par\u00e1metros <code>-e</code> que nos permite configurar nuestra base de datos pas\u00e1ndole variables de entorno al contenedor. Como dijimos anteriormente no nos preocupan estos par\u00e1metros, aunque son bastante autoexplicativos.</p> <p>Info</p> <p>Los contenedores se configuran a trav\u00e9s de variables de entorno, que podemos configurar con el par\u00e1metro <code>-e</code> que vemos en la orden anterior. Gracias a ellos hemos creado una base de datos, un usuario y configurado las contrase\u00f1as.</p> <p>Se recomienda buscar en el registro de Docker la imagen oficial de MariaDB para entender el uso de los par\u00e1metros.</p> </li> <li> <p>Por \u00faltimo, el par\u00e1metro <code>--mount</code> nos permite enlazar el volumen vol-wordpress-db que creamos en el paso anterior con el directorio <code>/var/lib/mysql</code> del contenedor. Ese directorio es donde se guardan los datos de MariaDB. Eso significa que si borramos el contenedor, o actualizamos el contenedor a una nueva versi\u00f3n, no perderemos los datos porque ya no se encuentran en \u00e9l, sino en el volumen. Solo lo perder\u00edamos si borramos expl\u00edcitamente el volumen.</p> <p>Warning</p> <p>Cada contendor que usemos tendr\u00e1 uno o varios directorios donde se deben guardar los datos no vol\u00e1tiles. Nos corresponde a nosotros conocer la herramienta y saber de qu\u00e9 directorios se tratan. Usualmente est\u00e1n en la documentaci\u00f3n del contenedor, pero no siempre.</p> <p>Info</p> <p>El par\u00e1metro <code>--mount</code> se empez\u00f3 a utilizar desde la versi\u00f3n <code>17.06</code> para contenedores independientes (los que no pertenecen a un enjambre o swarm). Los que conozcan Docker de versiones m\u00e1s antiguas estar\u00e1n m\u00e1s acostumbrados a usar el par\u00e1metro <code>--volume</code> que hace algo similar. Sin embargo la documentaci\u00f3n aconseja usar ya <code>--mount</code>, sobre todo para nuevos usuarios.</p> <p>Nosotros somos muy obedientes as\u00ed que en este taller usaremos <code>--mount</code>.</p> </li> <li> <p>Finalmente indicamos la imagen que vamos a usar: <code>mariadb:10.3.9</code>.</p> </li> </ul>"},{"location":"Ud2%20Contenedores/T06_integrandovolsyconts/#creando-nuestro-blog","title":"Creando nuestro blog","text":"<p>Vamos ahora a crear nuestro contenedor de WordPress, y a conectarlo con nuestra base de datos. Adem\u00e1s, queremos poder editar los ficheros de las plantillas, por si tenemos que modificar algo, as\u00ed que necesitaremos montar el directorio del contenedor donde est\u00e1 instalado WordPress con nuestra cuenta de usuario en la m\u00e1quina anfitri\u00f3n.</p> <p>Vamos a crear el espacio de trabajo en la m\u00e1quina anfitri\u00f3n donde estamos usando docker:</p> <pre><code>mkdir -p ~/Sites/wordpress/target &amp;&amp; cd ~/Sites/wordpress\n</code></pre> <p>Y dentro de este directorio arrancamos el contenedor:</p> <pre><code>docker run -d --name wordpress \\\n    --link wordpress-db:mysql \\\n    --mount type=bind,source=\"$(pwd)\"/target,target=/var/www/html \\\n    -e WORDPRESS_DB_USER=manager \\\n    -e WORDPRESS_DB_PASSWORD=secret \\\n    -p 8080:80 \\\n    wordpress:4.9.8\n</code></pre> <p>Revisa bien los distintos par\u00e1metros, la mayor\u00eda ya los hemos visto antes:</p> <ul> <li><code>-d</code> para lanzar en 2\u00ba plano</li> <li>--mount para enlazar un directorio en el contenedor con un directorio en la m\u00e1quina anfitri\u00f3n</li> <li>-e para definir par\u00e1metros en el contenedor</li> <li>-p 8080:80 para enlazar el puerto 8080 en el anfitri\u00f3n con el 80 en el contenedor.</li> </ul> <p>Pero encontramos un par\u00e1metro nuevo:</p> <ul> <li>--link wordpress-db:mysql: indica que este contenedor se vincula con otro llamado \"wordpress-db\", y permite que este contenedor lo referencie utilizando el alias \"mysql\".</li> </ul> <p>Info</p> <p>Puedes encontrar toda la informaci\u00f3n referente a esta imagen en DockerHub buscando la imagen wordpress.</p> <p>Pero insisto, no se trata de saber montar un Wordpress, sino de aprender c\u00f3mo usar contenedores que se enlazan, usan un volumen, etc.</p> <p>Cuando termine la ejecuci\u00f3n, si accedemos a la direcci\u00f3n http://localhost:8080/, ahora s\u00ed podremos acabar el proceso de instalaci\u00f3n de nuestro WordPress. Recuerda que si accedes desde un navegador en un equipo distinto al que est\u00e1s lanzando los contenedores deber\u00e1s usar <code>http://IPSERVER:8080</code> sustituyendo IPSERVER por la IP de tu m\u00e1quina anfitri\u00f3n.</p> <p>Si listamos el directorio target comprobaremos que tenemos todos los archivos de instalaci\u00f3n accesibles desde el directorio anfitri\u00f3n.</p> <p>Ejercicios</p> <p>Ejercicios:</p> <ol> <li>Para los contenedores, tanto wordpress como wordpress-db.</li> <li>Borra ambos.</li> <li>Comprueba que sigue existiendo el volumen vol-wordpress-db que contiene la base de datos.</li> <li>Comprueba que sigue existiendo el directorio ~/Sites/worpress/target en la m\u00e1quina anfitri\u00f3n con los ficheros de configuraci\u00f3n.</li> <li>Vuelve a crear el contenedor wordpress-db pero actualizando la versi\u00f3n de MariaDb. Usa la imagen mariadb:11.</li> <li>Vuelve a crear el contenedor wordpress pero actualizando la versi\u00f3n de Wordpress. Usa la imagen wordpress:5.0.0-apache.</li> <li>Vuelve a acceder a tu wordpress y comprueba lo que ha costado actualizar la versi\u00f3n y c\u00f3mo se han mantenido los datos de la base de datos y de los ficheros guardados en el anfitri\u00f3n.</li> <li>Vuelve a borrarlos y borra tambi\u00e9n el volumen y el contenido de ~/Sites/worpress/target</li> <li>Vuelve a crear el volumen y los contenedores y comprueba que ahora s\u00ed hay que volver a instalar WordPress. Ahora puedes hacerlo con la versi\u00f3n latest de ambos servidores.</li> </ol> <p>Nota</p> <p>Si intentas actualizar a las versiones latest de ambos servidores sin eliminar el volumen y los ficheros en ~/Sites/worpress/target no te funcionar\u00e1. Probablemente en alg\u00fan cambio de versi\u00f3n, bien de MariaDB o de Wordpress, cambi\u00f3 la forma de almacenar la informaci\u00f3n y se perdi\u00f3 la compatibilidad hacia atr\u00e1s, con lo que no son capaces de leer los datos existentes</p>"},{"location":"Ud2%20Contenedores/T06_integrandovolsyconts/#para-saber-mas","title":"Para saber m\u00e1s","text":"<p>Para los efectos de este curso es suficiente con lo visto hasta aqu\u00ed. Pero si quieres saber m\u00e1s y estudiaste el documento de \"Para saber m\u00e1s\" de la secci\u00f3n anterior donde profundizaba en vol\u00famenes y redes docker, puedes hacer la pr\u00e1ctica siguiente.</p> <p>En esta pr\u00e1ctica hace lo mismo que hemos visto anteriormente pero no usa el par\u00e1metro --link para enlazar los contenedores. A partir de Docker 1.13, el uso de --link ha sido desaconsejado en favor de la creaci\u00f3n de redes para conectar contenedores.</p> <p>Caso pr\u00e1ctico 01 - Wordpress + MySQL</p>"},{"location":"Ud2%20Contenedores/T07_docker-compose/","title":"Docker Compose","text":"<p>En el cap\u00edtulo anterior hemos levantado un Wordpress usado el cliente de Docker para crear los contenedores, as\u00ed como para crear el resto de objetos y vincularlos entre s\u00ed. Si recuerdas los comandos son complejos y extensos. Adem\u00e1s hemos de ejecutar primero la creaci\u00f3n del contenedor con la base de datos y luego el contenedor con Wordpress. Vemos que ser\u00eda mucho m\u00e1s c\u00f3modo poder configurarlo todo en un solo archivo y lanzar todos los contenedores, convenientemente enlazados, con un solo comando. </p> <p>Para automatizar la creaci\u00f3n, inicio y parada de un contenedor o un conjunto de ellos, Docker proporciona una herramienta llamada Docker Compose.</p> <p>Para esta parte vamos a levantar el mismo Wordpress del cap\u00edtulo anterior pero usando esta herramienta. Empezaremos por detener y borrar lo que hemos creado:</p> <pre><code>    docker container stop wordpress wordpress-db\n    docker container rm wordpress wordpress-db\n    docker volume rm vol-wordpress-db\n    sudo rm -R -f ~/Sites/wordpress/target/*\n</code></pre>"},{"location":"Ud2%20Contenedores/T07_docker-compose/#docker-compose_1","title":"Docker Compose","text":"<p>Compose es una herramienta para definir y ejecutar aplicaciones multi-contenedor. Con un solo comando podremos crear e iniciar todos los servicios que necesitamos para nuestra aplicaci\u00f3n.</p> <p>Los casos de uso m\u00e1s habituales para docker-compose son:</p> <ul> <li>Entornos de desarrollo</li> <li>Entornos de testeo autom\u00e1ticos (integraci\u00f3n cont\u00ednua)</li> <li>Despliegue en host individuales (no clusters)</li> </ul> <p>Compose tiene comandos para manejar todo el ciclo de vida de nuestra aplicaci\u00f3n:</p> <ul> <li>Iniciar, detener y rehacer servicios.</li> <li>Ver el estado de los servicios.</li> <li>Visualizar los logs.</li> <li>Ejecutar un comando en un servicio.</li> </ul>"},{"location":"Ud2%20Contenedores/T07_docker-compose/#creacion-de-contenedores-automatizada","title":"Creaci\u00f3n de contenedores automatizada","text":"<p>En el mismo directorio donde est\u00e1bamos en el paso anterior (<code>~/Sites/wordpress</code>), vamos a crear un fichero llamado <code>docker-compose.yaml</code> con el siguiente contenido:</p> <pre><code>version: '3'\n\nservices:\n    db:\n        image: mariadb:10.3.9\n        volumes:\n            - data:/var/lib/mysql\n        environment:\n            - MYSQL_ROOT_PASSWORD=secret\n            - MYSQL_DATABASE=wordpress\n            - MYSQL_USER=manager\n            - MYSQL_PASSWORD=secret\n    web:\n        image: wordpress:4.9.8\n        depends_on:\n            - db\n        volumes:\n            - ./target:/var/www/html\n        environment:\n            - WORDPRESS_DB_USER=manager\n            - WORDPRESS_DB_PASSWORD=secret\n            - WORDPRESS_DB_HOST=db\n        ports:\n            - 8080:80\n\nvolumes:\n    data:\n</code></pre> <p>Info</p> <p>YAML es un lenguaje de serializaci\u00f3n de datos dise\u00f1ado para ser le\u00eddo y escrito por personas. Se recomienda que sigas alg\u00fan tutorial para entender su formato: Aprende YAML en Y minutos.</p> <p>Los ficheros de Compose est\u00e1n divididos en tres secciones: services, volumes y networks; y deben indicar un n\u00famero de versi\u00f3n de Docket compose que estamos usando. Nos permite realizar practicamente lo mismo que podemos hacer con el cliente de docker, pero de forma autom\u00e1tica.</p> <p>     Fuente: https://medium.com/@laurap_85411/docker-compose-stop-vs-down-e4e8d6515a85</p> <p>Note</p> <p>En este taller no entramos en el apartado de networks.</p> <p>Con este fichero podemos hacer lo mismo que hemos hecho en el cap\u00edtulo anterior, pero con la ventaja de describir todos nuestros requisitos en un solo archivo.</p>"},{"location":"Ud2%20Contenedores/T07_docker-compose/#iniciar-servicios","title":"Iniciar servicios","text":"<p>Vamos a ejecutar esta aplicaci\u00f3n y luego procederemos a explicarla:</p> <p>Example</p> <p>Arranca la aplicaci\u00f3n con Compose:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Cuando arrancamos la aplicaci\u00f3n, Compose nos informa de los servicios que ha ido levantando:</p> <pre><code>$ docker-compose up -d\nCreating network \"wordpress_default\" with the default driver\nCreating volume \"wordpress_data\" with local driver\nCreating wordpress_db_1 ... \nCreating wordpress_db_1 ... done\nCreating wordpress_web_1 ... \nCreating wordpress_web_1 ... done\n</code></pre> <p>El par\u00e1metro <code>-d</code> es similar al que hemos visto en <code>docker run</code>: nos permite levantar los servicios en segundo plano.</p> <p>Veamos los contenedores activos:</p> <p><pre><code>$ docker ps\nCONTAINER ID  IMAGE            COMMAND      CREATED         STATUS         PORTS                  NAMES\na07b5d4d3982  wordpress:4.9.8  \"docker.s\u2026\"  10 seconds ago  Up 8 seconds   0.0.0.0:8080-&gt;80/tcp   wordpress_web_1\nd9204884cec5  mariadb:10.3.9   \"docker.s\u2026\"  11 seconds ago  Up 10 seconds  3306/tcp               wordpress_db_1\n</code></pre> Tambi\u00e9n podemos ver los contenedores con Compose:</p> <p><pre><code>$ docker-compose ps\n    Name                    Command               State          Ports        \n-------------------------------------------------------------------------------\nwordpress_db_1    docker-entrypoint.sh mysqld      Up      3306/tcp            \nwordpress_web_1   docker-entrypoint.sh apach ...   Up      0.0.0.0:8080-&gt;80/tcp\n</code></pre> Lo que tenemos que tener en cuenta es lo siguiente:</p> <ul> <li><code>docker-compose ps</code> solo muestra informaci\u00f3n de los servicios que se define en <code>docker-compose.yaml</code>, mientras que <code>docker ps</code> muestra todos.</li> <li>Cuando creamos contenedores con <code>docker</code> sin indicar un nombre, por defecto asigna uno aleatorio; mientras que en Compose el prefijo es el nombre del directorio en que se encuentra el fichero .yaml y el sufijo el nombre del servicio: wordpress_db_1. El n\u00famero final indica el n\u00famero de instancia. Es posible levantar m\u00e1s de una instancia de un mismo servicio.</li> </ul> <p>Si accedemos a la direcci\u00f3n http://localhost:8080/, veremos de nuevo la instalaci\u00f3n de WordPress.</p> <p>Warning</p> <p>Recuerda que si est\u00e1s trabajando en AWS Academy y accedes a la EC2 desde tu PC host, deber\u00e1s sustituir localhost por la IP p\u00fablica de tu EC2.</p> <p>F\u00edjate bien que accedemos a wordpress con http y no https. Los navegadores modernos intentar\u00e1n usar https si no les dices lo contrario. </p> <p>Recuerda que deber\u00e1s crear una regla de entrada en el \"grupo de seguridad\" que usa tu EC2 de AWS para permitir el acceso a la m\u00e1quina por http.</p>"},{"location":"Ud2%20Contenedores/T07_docker-compose/#detener-servicios","title":"Detener servicios","text":"<p>Podemos detener servicios con</p> <pre><code>docker-compose stop\n</code></pre>"},{"location":"Ud2%20Contenedores/T07_docker-compose/#borrar-servicios","title":"Borrar servicios","text":"<p>Podemos borrar servicios con</p> <pre><code>docker-compose down\n</code></pre> <p>Esto borra los contenedores, pero no los vol\u00famenes. As\u00ed que si hemos creado bien la aplicaci\u00f3n nuestros datos est\u00e1n a salvo.</p> <p>Si queremos borrar tambi\u00e9n los vol\u00famenes:</p> <pre><code>docker-compose down -v\n</code></pre>"},{"location":"Ud2%20Contenedores/T07_docker-compose/#estructura-de-la-configuracion","title":"Estructura de la configuraci\u00f3n","text":"<p>Veamos la configuraci\u00f3n por partes:</p> <pre><code>version: '3'\n</code></pre> <p>Compose se actualiza a menudo, con lo que el archivo de configuraci\u00f3n va adquiriendo nuevas funcionalidades. La versi\u00f3n '3' (es una cadena, importante poner comillas) es la \u00faltima en el momento de escribir estas notas. Para conocer todas sus caracter\u00edsticas mira la p\u00e1gina de referencia de la versi\u00f3n 3 de Compose.</p> <pre><code>volumes:\n    data:\n</code></pre> <p>Ya hemos indicado que es importante guardar los datos vol\u00e1tiles de las aplicaciones en vol\u00famenes. En este caso hemos creado un volumen llamado <code>data</code>. Recordemos que Compose siempre a\u00f1ade como prefijo el nombre del directorio, con lo que el nombre real del volumen es <code>wordpress_data</code>. Podemos comprobarlo con el cliente de docker como hicimos en el cap\u00edtulo de vol\u00famenes:</p> <p><pre><code>$ docker volume ls\nDRIVER              VOLUME NAME\nlocal               wordpress_data\n</code></pre> Nos saltamos la secci\u00f3n de redes (networks) y vamos a la secci\u00f3n de servicios, que son los contenedores que precisa o componen nuestra aplicaci\u00f3n.</p> <p>Primero la base de datos:</p> <p><pre><code>services:\n    db:\n        image: mariadb:10.3.9\n        volumes:\n            - data:/var/lib/mysql\n        environment:\n            - MYSQL_ROOT_PASSWORD=secret\n            - MYSQL_DATABASE=wordpress\n            - MYSQL_USER=manager\n            - MYSQL_PASSWORD=secret\n</code></pre> Despu\u00e9s de abrir la parte de servicios, el primer nivel indica el nombre del servicio <code>db</code>, que genera el contenedor <code>wordpress_db</code>. Lo que vemos a continuaci\u00f3n es lo mismo que hicimos en la secci\u00f3n anterior pero de forma parametrizada. Si recordamos, para levantar nuestra base de datos, indicamos la imagen (l\u00ednea 3), luego montamos los vol\u00famenes (l\u00ednea 4), y despu\u00e9s indicamos las variables de entorno que configuraban el contenedor (l\u00ednea 6).</p> <p>Es decir, lo anterior es equivalente, excepto por el nombre, a:</p> <pre><code>$ docker run -d --name wordpress-db \\\n        --mount source=wordpress-db,target=/var/lib/mysql \\\n        -e MYSQL_ROOT_PASSWORD=secret \\\n        -e MYSQL_DATABASE=wordpress \\\n        -e MYSQL_USER=manager \\\n        -e MYSQL_PASSWORD=secret mariadb:10.3.9\n</code></pre> <p>Y despu\u00e9s nuestro WordPress:</p> <pre><code>services:\n    web:\n        image: wordpress:4.9.8\n        depends_on:\n            - db\n        volumes:\n            - ./target:/var/www/html\n        environment:\n            - WORDPRESS_DB_USER=manager\n            - WORDPRESS_DB_PASSWORD=secret\n            - WORDPRESS_DB_HOST=db\n        ports:\n            - 8080:80\n</code></pre> <p>En este caso la equivalencia es al comando:</p> <p><pre><code>$ docker run -d --name wordpress \\\n    --link wordpress-db:mysql \\\n    --mount type=bind,source=\"$(pwd)\"/target,target=/var/www/html \\\n    -e WORDPRESS_DB_USER=manager \\\n    -e WORDPRESS_DB_PASSWORD=secret \\\n    -p 8080:80 \\\n    wordpress:4.9.8\n</code></pre> La equivalencia de los par\u00e1metros es la siguiente:</p> par\u00e1metro Docker par\u00e1metro Composer --link depends_on --mount volumes -e environment -p, --publish ports image <p>Note</p> <p>Si reiniciamos el ordenador, los contenedores estar\u00e1n detenidos (stop), podremos reiniciarlos con <code>docker start</code> o <code>docker-compose start</code>. Este es el comportamiento predeterminado y el que nos interesa en un entorno de desarrollo.</p> <p>Sin embargo, en otros entornos, o para casos concretos, igual queremos que un contenedor tenga el mismo estado en el que estaba antes de reiniciar la m\u00e1quina (iniciado o parado).</p> <p>Para eso usaremos el par\u00e1metro <code>restart</code>. En el caso de la base de datos de nuestro ejemplo, la configuraci\u00f3n quedar\u00eda como:</p> <p><pre><code>services:\n    db:\n        image: mariadb:10.3.9\n        restart: unless-stopped\n        volumes:\n            - data:/var/lib/mysql\n        environment:\n            - MYSQL_ROOT_PASSWORD=secret\n            - MYSQL_DATABASE=wordpress\n            - MYSQL_USER=manager\n            - MYSQL_PASSWORD=secret\n</code></pre> El equivalente en la consola ser\u00eda:</p> <pre><code>$ docker run -d --name wordpress-db \\\n    --restart unless-stopped\n    --mount source=wordpress-db,target=/var/lib/mysql \\\n    -e MYSQL_ROOT_PASSWORD=secret \\\n    -e MYSQL_DATABASE=wordpress \\\n    -e MYSQL_USER=manager \\\n    -e MYSQL_PASSWORD=secret mariadb:10.3.9\n</code></pre> <p>Otros valores son: <code>no</code> (por defecto), <code>always</code> y <code>on-failure</code>.</p>"},{"location":"Ud2%20Contenedores/T07_docker-compose/#crear-nuestras-propias-aplicaciones-con-docker-compose","title":"Crear nuestras propias aplicaciones con docker compose","text":"<p>En este ejemplo hemos visto c\u00f3mo podemos montar un servicio a partir de im\u00e1genes docker que descargamos del repositorio, en este caso una imagen \"wordpress\" y una imagen \"mariadb\". Pero \u00bfse puede desplegar un servicio a partir de una aplicaci\u00f3n propia? Por supuesto que si, en este caso en lugar de decirle a docker compose la imagen a usar con:</p> <pre><code>`image: mariadb:10.3.9`\n</code></pre> <p>Usaremos</p> <pre><code>`build: .`\n</code></pre> <p>Y en el mismo directorio donde tenemos nuestro docker-compose.yaml incluiremos un fichero Dockerfile con los comandos para crear la imagen que necesitemos.</p> <p>Esto es solo un avance. Lo veremos con m\u00e1s detalle cuando veamos la unidad de \"Servidores de aplicaciones\"</p>"},{"location":"Ud2%20Contenedores/T07_docker-compose/#para-saber-mas","title":"Para saber m\u00e1s","text":"<p>Se puede profundizar mucho m\u00e1s en el tema de Docker compose, pero para el prop\u00f3sito de nuestro curso es suficiente con lo visto hasta aqu\u00ed. Si quieres profundizar m\u00e1s en el tema puedes consultar este documento.</p> <p>Docker Compose</p> <p>En este cheatsheet tienes los principales comandos de Docker Compose:</p> <p>Cheatsheet</p> <p>Y aqu\u00ed tienes un par de pr\u00e1cticas para afianzar conocimientos:</p> <p>Caso pr\u00e1ctico 01 - Wordpress + MySQL - Muy similar a lo hecho en el este cap\u00edtulo</p> <p>Caso pr\u00e1ctico 03 - Proxy Nginx y balanceo escalado con Docker Compose</p>"},{"location":"Ud2%20Contenedores/T09_tips/","title":"Trucos","text":""},{"location":"Ud2%20Contenedores/T09_tips/#portainer","title":"Portainer","text":"<p>Portainer es una gestor de contenedores a trav\u00e9s de una interfaz web. Para usarlo creamos un directorio donde guardar nuestro docker-compose.yaml.</p> <pre><code>mkdir -p ~/Sites/portainer\ncd ~/Sites/portainer\n</code></pre> <p>Guardamos el siguiente fichero como docker-compose.yaml en nuestro directorio:</p> <pre><code>version: '2'\n\nservices:\n  portainer:\n    image: portainer/portainer\n    command: -H unix:///var/run/docker.sock\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - portainer_data:/data\n    ports:\n      - 9000:9000\n\nvolumes:\n  portainer_data:\n</code></pre> <p>Y ejecutamos el contenedor:</p> <pre><code>docker-compose up -d\n</code></pre> <p>Ahora puedes acceder via web a http://IPSERVER:9000 y gestionar via web los contenedores e imagenes.</p>"},{"location":"Ud2%20Contenedores/T09_tips/#limpieza","title":"Limpieza","text":"<p>Para borrar objetos que no est\u00e1n en uso:</p> <p><pre><code>docker system prune\n</code></pre> Para borrar vol\u00famenes que no est\u00e1n asociados a ning\u00fan contenedor:</p> <pre><code>docker volume rm $(docker volume ls -q -f \"dangling=true\")\n</code></pre> <p>Para borrar contenedores que han terminado su ejecuci\u00f3n:</p> <pre><code>docker rm $(docker ps -q -f \"status=exited\")\n</code></pre> <p>Para borrar im\u00e1genes que no est\u00e1n etiquetadas:</p> <pre><code>docker rmi $(docker images -q -f \"dangling=true\")\n</code></pre>"},{"location":"Ud2%20Contenedores/T09_tips/#copias-de-seguridad","title":"Copias de seguridad","text":"<p>Para hacer una copia de seguridad:</p> <pre><code>docker run --rm -v /tmp:/backup \\\n    --volumes-from &lt;container-name&gt; \\\n    busybox tar -cvf /backup/backup.tar &lt;path-to-data&gt;\n</code></pre> <p>Para restaurar:</p> <pre><code>docker run --rm -v /tmp:/backup \\\n    --volumes-from &lt;container-name&gt; \n    busybox tar -xvf /backup/backup.tar &lt;path-to-data&gt;\n</code></pre>"},{"location":"Ud2%20Contenedores/T09_tips/#fuentes-de-esta-pagina","title":"Fuentes de esta p\u00e1gina:","text":"<ol> <li>https://codefresh.io/docker-tutorial/everyday-hacks-docker/</li> <li>http://blog.labianchin.me/2016/02/15/docker-tips-and-tricks</li> </ol>"},{"location":"Ud2%20Contenedores/T09_tips/#imagenes-base","title":"Im\u00e1genes base","text":"<p>Son las im\u00e1genes m\u00e1s conocidas por las que podemos usar para no partir desde cero para crear la nuestra.</p> <ul> <li>phusion/baseimage: 209mb</li> <li>centos: 200mb</li> <li>debian: 101mb</li> <li>ubuntu: 84mb</li> <li>alpine: 4.4mb</li> <li>busybox: 1.16mb</li> </ul>"},{"location":"Ud2%20Contenedores/_TallerUd7_04_images/","title":"Im\u00e1genes","text":"<p>Las im\u00e1genes son la base de Docker. Nuestros contenedores se iniciar\u00e1n a partir de ellas. Como se indic\u00f3 en la introducci\u00f3n, es una plantilla de solo lectura, que se crea incorporando los requisitos necesarios para cumplir el objetivo para el cual fue creada.</p> <p>Por ejemplo, si estamos creando un proyecto con PHP, incorporar\u00e1 el int\u00e9rprete del lenguaje de PHP. Si es una p\u00e1gina web, incorporar\u00e1 el servidor web (apache, nginx, etc.).</p>"},{"location":"Ud2%20Contenedores/_TallerUd7_04_images/#buscar-imagenes","title":"Buscar im\u00e1genes","text":"<p>Crear una imagen desde cero supone un esfuerzo demasiado grande, as\u00ed que lo normal es partir o usar una ya creada.</p> <p>Para ellos buscaremos en los registros, el lugar donde se almacenan. Hay un registro oficial (https://hub.docker.com), pero nada impide a otras organizaciones, o a nosotros mismo, tener un registro propio. Estos registros pueden ser privados o p\u00fablicos.</p> <p>Imaginemos que queremos crear una web con WordPress. Si buscamos en el registro encontraremos una imagen llamada wordpress, con la etiqueta oficial. La recomendaci\u00f3n es que siempre busquemos im\u00e1genes oficiales, est\u00e1n mantenidas y bien documentadas.</p> <p>En la p\u00e1gina encontraremos las diferentes opciones que tiene esta imagen para configurarla, aunque las veremos con m\u00e1s detalle m\u00e1s adelante.</p> <p>Por ahora iniciemos la imagen como se indica:</p> <p>Example</p> <p>Iniciar una imagen de WordPress:</p> <pre><code>docker run -p 8080:80 wordpress\n</code></pre> <p>Y comprobaremos como se inicia el contenedor:</p> <pre><code>$ docker run -p 8080:80 wordpress\nUnable to find image 'wordpress:latest' locally\nlatest: Pulling from library/wordpress\n802b00ed6f79: Pull complete \n59f5a5a895f8: Pull complete \n6898b2dbcfeb: Pull complete \n8e0903aaa47e: Pull complete \n2961af1e196a: Pull complete \n71f7016f79a0: Pull complete \n5e1a48e5719c: Pull complete \n7ae5291984f3: Pull complete \n725b65166f31: Pull complete \ne90b121f9520: Pull complete \nb5a272809bbd: Pull complete \nf045f3ae0e2b: Pull complete \n7f51c9ea2d8e: Pull complete \n5aa9d0ed164a: Pull complete \n8eea44e2bfc7: Pull complete \n48918885026e: Pull complete \n8ac3e8ada01a: Pull complete \nd3da911b920f: Pull complete \n94c7e0af5b20: Pull complete \ne1f39ac90dec: Pull complete \nDigest: sha256:7121cdf8e9f01816653a3b2d2f4fc7bfe1dab956f00db5c7e7689e5f1454029a\nStatus: Downloaded newer image for wordpress:latest\nWordPress not found in /var/www/html - copying now...\nComplete! WordPress has been successfully copied to /var/www/html\nAH00558: apache2: Could not reliably determine the server's fully qualified domain name,     using 10.17.0.1. Set the 'ServerName' directive globally to suppress this message\nAH00558: apache2: Could not reliably determine the server's fully qualified domain name,     using 10.17.0.1. Set the 'ServerName' directive globally to suppress this message\n[DDD mmm dd hh:mm:ss.iiiiii yyyy] [mpm_prefork:notice] [pid 1] AH00163: Apache/2.4.25     (Debian) PHP/7.2.10 configured -- resuming normal operations\n[DDD mmm dd hh:mm:ss.iiiiii yyyy] [core:notice] [pid 1] AH00094: Command line: 'apache2     -D FOREGROUND'\n</code></pre> <p>Vemos en la l\u00ednea nueva un nuevo par\u00e1metro: <code>-p 8080:80</code>. Por defecto, un contenedor est\u00e1 totalmente aislado. Pero si estamos montando un blog con WordPress vamos a necesitar acceder a \u00e9l desde el navegador.</p> <p>Con el par\u00e1metro <code>-p</code>, versi\u00f3n corta de <code>--publish</code>, podemos indicar que estamos enlazando un puerto de la m\u00e1quina anfitri\u00f3n con el contenedor. En este caso estamos enlazando el puerto 8080 de la m\u00e1quina anfitri\u00f3n con el 80 del contenedor.</p> <p>Info</p> <p>No vamos a explicar todas las opciones posibles, el tutorial ser\u00eda demasiado largo. Puedes consultar la p\u00e1gina del manual con <code>man docker-run</code> o llamando a la ayuda desde el cliente con <code>docker run --help</code>.</p> <p>En este caso, el formato de <code>publish</code> es:</p> <pre><code>    -p, --publish ip:[hostPort]:containerPort | [hostPort:]containerPort\n        Publish a container's port, or range of ports, to the host.\n\n    Both hostPort and containerPort can be specified as a range.  When specifying ranges for both, the number of ports in ranges should be equal.\n\n    Examples: -p 1234-1236:1222-1224, -p 127.0.0.1:$HOSTPORT:$CONTAINERPORT.\n\n    Use docker port(1) to see the actual mapping, e.g. docker port CONTAINER $CONTAINERPORT.\n</code></pre> <p>Vamos a abrir la siguiente p\u00e1gina web en nuestro navegador:</p> <p>http://localhost:8080</p> <p>La cual nos mostrar\u00e1 el asistente de instalaci\u00f3n de WordPress, el cual no vamos a instalar porque necesitamos una base de datos que a\u00fan no tenemos.</p> <p></p> <p>En su lugar vamos a la consola e interrumpimos la ejecuci\u00f3n del contenedor con <code>Control+C</code>:</p> <pre><code>^C[DDD mmm dd hh:mm:ss.iiiiii yyyy] [mpm_prefork:notice] [pid 1] AH00169: caught SIGTERM, shutting down\n</code></pre>"},{"location":"Ud2%20Contenedores/_TallerUd7_04_images/#gestion-de-imagenes","title":"Gesti\u00f3n de im\u00e1genes","text":""},{"location":"Ud2%20Contenedores/_TallerUd7_04_images/#descarga","title":"Descarga","text":"<p>Las imagenes que nos descargamos se identifican, adem\u00e1s de por el nombre, por una versi\u00f3n. De esa manera podemos tener distintas versiones de una misma imagen. En la p\u00e1gina del registro de WordPress veremos una pesta\u00f1a con el nombre Tags, con las versiones disponibles.</p> <p>Para usar una en concreto se usa dos puntos seguido del nombre de la versi\u00f3n. Si no se indica nada, como hasta ahora, por defecto se descarga la etiquetada como latest.</p> <p>Podemos descargar im\u00e1genes con la orden <code>docker pull</code>:</p> <pre><code>$ docker pull wordpress:latest\nlatest: Pulling from library/wordpress\nDigest: sha256:7121cdf8e9f01816653a3b2d2f4fc7bfe1dab956f00db5c7e7689e5f1454029a\nStatus: Image is up to date for wordpress:latest\n\n$ \u00a0docker pull wordpress:php7.1\nphp7.1: Pulling from library/wordpress\n802b00ed6f79: Already exists \n59f5a5a895f8: Already exists \n6898b2dbcfeb: Already exists \n8e0903aaa47e: Already exists \n2961af1e196a: Already exists \n71f7016f79a0: Already exists \n5e1a48e5719c: Already exists \n7ae5291984f3: Already exists \n725b65166f31: Already exists \na2d738459b49: Pull complete \n24830994a3eb: Pull complete \nb3807dc98c17: Pull complete \n59365c2968b5: Pull complete \n36bea53859bb: Pull complete \na777908b01b4: Pull complete \nbd3efa4fff20: Pull complete \n662f2add84f7: Pull complete \n4340a5e4d9f8: Pull complete \n2dbeaf456768: Pull complete \nDigest: sha256:2cc529d3d4ac538f8565d18a893bd1308d6f5522422f4696d87267695f69702c\nStatus: Downloaded newer image for wordpress:php7.1\n</code></pre> <p>En el primer caso no hay descarga porque esa versi\u00f3n ya estaba descargada, en la segunda nos descargamos la versi\u00f3n de la imagen que usa php7.1 en vez de php7.2</p>"},{"location":"Ud2%20Contenedores/_TallerUd7_04_images/#listado","title":"Listado","text":"<p>Para ver el listado de images disponibles usamos <code>docker images</code>:</p> <pre><code>$\u00a0docker images\nREPOSITORY   TAG     IMAGE ID      CREATED      SIZE\nwordpress    latest  ca0fefec932b  7 days ago   409MB\nwordpress    php7.1  37664bd9863e  7 days ago   400MB\nhello-world  latest  4ab4c602aa5e  2 weeks ago  1.84kB\n</code></pre>"},{"location":"Ud2%20Contenedores/_TallerUd7_04_images/#borrado","title":"Borrado","text":"<p>Si queremos dejar de usar alguna imagen usaremos <code>docker rmi</code>:</p> <pre><code>$\u00a0docker rmi wordpress:php7.1 \nUntagged: wordpress:php7.1\nUntagged: wordpress@sha256:2cc529d3d4ac538f8565d18a893bd1308d6f5522422f4696d87267695f69702c\nDeleted: sha256:37664bd9863efe67a83cb2ff293f1816a9b5f918668ae19ca36b2af3d3b9f62d\nDeleted: sha256:77c97f008777c89455c8e5f248a626b192b62cf07ed1993c9acdfab73be210ee\nDeleted: sha256:14f58345b0bb2efaede03f9424412dce141ea275343305a79952c9c8bda3d1ba\nDeleted: sha256:5902e2becea5be6d672e8a6a84cc66a2f3b8e1b209302a9995de2b9afac8535f\nDeleted: sha256:a5b592bce0a767eed15cce29e5e4a941341a0b8de1633ab8836079c03af31b9e\nDeleted: sha256:6cc2318a4f6975aa87358d9f2852d8b91b335515a1d42ef141af368ee0b6fc05\nDeleted: sha256:c3c8b98ead26315e76cd9625fd59f67cab81afa7810b84a229f4e612097a3db4\nDeleted: sha256:a641d6d5a4f43b035946f9a82c9f126189e8502567bb17c41d25e922a5b314a3\nDeleted: sha256:a7338078acb6f6e8b1a152dabd6e7e47b3e530e1f2e2169b8b69127c9578f8fe\nDeleted: sha256:8f416a21cdea7d5b42d6b799ab4ade2dffe1f6a3b9d83dd02be47a82699922de\nDeleted: sha256:53862f425fbc706f70bd1238a0e929bf6d648547481acfad4910c4c1bde39b95\n</code></pre> <p>Warning</p> <p>Si una imagen est\u00e1 en uso por alg\u00fan contenedor, no nos dejar\u00e1 eliminarla.</p> <pre><code>$\u00a0docker rmi hello-world:latest\nError response from daemon: conflict: unable to remove repository reference \"hello-world:latest\" (must force) - container 5ae8bbb8768d is using its referenced image 4ab4c602aa5e\n</code></pre>"},{"location":"Ud2%20Contenedores/_TallerUd7_05_containers/","title":"Contenedores","text":"<p>Los contenedores son instancias de las im\u00e1genes que hemos creado o hemos descargado que se ejecutan de forma aislada.</p>"},{"location":"Ud2%20Contenedores/_TallerUd7_05_containers/#listado","title":"Listado","text":"<p>La orden para ver el listado de contenedores del sistema es <code>docker container ls</code> o la forma abreviada <code>docker ps</code>. Si lo ejecutamos nos dar\u00e1 un listado vac\u00edo porque no hay ning\u00fan contenedor activo.</p> <p>Probemos con el par\u00e1metro <code>--all</code> o <code>-a</code>.</p> <p><pre><code>$ docker container ls -a\nCONTAINER ID  IMAGE        COMMAND     CREATED         STATUS      PORTS  NAMES\n4bd76e08b07f  wordpress    \"docker-\u2026\"  11 minutes ago  Exited (0)         peaceful_murdock\n69a3c34c224d  hello-world  \"/hello\"    18 minutes ago  Exited (0)         blissful_goldwasser\n</code></pre> Estos contenedores est\u00e1n parados y se pueden volver a ejecutar, con el mismo estado que tuviera el sistema de archivos cuando se detuvieron.</p>"},{"location":"Ud2%20Contenedores/_TallerUd7_05_containers/#ejecutar-comandos-dentro-de-un-contenedor","title":"Ejecutar comandos dentro de un contenedor","text":"<p>Ya hemos usado <code>docker run</code> para crear e iniciar un contenedor. Tambi\u00e9n podemos usar este comando para ejecutar programas que est\u00e9n dentro del contenedor. Por ejemplo:</p> <pre><code>docker run --name ubuntu_bash --rm -i -t ubuntu bash\n</code></pre> <p>Info</p> <p>Las primeras versiones de Docker eran m\u00e1s limitadas, respecto a la creaci\u00f3n de objetos. As\u00ed que sali\u00f3 con comandos como <code>docker start</code>, <code>docker stop</code>, etc. relacionados con los contenedores. Cuando surgieron m\u00e1s objetos no hab\u00eda consistencia entre los comandos de otros objetos (como <code>docker volumes ls</code>) y los de los contenedores.</p> <p>As\u00ed que se ha creado una jerarqu\u00eda nueva de subcomandos bajo el comando <code>container</code> que son equivalentes y se mantienen por compatibilidad:</p> Antiguo Nuevo <code>docker run</code> <code>docker container run</code> <code>docker start</code> <code>docker container start</code> <code>docker stop</code> <code>docker container stop</code> <code>docker rm</code> <code>docker container rm</code> <code>docker inspect</code> <code>docker container inspect</code> <code>docker exec</code> <code>docker container exec</code> <p>No hay m\u00e1s diferencia entre ellos que el nombre.</p> <p>Pero esta forma de ejecutar cosas, crea un nuevo contenedor. Si queremos ejecutar un comando en un contenedor que ya est\u00e9 iniciado, debemos usar <code>docker container exec</code>.</p> <p>Ejecuta lo siguiente en otro terminal (no cierres el anterior).</p> <pre><code>docker exec -w /tmp ubuntu_bash touch my_file.sh\n</code></pre> <p>El par\u00e1metro <code>-w</code> indica el directorio de trabajo, despu\u00e9s indicamos el contenedor donde queremos ejecutar el comando (<code>ubuntu_bash</code>) y por \u00faltimo el comando a ejecutar (<code>touch my_file.sh</code>).</p> <p>Si en el primer terminal ejecutamos un listado del directorio tmp:</p> <p><pre><code># ls /tmp\nmy_file.sh\n</code></pre> Vemos como podemos modificar un contenedor ya iniciado con <code>docker container exec</code>.</p> <p>Pulsa <code>Control+C</code> en el primer terminal para cerrar y borrar el contenedor.</p>"},{"location":"Ud2%20Contenedores/_TallerUd7_05_containers/#iniciar-un-contenedor","title":"Iniciar un contenedor","text":"<p>Con <code>docker container start</code> podemos iniciar un contenedor parado:</p> <p><pre><code>$ docker container start peaceful_murdock \npeaceful_murdock\n$ docker ps\nCONTAINER ID  IMAGE      COMMAND    CREATED         STATUS  PORTS                 NAMES\n4bd76e08b07f  wordpress  \"docker\u2026\"  14 minutes ago  Up      0.0.0.0:8080-&gt;80/tcp  peaceful_murdock\n</code></pre> Veremos que la web de instalaci\u00f3n de WordPress est\u00e1 de nuevo disponible. Solo que ahora el contenedor se ejecuta en segundo plano y no lo podemos detener como antes.</p>"},{"location":"Ud2%20Contenedores/_TallerUd7_05_containers/#detener-un-contenedor","title":"Detener un contenedor","text":"<p>Con <code>docker container stop</code> podemos detener un contenedor iniciado, indicando su id o su nombre</p> <pre><code>$ docker container stop 4bd76e08b07f\n4bd76e08b07f\n</code></pre> <p>Tip</p> <p>Podemos hacer referencia a los contenedores por su ID o por su nombre.</p>"},{"location":"Ud2%20Contenedores/_TallerUd7_05_containers/#borrar-un-contenedor","title":"Borrar un contenedor","text":"<p>Un contenedor detenido ocupa espacio. Si hemos dejado de necesitar un contenedor podemos borrarlo con <code>docker container rm</code>. Igualmente hay que indicar id o nombre.</p> <pre><code>$ docker container rm 4bd76e08b07f\n4bd76e08b07f\n</code></pre> <p>Danger</p> <p>Hay que tener cuidado al borrar contenedores. Cuando un contenedor se borra se elimina cualquier informaci\u00f3n que contenga y no est\u00e9 almacenada en alg\u00fan lugar externo al propio contenedor.</p>"},{"location":"Ud2%20Contenedores/Entrega2/P2_1_despliegueDocker_fase1/","title":"Pr\u00e1ctica P2 \u2013 Fase 1: Despliegue local con Docker y Visual Studio Code","text":"<p>Centro: IES El Camin\u00e0s M\u00f3dulo: Despliegue de Aplicaciones Web Curso: 2024/2025  </p>"},{"location":"Ud2%20Contenedores/Entrega2/P2_1_despliegueDocker_fase1/#objetivo-de-la-practica","title":"Objetivo de la pr\u00e1ctica","text":"<p>Aprender a crear, ejecutar y explorar un contenedor Apache en entorno local utilizando Docker y Visual Studio Code, comprendiendo la estructura interna del servidor web y el flujo b\u00e1sico de despliegue local.</p>"},{"location":"Ud2%20Contenedores/Entrega2/P2_1_despliegueDocker_fase1/#1-preparar-el-entorno-local","title":"1. Preparar el entorno local","text":"<pre><code>mkdir P2\ncd P2\ncode .\n</code></pre> <p>Esto abrir\u00e1 Visual Studio Code en la carpeta <code>P2</code>.</p>"},{"location":"Ud2%20Contenedores/Entrega2/P2_1_despliegueDocker_fase1/#2-crear-el-archivo-indexhtml","title":"2. Crear el archivo <code>index.html</code>","text":"<p>Crea un archivo llamado <code>index.html</code> con el siguiente contenido:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;title&gt;Pr\u00e1ctica P2 - Apache en Docker&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Alumno: Nombre del alumno&lt;/h1&gt;\n  &lt;p&gt;&lt;strong&gt;Curso:&lt;/strong&gt; 2\u00ba DAW&lt;/p&gt;\n  &lt;p&gt;&lt;strong&gt;Centro:&lt;/strong&gt; IES El Camin\u00e0s&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Ud2%20Contenedores/Entrega2/P2_1_despliegueDocker_fase1/#3-crear-el-archivo-dockerfile","title":"3. Crear el archivo <code>Dockerfile</code>","text":"<pre><code>FROM httpd:2.4\nRUN mkdir -p /usr/local/apache2/htdocs/P2\nCOPY index.html /usr/local/apache2/htdocs/P2/index.html\nRUN echo \"ServerName localhost\" &gt;&gt; /usr/local/apache2/conf/httpd.conf\n</code></pre> <p>Informaci\u00f3n</p> <p>La imagen oficial de Apache (<code>httpd:2.4</code>) no utiliza <code>/var/www/html</code> como las instalaciones cl\u00e1sicas de Apache en Linux. El directorio ra\u00edz del servidor web dentro del contenedor es <code>/usr/local/apache2/htdocs</code>.</p>"},{"location":"Ud2%20Contenedores/Entrega2/P2_1_despliegueDocker_fase1/#4-construir-la-imagen-docker","title":"4. Construir la imagen Docker","text":"<pre><code>docker build -t p2:1.0 .\n</code></pre> <p>Consejo</p> <p>El punto final (<code>.</code>) indica que el Dockerfile se encuentra en el directorio actual.</p>"},{"location":"Ud2%20Contenedores/Entrega2/P2_1_despliegueDocker_fase1/#5-ejecutar-el-contenedor-apache","title":"5. Ejecutar el contenedor Apache","text":"<pre><code>docker run -d --name p2 -p 8080:80 p2:1.0\n</code></pre> <p>Abre el navegador y accede a:</p> <pre><code>http://localhost:8080/P2\n</code></pre> <p>Resultado esperado</p> <p>Debe mostrarse tu p\u00e1gina <code>index.html</code> con tus datos personales.</p>"},{"location":"Ud2%20Contenedores/Entrega2/P2_1_despliegueDocker_fase1/#6-explorar-el-contenedor-en-visual-studio-code","title":"6. Explorar el contenedor en Visual Studio Code","text":"<ol> <li>Abre el panel Docker en VS Code (icono de la ballena).  </li> <li>Localiza el contenedor p2 en la secci\u00f3n Containers.  </li> <li>Clic derecho \u2192 Attach Visual Studio Code.  </li> <li>Navega hasta:    <pre><code>/usr/local/apache2/htdocs/P2/index.html\n</code></pre></li> <li>Abre el archivo y verifica que coincide con la p\u00e1gina servida en el navegador.</li> </ol> <p>Extensiones necesarias</p> <ul> <li>Docker (Microsoft)  </li> <li>Dev Containers (Microsoft)</li> </ul>"},{"location":"Ud2%20Contenedores/Entrega2/P2_1_despliegueDocker_fase1/#7-consultar-el-contenido-desde-el-terminal-opcional","title":"7. Consultar el contenido desde el terminal (opcional)","text":"<pre><code>docker exec -it p2 sh\ncd /usr/local/apache2/htdocs/P2\nls\ncat index.html\nexit\n</code></pre>"},{"location":"Ud2%20Contenedores/Entrega2/P2_1_despliegueDocker_fase1/#8-detener-y-eliminar-el-contenedor","title":"8. Detener y eliminar el contenedor","text":"<pre><code>docker stop p2\ndocker rm p2\n</code></pre>"},{"location":"Ud2%20Contenedores/Entrega2/P2_1_despliegueDocker_fase1/#9-resumen-de-comandos-utiles","title":"9. Resumen de comandos \u00fatiles","text":"<pre><code># Crear proyecto\nmkdir P2 &amp;&amp; cd P2\n\n# Crear imagen\ndocker build -t p2:1.0 .\n\n# Ejecutar contenedor\ndocker run -d --name p2 -p 8080:80 p2:1.0\n\n# Consultar contenido\ndocker exec -it p2 sh\n\n# Detener y eliminar\ndocker stop p2 &amp;&amp; docker rm p2\n</code></pre>"},{"location":"Ud2%20Contenedores/Entrega2/P2_1_despliegueDocker_fase1/#10-notas-finales","title":"10. Notas finales","text":"<p>Recordatorio</p> <ul> <li>El contenedor Apache usa la ruta <code>/usr/local/apache2/htdocs</code> como ra\u00edz del sitio web.  </li> <li>Si el puerto 80 est\u00e1 ocupado, cambia <code>-p 8080:80</code> por otro puerto libre (ej. <code>-p 8081:80</code>).  </li> <li>El aviso \u201cCould not reliably determine the server\u2019s fully qualified domain name\u201d no es un error y puede ignorarse.</li> </ul>"},{"location":"Ud2%20Contenedores/Entrega2/P2_1_despliegueDocker_fase1/#resultado-de-la-fase-1","title":"Resultado de la Fase 1","text":"<p>Al finalizar esta fase, el alumno habr\u00e1 creado una imagen Docker con Apache, ejecutado el contenedor localmente y comprobado su funcionamiento tanto desde el navegador como dentro de Visual Studio Code.</p>"},{"location":"Ud3%20Servidores%20web/P01/","title":"Pr\u00e1ctica 3.1 \u2013 Instalaci\u00f3n y configuraci\u00f3n de servidores web","text":""},{"location":"Ud3%20Servidores%20web/P01/#instalacion-servidor-web-nginx","title":"Instalaci\u00f3n servidor web Nginx","text":"<p>Vamos a instalar el servidor Nginx en una VM Debian en AWS. Crear una nueva EC2 con las siguientes caracter\u00edsticas:</p> <ul> <li>Nombre: servidorNginx</li> <li>SO: Debian</li> <li>Tipo de instancia: t2.micro</li> <li>Par de clave: el que usas habitualmente</li> <li>Grupo de seguridad:<ul> <li>crea uno nuevo y ll\u00e1male \"ServidorWeb\"</li> <li>de momento habilita solo acceso por SSH</li> </ul> </li> </ul> <p>Primero actualizamos los repositorios y actualizamos el sistema para despu\u00e9s instalar el paquete correspondiente: </p> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade\n\nsudo apt install nginx\n</code></pre> <p>Comprobamos que nginx se ha instalado y que est\u00e1 funcionando correctamente: </p> <pre><code>systemctl status nginx\n</code></pre> <p>Info</p> <p>Esta pr\u00e1ctica se ha hecho con Nginx 1.22.1-9</p>"},{"location":"Ud3%20Servidores%20web/P01/#comprobacion-de-la-instalacion","title":"Comprobaci\u00f3n de la instalaci\u00f3n","text":"<p>Igual que ocurre en Apache, todos los archivos que formar\u00e1n parte de un sitio web que servir\u00e1 nginx se organizar\u00e1n en carpetas. Estas carpetas, t\u00edpicamente est\u00e1n dentro de <code>/var/www</code>.</p> <p>Tras instalarlo podemos encontrar un ficher de muestra <code>/var/www/htm/index.nginx-debian.html</code> que nos permitir\u00e1 comprobar que el sistema est\u00e1 funcionando correctamente. Vamos a intentar acceder al servidor web instalado usando la IP p\u00fablica de la VM o bien la DNS de IPv4 p\u00fablica. Puedes obtenerlas en la consola de <code>Instancias</code> de AWS.</p> <p></p> <p>Haz clic en cualquiera de los enlaces o copia y pega en la barra de direcciones de tu navegador web. \u00bfConsigues acceder al servidor? \u00bfPor qu\u00e9 crees que ser\u00e1? Reflexiona brevemente antes de seguir leyendo.</p> <p>La respuesta es que el firewall de AWS est\u00e1 bloqueando los accesos. Si recuerdas, al configurar el \"Grupo de seguridad\" (firewall de AWS) le permitimos el acceso solo a SSH, pero no a HTTP ni a HTTPS. Vamos a hacerlo ahora. En la pesta\u00f1a seguridad busca \"Grupos de seguridad\" y observa c\u00f3mo s\u00f3lo el puerto 22 (ssh) est\u00e1 abierto como entrada. Haz click sobre el grupo de seguridad para editarlo.</p> <p></p> <p>En \"Reglas de entrada\" vamos a \"Editar reglas de entrada\"</p> <p></p> <p>Agrega nueva regla.</p> <p></p> <p>A\u00f1ade HTTP con origen \"Anywhere-IPv4\". Repite para HTTPS y \"Guarda reglas\"</p> <p></p> <p>Vuelve a intentar acceder al servidor haciendo clic sobre los enlaces en AWS. \u00bfPuedes acceder? Si no puedes, \u00bfpor qu\u00e9 crees que ser\u00e1? Comprueba el protocolo con el que est\u00e1s intentando acceder, \u00bfes http o https? Los enlaces en AWS intentan acceder al servidor usando https, pero no lo hemos activado todav\u00eda en nuestro servidor Nginx. Intenta acceder por http y si deber\u00edas acceder a la p\u00e1gina de muestra.</p> <p></p> <p>Comprueba que realmente est\u00e1s viendo la p\u00e1gina <code>/var/www/html/index.nginx-debian.html</code>. Editala para que muestre tu nombre en la bienvenida.</p> <p></p>"},{"location":"Ud3%20Servidores%20web/P01/#comprobar-registros-del-servidor","title":"Comprobar registros del servidor","text":"<p>Comprobad que las peticiones se est\u00e1n registrando correctamente en los archivos de logs, tanto las correctas como las err\u00f3neas: </p> <ul> <li> <p><code>/var/log/nginx/access.log</code>: cada solicitud a su servidor web se registra en este archivo de registro, a menos que Nginx est\u00e9 configurado para hacer algo diferente. </p> </li> <li> <p><code>/var/log/nginx/error.log</code>: cualquier error de Nginx se asentar\u00e1 en este registro.</p> </li> </ul> <p>Info</p> <p>Si no os aparece nada en los logs, podr\u00eda pasar que el navegador ha cacheado la p\u00e1gina web y que, por tanto, ya no est\u00e1 obteniendo la p\u00e1gina del navegador sino de la propia memoria. Para solucionar esto, pod\u00e9is acceder con el modo privado del navegador y ya os deber\u00eda registrar esa actividad en los logs.</p>"},{"location":"Ud3%20Servidores%20web/P01/#instalacion-servidor-web-apache","title":"Instalaci\u00f3n servidor web Apache","text":"<p>El otro servidor web con m\u00e1s presencia en el mercado es Apache en su versi\u00f3n Apache2.</p> <p>En esta pr\u00e1ctica crea una nueva EC2 en AWS con estas caracter\u00edsticas:</p> <ul> <li>Nombre: servidorApach</li> <li>SO: Debian</li> <li>Tipo de instancia: t2.micro</li> <li>Par de clave: el que usas habitualmente</li> <li>Grupo de seguridad: usa el que creaste para el servidor Nginx - \"ServidorWeb\"</li> </ul> <p>Atenci\u00f3n</p> <p>En AWS puedes reutilizar servicios, como un \"Grupo de seguridad\". En este caso tanto nuestro servidor Nginx como el Apache2 son servidores web a los que tendremos que abrir los mismos puertos, as\u00ed que podemos reutilizar el grupo de seguridad.</p> <p>En esta pr\u00e1ctica no te voy a guiar paso a paso. La instalaci\u00f3n es tan sencilla como <code>nginx</code> pero sustituyendo en los comandos <code>ngnix</code> por <code>apache2</code>. Instala y comprueba que el servicio est\u00e1 en marcha.</p> <p>Localiza el directorio donde Apache guarda las p\u00e1ginas web e identifica la p\u00e1gina que muestra por defecto tras la instalaci\u00f3n. Modif\u00edcala y comprueba el resultado.</p> <p></p>"},{"location":"Ud3%20Servidores%20web/P01/#instalacion-servidor-nginx-dockerizado","title":"Instalaci\u00f3n servidor Nginx dockerizado","text":""},{"location":"Ud3%20Servidores%20web/P01/#instalacion-a-partir-de-una-imagen-ubuntu","title":"Instalaci\u00f3n a partir de una imagen Ubuntu","text":"<p>Ahora ya sabemos instalar un servidor Nginx y crear un contenedor docker a partir de un Dockerfile. Vamos a crear un contenedor Docker a partir de una imagen Alpine instalando un servidor Nginx en su interior.</p> <p>Podr\u00edamos crear un contenedor Debian interactivo y ejecutar los comandos en su interior, pero ya aprendimos a crear un Dockerfile y hacerlo todo en un paso. As\u00ed pues, crearemos el siguiente Dockerfile:</p> <pre><code>FROM debian:latest\nMAINTAINER Jos\u00e9 Mu\u00f1oz &lt;j.munozjimeno@edu.gva.es&gt;\n\n# Actualizamos e instalamos Nginx\nRUN apt update &amp;&amp; apt upgrade -y &amp;&amp; apt install -y nginx &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\n# Exponemos el puerto 80\nEXPOSE 80\n\n# Comando para iniciar Nginx en primer plano\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n</code></pre> <p>F\u00edjate que: </p> <ul> <li>Usamos <code>rm -rf /var/lib/apt/lists/*</code> para limpiar el tama\u00f1o de la cach\u00e9 y reducir el tama\u00f1o de la imagen</li> <li>La l\u00ednea CMD [\"nginx\", \"-g\", \"daemon off;\"] asegura que Nginx se ejecute en primer plano, lo que es fundamental en Docker.</li> </ul> <p>Ahora podemos crear nuestra imagen nginx a partir del Dockerfile con:</p> <pre><code>docker build -t servernginx .\n</code></pre> <p>Y una vez creada la imagen crear un contenedor con:</p> <pre><code>docker run --name=miservernginx -d -p 80:80 servernginx\n</code></pre> <p>Ahora prueba a acceder al servidor nginx dockerizado con <code>http://IPSERVIDOR</code>. Recuerda que si est\u00e1s usando docker en tu m\u00e1quina host puedes usas <code>http://localhost</code> pero si lo tienes en AWS tendr\u00e1s que sustituir la IPSERVIDOR por la IP p\u00fablica de la EC2 y asegurar que el Grupo de seguridad de esa EC2 tenga una regla de entrada que permita el acceso al puerto http - 80 -.</p> <p>Para ahora y borra el contenedor creado:</p> <pre><code>docker stop miservernginx \n\ndocker rm miservernginx  \n</code></pre> <p>Recordemos del tema de docker que no deb\u00edamos mantener los datos persistentes en el contenedor y que es recomendable guardarlos en un volumen docker o en un directorio de nuestra m\u00e1quina host si son datos de desarrollo. Las p\u00e1ginas web entran dentro de esta segunda categor\u00eda, as\u00ed que crearemos en nuestra m\u00e1quina host un directorio para guardar las p\u00e1ginas web y montaremos el directorio /var/www/html del contenedor en dicho directorio.</p> <pre><code>mkdir -p ~/web\n</code></pre> <p>Incluye dentro de ~/web un fichero index.html que visualizaremos despu\u00e9s y que contendr\u00e1 lo siguiente:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Servidor dockerizado!&lt;/title&gt;\n&lt;style&gt;\nhtml { color-scheme: light dark; }\nbody { width: 35em; margin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Bienvendido al servidor web dockerizado!&lt;/h1&gt;\n&lt;p&gt; Este es un servidor web dockerizado &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Ahora lanza nuevamente el docker run con los siguientes par\u00e1metros:</p> <pre><code>docker run -d --name=miservernginx \\\n    --mount type=bind,source=/home/admin/web,target=/var/www/html \\\n    -p 80:80 \\\n    servernginx\n</code></pre> <p>Atenci\u00f3n</p> <p>En la opci\u00f3n --mount estamos montando el directorio /var/www/html en el directorio host /home/admin/web. Si tu usuario no es <code>admin</code> deber\u00e1s cambiarlo por tu nombre de usuario.</p> <p>Deber\u00edas ver el fichero creado:</p> <p></p>"},{"location":"Ud3%20Servidores%20web/P01/#instalacion-a-partir-de-la-imagen-oficial-de-nginx","title":"Instalaci\u00f3n a partir de la imagen oficial de Nginx","text":"<p>En el apartado anterior hemos levantado un servidor Nginx a partir de una imagen Debian y hemos realizado la instalaci\u00f3n como har\u00edamos en cualquier servidor linux.</p> <p>Pero en dockerhub encontramos una imagen docker oficial de Nginx que puede acelerar la tarea. Y simplificarla o complicarla, ahora lo veremos.</p> <p>La imagen oficial est\u00e1 aqu\u00ed.</p> <p>Vamos a intentar crear nuestro servidor Nginx dockerizado simplemente usando el mismo comando que antes y cambiando la imagen a usar. Recuerda que los archivos html a mostrar los tenermos en <code>~/web</code>.</p> <pre><code>docker run -d --name=miservernginx2 \\\n    --mount type=bind,source=/home/admin/web,target=/var/www/html \\\n    -p 80:80 \\\n    nginx:latest\n</code></pre> <p>F\u00edjate que hemos cambiado el nombre del servidor y la imagen que usamos. </p> <p>Parece que todo va bien. Ahora accede a <code>http://IPSERVER</code> y comprueba que ves lo siguiente:</p> <p></p> <p>No vemos lo que esperamos. Eso es porque la imagen nginx est\u00e1 mostrando un fichero html que no es <code>~/web/index.html</code>. Por tanto, estamos mapeando /var/www/html pero la imagen Nginx no busca las im\u00e1genes en ese directorio. Podr\u00edamos buscar el directorio que usa la imagen de varias formas. Una de ellas es consultar la informaci\u00f3n oficial de la imagen en DockerHub. En el apartado \"How to use this image\" - \"Hosting som simle static content\" nos dice que el uso b\u00e1sico es:</p> <p><code>docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx</code></p> <p>El par\u00e1metro -v realiza la misma funci\u00f3n que el  --mount que usamos nosotros anteriormente, montando un directorio local en uno del contenedor. Vemos que la segunda parte del par\u00e1metro es <code>/usr/share/nginx/html</code> y ese es el directorio que usa la imagen Nginx para guardar los archivos html. Por tanto, podemos crear nuestro contenedor as\u00ed:</p> <pre><code>docker run -d --name=miservernginx2 \\\n    --mount type=bind,source=/home/admin/web,target=/usr/share/nginx/html \\\n    -p 80:80 \\\n    nginx:latest\n</code></pre> <p>o bien, usando el par\u00e1metro -v que acabamos de aprender:</p> <pre><code>docker run -d --name=miservernginx2 \\\n    -v /home/admin/web:/usr/share/nginx/html:ro \\\n    -p 80:80 \\\n    nginx:latest\n</code></pre> <p>Vemos como le a\u00f1ade :ro al final para hacerlo \"read only\" y que el contenedor solo lea los archivos en nuestro directorio local, pero no pueda modificarlos.</p> <p>Comprueba si ahora el contenedor si est\u00e1 accediendo al directorio correcto y mostrando el archivo .html esperado.</p>"},{"location":"Ud3%20Servidores%20web/P01/#comprueba-lo-aprendido","title":"Comprueba lo aprendido.","text":"<p>Si has comprendido bien todo lo que hemos hecho hasta ahora no te ser\u00e1 dif\u00edcil lo que te voy a plantear a continuaci\u00f3n.</p> <p>Dockeriza un servidor Apache2 instalado en una m\u00e1quina Debian para que muestre los archivos en <code>~/web</code>.</p> <p>Pistas</p> <p>Primero configura el Dockerfile para crear una imagen llamada \"serverapache\" con el servidor apache2</p> <p>La l\u00ednea que lanza el servidor Apache2 en el Dockerfile es CMD [\"apache2ctl\", \"-D\", \"FOREGROUND\"]</p> <p>Crea un contenedor docker a partir de la imagen creada y comprueba que accedes a la web por defecto de Apache</p> <p>Cuando eso funcione borra el contenedor y vuelve a lanzarlo montando el directorio <code>~/web</code>. Ll\u00e1male \"miserverapache\".</p> <p>Una vez comprobado el funcionamiento para el contenedor \"miserverapache\".</p> <p>Ahora dockeriza un servidor apache como el anterior pero usando la imagen oficial de apache en dockerhub y ll\u00e1male \"miserverapache2\".</p> <p>Pistas</p> <p>El demonio de apache se llama <code>httpd</code>, as\u00ed que la imagen oficial de Apache 2 en dockerhub tiene ese mismo nombre.</p> <p>El comando es similar al que usaste para el servidor Nginx pero cambiando la ruta en la que el servidor apache2 buscar\u00e1 los archivos html. Podr\u00e1s encontrar la ruta en la documentaci\u00f3n de la imagen httpd en dockerhub.</p>"},{"location":"Ud3%20Servidores%20web/P02/","title":"Sitios virtuales","text":"<p>Un servidor web puede estar sirviendo varias p\u00e1ginas web que pueden pertenecer a varios usuarios. A cada una de ellas la denominaremos un \"sitio virtual\". Veamos c\u00f3mo podemos hacer que nuestro servidor sirva varias p\u00e1ginas.</p>"},{"location":"Ud3%20Servidores%20web/P02/#el-sitio-web-predeterminado","title":"El sitio web predeterminado","text":"<p>Cuando hemos instalado nuestro servidor web (sea Nginx o Apache2), se ha creado un sitio web predeterminado que se aloja en <code>/var/www/html</code>. Y si observamos sus permisos:</p> <pre><code>drwxr-xr-x  2 root root 4096 Oct 23 07:25 html\n</code></pre> <p>Por defecto esa carpeta y su contenido pertenecen a root y cualquiera puede entrar y leer. Esta es la configuraci\u00f3n m\u00e1s segura si nuestro servidor web solo va a leer archivos. Pero puede plantearnos problemas si el servidor va a permitir la subida de ficheros o la modificaci\u00f3n de archivos (por ejemplo a trav\u00e9s de un gestor de contenido como Wordpress)</p> <p>En el caso de Nginx, si ejecutamos un <code>ps -ef | grep nginx</code> observaremos 2 procesos:</p> <pre><code>root         415       1  0 18:13 ?        00:00:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;\nwww-data     417     415  0 18:13 ?        00:00:00 nginx: worker process\n</code></pre> <p>Nginx sigue un modelo multiproceso compuesto por un proceso \"master\" y uno o varios procesos \"workers\".</p> <ul> <li>Master: inicia y controla los procesos trabajadores. Su funci\u00f3n principal es leer la configuraci\u00f3n de Nginx, gestionar las se\u00f1ales del sistema, y encargarse de la creaci\u00f3n y supervisi\u00f3n de los procesos trabajadores. El usuario debe de ser root.</li> <li>Worker: son los que manejan las conexiones entrantes, procesan las solicitudes y sirven el contenido. El proceso trabajador se ejecuta bajo el usuario www-data (un usuario sin privilegios), lo que reduce el riesgo de seguridad al manejar conexiones de red.</li> </ul> <p>El usuario www-data pertenece al grupo www-data. La configuraci\u00f3n por defecto en la que <code>/var/www/html</code> pertecen a root es la m\u00e1s segura, pero hace necesario que sea el administrador o un usuario con privilegios (sudo) quien actualice los ficheros de la web. Lo normal es que sea un desarrollador o un usuario normal quien actualice esos ficheros. Por tanto, una pr\u00e1ctica com\u00fan es hacer que el directorio pertenezca al usuario www-data (o un usuario est\u00e1ndar del sistema) y al grupo www-data. Para ello podemos hacer lo siguiente:</p> <pre><code>sudo chown -R www-data:www-data /var/www/html\n</code></pre> <p>En cuanto a los ficheros del grupo es importante que tengan los siguientes permisos:</p> <ul> <li> <p>Ficheros: 644 Esto permite que el propietario tenga permisos de lectura y escritura, y el grupo (es decir, www-data) y otros usuarios tengan solo permisos de lectura.</p> <ul> <li><code>sudo chmod 644 /var/www/html/index.html</code></li> </ul> </li> <li> <p>Directorios: 755 para que el servidor web pueda leer el contenido y navegar dentro de los directorios.</p> <ul> <li><code>sudo chmod 755 /var/www/html/images</code></li> </ul> </li> </ul> <p>Comprueba los permisos del fichero <code>index.nginx-debian.html</code> y como el servidor sigue sirviendo la p\u00e1gina web sin problemas.</p>"},{"location":"Ud3%20Servidores%20web/P02/#el-sitio-web-virtual","title":"El sitio web virtual","text":"<p>Al crear nuevos sitios virtuales vamos a suponer que cada sitio puede pertenecer a un usuario diferente y que solo \u00e9l tendr\u00e1 acceso a modificar los ficheros de su web. Vamos a hacer un ejemplo en el que seremos administradores de un servidor web que presta servicio a usuarios externos. A cada usuario le crearemos un usuario y le daremos un espacio de alojamiento para su sitio web.</p> <p>Empezaremos creando un sitio virtual que llamaremos \"sitio1\" y ser\u00e1 propiedad de \"usuario1\".</p> <p>Crearemos el \"usuario1\" y haremos que su grupo sea www-data:</p> <pre><code>sudo useradd -m usuario1\nsudo usermod -g www-data usuario1\nsudo passwd usuario1    #Y le daremos passwd \"usuario1\"\n</code></pre> <p>En segundo lugar crearemos el espacio para el sitio virtual y le asignaremos el propietario y grupo correcto:</p> <pre><code>sudo mkdir -p /var/www/sitio1\nsudo chown usuario1:www-data /var/www/sitio1\n</code></pre> <p>Y le daremos los permisos adecuados seg\u00fan vimos anteriormente: </p> <pre><code>sudo chmod 755 /var/www/sitio1\n</code></pre> <p>Ahora hagamos que \"usuario1\" cree su primera p\u00e1gina web <code>index.html</code> en <code>/var/www/sitio1</code> entrando como \"usuario1\":</p> <pre><code>su usuario1\nnano /var/www/sitio1/index.html\n</code></pre> <p>Y copiamos el siguiente contenido</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Sitio1!&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Bienvendido al sitio1!&lt;/h1&gt;\n&lt;p&gt; Este es el sitio1 de usuario1&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Comprueba que los permisos del fichero son 644 como comentamos anteriormente, de forma que solo usuario1 puede modificarlo pero www-data podr\u00e1 leerlo.</p> <p>Ahora volvemos a nuestro usuario administrador para realizar las configuraciones en Nginx para poder visualizar ese sitio virtual.</p> <pre><code>exit\n</code></pre>"},{"location":"Ud3%20Servidores%20web/P02/#modificamos-la-configuracion","title":"Modificamos la configuraci\u00f3n","text":"<p>Los archivos de configuraci\u00f3n de nginx los podemos encontrar en <code>/etc/nginx</code>.</p> <p></p> <p>En Nginx hay dos rutas importantes. La primera de ellas es <code>sites-available</code>, que contiene los archivos de configuraci\u00f3n de los hosts virtuales o bloques disponibles en el servidor. Es decir, cada uno de los sitios webs que alberga el servido. La otra es <code>sites-enabled</code>, que contiene los archivos de configuraci\u00f3n de los sitios habilitados, es decir, los que funcionan en ese momento. </p> <p>Dentro de <code>sites-available</code> hay un archivo de configuraci\u00f3n por defecto (default), que es la p\u00e1gina que se muestra si accedemos al servidor sin indicar ning\u00fan sitio web o cuando el sitio web no es encontrado en el servidor (debido a una mala configuraci\u00f3n por ejemplo). Esta es la p\u00e1gina que nos ha aparecido en el apartado anterior. </p> <p>Para que Nginx presente el contenido de nuestra web, es necesario crear un bloque de servidor con las directivas correctas. En vez de modificar el archivo de configuraci\u00f3n predeterminado directamente, crearemos uno nuevo en <code>/etc/nginx/sites-available/nombre_web</code>: </p> <pre><code>sudo nano /etc/nginx/sites-available/sitio1\n</code></pre> <p>Y el contenido de ese archivo de configuraci\u00f3n: </p> <pre><code>server {\n        listen 80;\n        listen [::]:80;\n        root /var/www/sitio1;\n        index index.html index.htm index.nginx-debian.html;\n        server_name sitio1;\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n</code></pre> <p>Aqu\u00ed la directiva root debe ir seguida de la ruta absoluta d\u00f3nde se encuentre el archivo index.html de nuestra p\u00e1gina web.</p> <p>Y crearemos un archivo simb\u00f3lico entre este archivo y el de sitios que est\u00e1n habilitados, para que se d\u00e9 de alta autom\u00e1ticamente. </p> <pre><code>sudo ln -s /etc/nginx/sites-available/sitio1 /etc/nginx/sites-enabled/\nls -la /etc/nginx/sites-enabled/\n</code></pre> <p>Y reiniciamos el servidor para aplicar la configuraci\u00f3n: </p> <pre><code>sudo systemctl restart nginx\n</code></pre>"},{"location":"Ud3%20Servidores%20web/P02/#comprobacion-del-correcto-funcionamiento","title":"Comprobaci\u00f3n del correcto funcionamiento","text":"<p>Como a\u00fan no poseemos un servidor DNS que traduzca los nombres a IPs, debemos hacerlo de forma local en nuestro equipo. Vamos a editar el archivo <code>/etc/hosts</code> de nuestra m\u00e1quina anfitriona para que asocie la IP de la m\u00e1quina virtual, a nuestro <code>server_name</code>.</p> <p>Este archivo, en Linux, est\u00e1 en: <code>/etc/hosts</code></p> <p>Y en Windows: <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code></p> <p>Y deberemos a\u00f1adirle la l\u00ednea:</p> <p><code>IP_PUBLICA_SERVIDOR sitio1</code></p> <p>donde deb\u00e9is sustituir la IP_PUBLICA_SERVIDOR por la que tenga vuestra m\u00e1quina virtual. Si queremos tener varios dominios o sitios web en el mismo servidor nginx (es decir, que tendr\u00e1n la misma IP) debemos repetir todo el proceso anterior con el nuevo nombre de dominio que queramos configurar.</p> <p>Atenci\u00f3n</p> <pre><code>Recuerda dejar tu archivo `/etc/hosts` o ` C:\\Windows\\System32\\drivers\\etc\\hosts` cuando finalices las comprobaciones.\n</code></pre> <p>Si no tuvieras permisos en tu m\u00e1quina host puedes lanzar google chrome pas\u00e1ndole las DNS que quieres que aplique de la siguiente forma </p> <pre><code>google-chrome --host-resolver-rules=\"MAP midominio.com 123.45.67.89, MAP otrodominio.com 98.76.54.32\" --ignore-certificate-errors\n</code></pre> <p>En nuestro caso puedes usar lo siguiente sustituyendo IPSERVER por la IP p\u00fablica de nuestra EC2 en AWS.</p> <pre><code>google-chrome --host-resolver-rules=\"MAP sitio1 IPSERVER\" --ignore-certificate-error\n</code></pre>"},{"location":"Ud3%20Servidores%20web/P02/#cuestiones-finales","title":"Cuestiones finales","text":"<p>Cuesti\u00f3n 1</p> <p>\u00bfQu\u00e9 pasa si no hago el link simb\u00f3lico entre <code>sites-available</code> y <code>sites-enabled</code> de mi sitio web?</p> <p>Cuesti\u00f3n 2</p> <p>\u00bfQu\u00e9 pasa si no le doy los permisos adecuados a <code>/var/www/nombre_web</code>?</p>"},{"location":"Ud3%20Servidores%20web/P02/#practica","title":"Practica","text":"<p>Para ver si has comprendido bien la pr\u00e1ctica crea un segundo sitio virtual que llamar\u00e1s \"sitio2\" y que pertenezca al usuario \"usuario2\" y comprueba su funcionamiento.</p>"},{"location":"Ud3%20Servidores%20web/P02/#sitios-web-virtuales-en-apache2","title":"Sitios web virtuales en Apache2","text":"<p>En esta pr\u00e1ctica guiada hemos visto c\u00f3mo crear sitios web virtuales en Nginx. \u00bfSabr\u00edas tu crear sitios web virtuales en Apache2?</p> <p>Abre tu m\u00e1quina virtual EC2 de AWS que creamos como \"servidorApache\" y crea ah\u00ed 2 sitios web virtuales como los que hemos creado en Nginx:</p> <ul> <li>sitio1 perteneciente a usuario1</li> <li>sitio2 perteneciente a usuario2</li> </ul> <p>Pista1</p> <pre><code>En Apache2 hay 2 directorios que se llaman /etc/apache2/sites-available/ y /etc/apache2/sites-enabled/\n</code></pre> <p>Pista2</p> <pre><code>Un fichero de configuraci\u00f3n de sitio web en Apache2 tiene esta pinta:\n```\n&lt;VirtualHost *:80&gt;\n        ServerName sitiovirtual\n        DocumentRoot /var/www/sitiovirtual\n        &lt;Directory /var/www/sitiovirtual&gt;\n                AllowOverride All\n                Require all granted\n        &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n```\n</code></pre> <p>Pista3</p> <pre><code>En apache no hay que crear el enlace simb\u00f3lico manualmente. Hay que habilitar el sitio mediante un comando que habilita el nuevo sitio virtual y adem\u00e1s crea el enlace. Busca cu\u00e1l es ese comando.\n</code></pre>"},{"location":"Ud3%20Servidores%20web/P02/#sitios-virtuales-en-servidor-nginx-dockerizado","title":"Sitios virtuales en servidor Nginx dockerizado","text":"<p>Ya hemos creado un par de sitios virtuales sobre un servidor Nginx corriendo sobre una EC2 en AWS. Ahora vamos a hacer lo mismo pero sobre un servidor dockerizado. En la pr\u00e1ctica anterior ya creamos un servidor Nginx dockerizado, as\u00ed que aprovecharemos todo lo que hicimos en esa pr\u00e1ctica.</p> <p>Vamos a crear, en primer lugar, la estructura de directorios que necesitaremos en la m\u00e1quina que corre Docker. Dentro de nuestro home crearemos:</p> <pre><code>~\n\u251c\u2500\u2500 sitiosvirtuales/\n\u2502   \u251c\u2500\u2500 html\n\u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 sitio1\n\u2502       \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 nginxvirtual\n    \u251c\u2500\u2500 Dockerfile\n    \u251c\u2500\u2500 docker-compose.yaml\n    \u251c\u2500\u2500 entrypoint.sh\n    \u2514\u2500\u2500 sites-available\n        \u251c\u2500\u2500 default\n        \u2514\u2500\u2500 sitio1\n</code></pre> <p>En <code>sitiosvirtuales</code> incluiremos los ficheros html de nuestras p\u00e1ginas web. En <code>nginxvirtual</code> los ficheros que necesitaremos para la dockerizaci\u00f3n. En <code>sites-available</code> incluiremos los ficheros de configuraci\u00f3n tanto del sitio por defecto como de nuestro \"sitio1\". Puedes copiar ambos de la instalaci\u00f3n anterior sin docker.</p> <p>Veamos el docker-compose.yaml</p> <pre><code>services:\n    nginx:\n        build: .\n        volumes:\n            - ../sitiosvirtuales:/var/www\n            - ./sites-available:/etc/nginx/sites-available\n        ports:\n            - 80:80\n</code></pre> <p>Es importante destacar que lo primero que se montan son los volumenes. Por tanto, cuando arranquemos el contenedor ya leer\u00e1 el contenido de nuestros directorios en la m\u00e1quina host.</p> <p>Ahora vamos con el Dockerfile:</p> <pre><code>FROM debian:latest\nMAINTAINER Jos\u00e9 Mu\u00f1oz &lt;j.munozjimeno@edu.gva.es&gt;\n\n# Actualizamos e instalamos Nginx\nRUN apt update &amp;&amp; apt upgrade -y &amp;&amp; apt install -y nginx &amp;&amp; \\\n    rm -rf /var/lib/apt/lists/*\n\n# Copiar el script de arranque\nCOPY entrypoint.sh /entrypoint.sh\n\n# Hacer que sea ejecutable\nRUN chmod +x /entrypoint.sh\n\n# Exponemos el puerto 80\nEXPOSE 80\n\n# Establecer el script como el entrypoint\nENTRYPOINT [\"/entrypoint.sh\"]\n</code></pre> <p>La particularidad de este Dockerfile es que copia al interior de la imagen un fichero .sh y lo haremos ejecutable. Vemos que al final, en lugar de CMD hemos usado ENTRYPOINT. La diferencia es que CMD es el comando predeterminado, pero que puede sustituir por otro al lanzar el contenedor, pero ENTRYPOINT impide que se pueda lanzar otro comando y siempre lanzar\u00e1 ese. Es m\u00e1s estricto. Y vemos que lanzamos el comando entrypoint.sh. Eso nos permitir\u00e1 que cada vez que se arranque el contenedor se ejecute lo que contenga ese script. Vamos a ver qu\u00e9 contiene.</p> <p>entrypoint.sh</p> <pre><code>#!/bin/bash\n\n# Borraremos todos los enlaces que ya existan en sites-enabled para poderlos crear luego nuevamente\nrm -f /etc/nginx/sites-enabled/*\n\n# Crear enlaces simb\u00f3licos de todos los archivos en sites-available a sites-enabled\nfor file in /etc/nginx/sites-available/*; do\n    ln -s \"$file\" /etc/nginx/sites-enabled/ || true\ndone\n\n# Iniciar el servidor Nginx\nnginx -g \"daemon off;\"\n</code></pre> <p>Ten en cuenta que este script se ejecutar\u00e1 cada vez que se arranque el contenedor y, por tanto, se crear\u00e1n los enlaces simb\u00f3licos cada vez.</p> <p>Ahora prueba a levantar el servicio con </p> <p><code>docker-compose up -d</code></p> <p>Y realiza las comprobaciones de funcionamiento como en el caso anterior. Recuerda que deber\u00e1s modificar el fichero /etc/hosts de la m\u00e1quina desde la que usas el navegador.</p> <p>Cuando lo tengas, para el servicio con </p> <p><code>docker-compose down</code></p> <p>Y ahora hazlo tu mismo como antes. Crea un \"site2\" y levanta el servicio nuevamente. </p> <p>Ejercicio</p> <pre><code>\u00bfSer\u00edas capaz de levantar un Apache2 dockerizado que sirva los 2 sitios virtuales que has creado en `~/sitiosvirtuales/?\n</code></pre>"},{"location":"Ud3%20Servidores%20web/T01/","title":"Implantaci\u00f3n de arquitecturas web","text":""},{"location":"Ud3%20Servidores%20web/T01/#aspectos-generales-de-arquitecturas-web","title":"Aspectos generales de arquitecturas web.","text":"<p>La arquitectura de aplicaciones en entornos web difiere bastante de la de aplicaciones de escritorio, en la cual un programa se ejecuta directamente sobre la m\u00e1quina en la que trabaja el usuario.</p> <p>El modelo de arquitectura b\u00e1sico que existe en toda aplicaci\u00f3n web es el modelo llamado cliente-servidor, en el cual entran en juego diversas m\u00e1quinas o plataformas, cada una de las cuales desarrolla un rol diferenciado en la ejecuci\u00f3n de la aplicaci\u00f3n. Seg\u00fan las necesidades y la complejidad de la aplicaci\u00f3n, este modelo b\u00e1sico de arquitectura puede complicarse m\u00e1s o menos para lograr una mejor distribuci\u00f3n de tareas, mejor rendimiento, fiabilidad, aumento de la capacidad de proceso, etc.</p>"},{"location":"Ud3%20Servidores%20web/T01/#arquitecturas-web-modelos","title":"Arquitecturas web. Modelos","text":"<p>Una aplicaci\u00f3n distribuida est\u00e1 compuesta por una colecci\u00f3n de ordenadores aut\u00f3nomos enlazados por una red de ordenadores y respaldados por un software que hace el conjunto act\u00fae como un servicio integrado.</p>"},{"location":"Ud3%20Servidores%20web/T01/#el-modelo-cliente-servidor","title":"El modelo cliente-servidor","text":"<p>El modelo cliente-servidor es un modelo de arquitectura de aplicaciones en el cual se definen o se asignan principalmente dos roles a los ordenadores, que son, como el nombre del modelo indica, los roles de cliente y de servidor.</p> <p> Imagen: Lubaochuan, CC BY-SA 4.0 Wikimedia Commons</p> <p>En el modelo cliente-servidor, existen dos tipos de componentes:</p> <ul> <li> <p>Clientes: realizan peticiones de servicio. Por lo general, los clientes inician la comunicaci\u00f3n con el servidor.</p> </li> <li> <p>Servidores: proveen servicios. Normalmente, los servidores esperan recibir peticiones. Una vez que han recibido una petici\u00f3n, la resuelven y devuelven el resultado al cliente.</p> </li> </ul> <p>El modelo cliente-servidor b\u00e1sico de la figura anterior es v\u00e1lido para aplicaciones web peque\u00f1as, simples y que no tengan una gran carga de trabajo, es decir, un n\u00famero reducido de clientes conectados simult\u00e1neamente.</p> <p>En entornos reales, es com\u00fan que estas tres caracter\u00edsticas no est\u00e9n presentes, por lo que es necesario implementar una arquitectura m\u00e1s compleja pero tambi\u00e9n basada en el modelo cliente-servidor. Esta arquitectura puede presentar diferencias o extensiones al modelo b\u00e1sico para garantizar un buen rendimiento de las aplicaciones web, su fiabilidad y/o la capacidad de atender un gran n\u00famero de peticiones de los clientes de forma simult\u00e1nea en aplicaciones web de tama\u00f1o mediano o grande, y con un nivel de complejidad medio/alto. De esta necesidad surge el modelo siguiente.</p>"},{"location":"Ud3%20Servidores%20web/T01/#modelo-cliente-servidor-con-servidores-encadenados","title":"Modelo Cliente-Servidor con Servidores Encadenados","text":"<p>Cuando en una aplicaci\u00f3n el servidor debe realizar tareas muy complejas o costosas de procesar, se pueden distribuir subtareas en varios servidores. De esta manera, un servidor puede actuar como cliente de otro servidor para delegar ciertas responsabilidades.</p> <p> Imagen: Michel Bakni, CC BY-SA 4.0 Wikimedia Commons</p> <p>Por ejemplo, cuando un cliente de una entidad bancaria accede a los servicios en l\u00ednea de su banco a trav\u00e9s de un navegador web (cliente), el cliente inicia una solicitud al servidor web del banco. Las credenciales de inicio de sesi\u00f3n del cliente se almacenan en una base de datos y el servidor web accede a la base de datos como cliente. Un servidor de aplicaciones interpreta los datos devueltos aplicando la l\u00f3gica de negocios del banco y proporciona la salida al servidor web. Finalmente, el servidor web devuelve el resultado al navegador web del cliente para su visualizaci\u00f3n.</p>"},{"location":"Ud3%20Servidores%20web/T01/#aplicaciones-basadas-en-la-web","title":"Aplicaciones Basadas en la Web","text":"<p>Un caso particular de aplicaciones cliente-servidor son las aplicaciones que se ejecutan aprovechando la arquitectura web. Estas aplicaciones se basan en tener toda la capacidad de procesamiento en un servidor web (o conjunto de servidores) al que se accede desde un navegador web.</p> <p>Cuando un usuario hace clic en un enlace en una p\u00e1gina web de su navegador, este genera una solicitud al servidor que contiene la informaci\u00f3n. Una vez que el servidor recibe la solicitud, devuelve el contenido. La comunicaci\u00f3n entre el cliente y el servidor se realiza a trav\u00e9s del protocolo HTTP.</p>"},{"location":"Ud3%20Servidores%20web/T01/#modelo-peer-to-peer-p2p","title":"Modelo Peer-to-Peer (P2P)","text":"<p>Existe un tipo de arquitectura en la cual todas las computadoras act\u00faan simult\u00e1neamente como clientes y servidores. Estas redes se conocen como redes peer-to-peer (igual a igual).</p> <p> Imagen: The 360 Degree, CC BY-SA 4.0 Wikimedia Commons</p> <p>Un sistema peer-to-peer se caracteriza por ser un sistema distribuido en el cual todos los nodos tienen las mismas capacidades y responsabilidades, es decir, todos son clientes y servidores al mismo tiempo, lo que implica que toda la comunicaci\u00f3n es sim\u00e9trica.</p>"},{"location":"Ud3%20Servidores%20web/T01/#servidores-web-y-de-aplicaciones-instalacion-y-configuracion-basica","title":"Servidores web y de aplicaciones. Instalaci\u00f3n y configuraci\u00f3n b\u00e1sica","text":"<p>Durante las fases de desarrollo, puesta en producci\u00f3n y mantenimiento de una aplicaci\u00f3n web, nos encontramos con varios tipos de servidores que llevan a cabo tareas espec\u00edficas en el funcionamiento global.</p>"},{"location":"Ud3%20Servidores%20web/T01/#servidores-web","title":"Servidores web","text":"<p>Un servidor web es un servidor que permite el acceso a recursos a trav\u00e9s del protocolo HTTP (Protocolo de Transferencia de Hipertexto) de internet.</p> <p>La definici\u00f3n original y estricta del concepto de servidor HTTP se refiere a aquellos servidores capaces de proporcionar acceso y permitir la gesti\u00f3n de un conjunto de recursos est\u00e1ticos como respuesta a las peticiones recibidas de los clientes. Es decir, que permiten consultar, cargar y eliminar recursos del servidor. Estos recursos suelen ser documentos HTML o variantes de este formato y contenidos adjuntos o relacionados con estos documentos, como im\u00e1genes, videos, etc.</p> <p>Estos recursos suelen estar guardados en forma de archivos en dispositivos de almacenamiento propios del servidor.</p> <p>El concepto original de servidor web no contempla la posibilidad de generar de forma din\u00e1mica los contenidos a partir de la ejecuci\u00f3n de c\u00f3digo como respuesta a las peticiones. Sin embargo, en la actualidad, la mayor\u00eda de los servidores web admiten la instalaci\u00f3n de m\u00f3dulos que permiten generar contenidos din\u00e1micos a partir de la ejecuci\u00f3n de programas escritos en diversos lenguajes de programaci\u00f3n (PHP, JavaScript, Python, Perl, etc.), aunque esta caracter\u00edstica es m\u00e1s propia de los servidores de aplicaciones.</p> <p>Algunos ejemplos de servidores web son Apache o Nginx, para sistemas operativos Linux, y Microsoft Internet Information Server, para Windows.</p>"},{"location":"Ud3%20Servidores%20web/T01/#servidores-de-aplicaciones","title":"Servidores de aplicaciones","text":"<p>Un servidor de aplicaciones, en general, es un servidor que ofrece a los clientes un servicio de ejecuci\u00f3n de aplicaciones. Si nos centramos en las aplicaciones web, un servidor de aplicaciones es un software que controla la ejecuci\u00f3n de programas. Los clientes, desde un navegador (usando el protocolo HTTP), acceden a una interfaz web desde donde ejecutar\u00e1n la aplicaci\u00f3n. Normalmente, los servidores de aplicaciones se utilizan en aplicaciones web con un alto grado de complejidad.</p> <p>Un servidor de aplicaciones web se puede entender como un servidor orientado a la ejecuci\u00f3n de programas que puede recibir las peticiones de servicio y devolver los resultados utilizando los mismos protocolos (HTTP) y formatos de datos que los servidores web (HTML). Si el mismo servidor no tiene la capacidad de interactuar con estos protocolos, puede trabajar conjuntamente con el soporte de un servidor web que haga de intermediario entre el servidor de aplicaciones y el cliente. Los servidores de aplicaciones, adem\u00e1s, suelen proporcionar un amplio conjunto de servicios complementarios orientados a la persistencia de datos, seguridad, control de transacciones y concurrencia, entre otros.</p> <p>Algunos ejemplos de servidores de aplicaciones son GlassFish (servidor Java EE, Oracle), Tomcat o Microsoft Internet Information Server (servidor .NET).</p>"},{"location":"Ud3%20Servidores%20web/T01/#servidores-de-bases-de-datos","title":"Servidores de bases de datos","text":"<p>Un servidor de bases de datos se utiliza para almacenar, recuperar y administrar los datos de una base de datos. El servidor gestiona las actualizaciones de datos, permite el acceso simult\u00e1neo de muchos servidores o usuarios web y garantiza la seguridad y la integridad de los datos.</p> <p>Entre sus funciones b\u00e1sicas, el software de servidores de bases de datos ofrece herramientas para facilitar y acelerar la administraci\u00f3n de bases de datos. Algunas funciones son la exportaci\u00f3n de datos, la configuraci\u00f3n del acceso de usuarios y el soporte de datos.</p> <p>Algunos ejemplos de servidores de bases de datos son Oracle Database, MySQL, Microsoft SQL Server, PostgreSQL, MongoDB o Firebase.</p>"},{"location":"Ud3%20Servidores%20web/T01/#servidores-de-archivos","title":"Servidores de archivos","text":"<p>Un servidor de archivos es un servidor que permite gestionar a trav\u00e9s de red la carga, descarga, actualizaci\u00f3n y eliminaci\u00f3n de archivos almacenados en sus dispositivos desde computadoras cliente.</p> <p>En el \u00e1mbito de las aplicaciones web, los servidores de archivos se utilizan principalmente para implementar las aplicaciones en el servidor donde se ejecutar\u00e1n. La implementaci\u00f3n de una aplicaci\u00f3n web en los servidores de producci\u00f3n generalmente implica la carga de grandes cantidades de archivos en estos servidores. Dado que el desarrollo y mantenimiento de estas aplicaciones se realiza en las m\u00e1quinas de los programadores, se necesita un sistema de transferencia de archivos cada vez que se quiere actualizar la versi\u00f3n de producci\u00f3n de una aplicaci\u00f3n.</p> <p>Uno de los protocolos m\u00e1s utilizados para la transferencia de archivos en la implementaci\u00f3n de aplicaciones web es el protocolo FTP (Protocolo de Transferencia de Archivos), con sus variantes FTPS y SFTP para adaptarse a las necesidades actuales de seguridad.</p> <p>Algunos ejemplos de servidores de transferencia de archivos son ProFTPD o vsftpd, para sistemas operativos Linux, y Microsoft Internet Information Server, para Windows.</p>"},{"location":"Ud3%20Servidores%20web/T01/#servidores-de-directorio","title":"Servidores de directorio","text":"<p>Un servidor de directorio es un servidor que permite gestionar informaci\u00f3n administrativa sobre el entorno de una aplicaci\u00f3n web, como pueden ser, por ejemplo, los usuarios autorizados con sus roles o permisos, etc.</p> <p>La utilidad principal de los servidores de directorio es facilitar la gesti\u00f3n de informaci\u00f3n relacionada con la explotaci\u00f3n de aplicaciones web. La ventaja de gestionar esta informaci\u00f3n mediante este tipo de servidores es la centralizaci\u00f3n de datos y la facilidad de acceso mediante protocolos est\u00e1ndar como LDAP.</p> <p>Algunos ejemplos de servidores de directorio son OpenLDAP, para Linux, y Active Directory, para Windows.</p>"},{"location":"Ud3%20Servidores%20web/T01/#estructura-y-recursos-de-una-aplicacion-web","title":"Estructura y Recursos de una Aplicaci\u00f3n Web","text":"<p>Las aplicaciones web, adem\u00e1s de presentar una arquitectura cliente-servidor (hecho que no es necesario en el caso de las aplicaciones de escritorio), suelen estar estructuradas con una gran cantidad de archivos y recursos de diferentes tipos.</p> <p>Por esta raz\u00f3n, es necesario establecer directrices para organizar la ubicaci\u00f3n de estos componentes y su interrelaci\u00f3n durante la fase de desarrollo, as\u00ed como tambi\u00e9n al momento de poner la aplicaci\u00f3n en producci\u00f3n. De lo contrario, el desarrollo y mantenimiento de una aplicaci\u00f3n de tama\u00f1o mediano o grande se convertir\u00e1 en una tarea casi imposible de gestionar.</p> <p>Dejando de lado la organizaci\u00f3n o estructura impuesta por la elecci\u00f3n de ciertas herramientas de desarrollo o un servidor web o de aplicaciones espec\u00edfico, estas aplicaciones se pueden estructurar seg\u00fan varios modelos de organizaci\u00f3n de sus componentes y recursos. Algunos de los modelos de estructuraci\u00f3n de aplicaciones web que podemos encontrar m\u00e1s com\u00fanmente son los que se describen a continuaci\u00f3n.</p>"},{"location":"Ud3%20Servidores%20web/T01/#arquitectura-multinivel","title":"Arquitectura Multinivel","text":"<p>La arquitectura multinivel (multitier architecture) es un tipo espec\u00edfico de la arquitectura cliente-servidor en la cual los componentes y recursos de una aplicaci\u00f3n se separan seg\u00fan su funci\u00f3n. Una de las divisiones m\u00e1s utilizadas es la que separa el nivel de presentaci\u00f3n, el nivel de l\u00f3gica de aplicaci\u00f3n y el nivel de gesti\u00f3n de datos.</p> <p>En este caso, la estructura concreta ser\u00eda de tres niveles (3-tier architecture). El modelo se define como N-tier architecture (multinivel), ya que propone una divisi\u00f3n flexible de las aplicaciones en los niveles que sean necesarios para hacer m\u00e1s eficiente su desarrollo, mantenimiento y explotaci\u00f3n.</p> <p>En este modelo, la divisi\u00f3n por niveles se realiza de forma lineal: el nivel 1 interact\u00faa de forma directa y \u00fanica con el nivel 2, el nivel 2 interact\u00faa con el 3, y as\u00ed sucesivamente.</p> <p> Imagen: No machine-readable author provided. Master Will assumed (based on copyright claims)., Dominio p\u00fablico Wikimedia Commons</p> <p>Warning</p> <p>Es importante diferenciar entre el concepto de multinivel (multitier o N-tier) y multicapa (multilayer o N-layer). En el caso del modelo multinivel, se considera que cada nivel, adem\u00e1s de implementar una funci\u00f3n concreta, es ejecutado por un hardware diferente al del resto de los niveles. En el modelo multicapa, cada capa desarrolla una funci\u00f3n concreta que puede ser ejecutada por una misma computadora que se encarga tambi\u00e9n de la ejecuci\u00f3n de otras capas.</p>"},{"location":"Ud3%20Servidores%20web/T01/#arquitectura-modelo-vista-controlador","title":"Arquitectura Modelo-Vista-Controlador","text":"<p>La arquitectura Modelo-Vista-Controlador (Model-View-Controller o MVC) es una arquitectura que separa la representaci\u00f3n de la informaci\u00f3n y la l\u00f3gica de una aplicaci\u00f3n de la interacci\u00f3n del usuario.</p> <p>Los tres elementos que definen esta arquitectura son:</p> <ul> <li>Modelo: Contiene los datos de la aplicaci\u00f3n, las reglas de negocio o la l\u00f3gica de la aplicaci\u00f3n y sus funciones.</li> <li>Vista: Es la representaci\u00f3n visible de la aplicaci\u00f3n, la salida de los datos hacia el usuario, es decir, la interfaz.</li> <li>Controlador: Controla la interacci\u00f3n del usuario (entrada de datos) y convierte esta interacci\u00f3n en \u00f3rdenes o comandos para el modelo o la vista.</li> </ul> <p>La interrelaci\u00f3n entre los elementos de esta arquitectura no sigue un modelo lineal como el modelo multinivel, sino que se trata de un modelo circular.</p> <p> Imagen: Behnam Esfahbod, CC BY-SA 3.0 Wikimedia Commons</p> <p>Paralelamente a la estructura de la aplicaci\u00f3n, es necesario considerar que cada nivel, capa o m\u00f3dulo puede estar compuesto por un gran n\u00famero de componentes y recursos de diversos tipos: archivos HTML, CSS, im\u00e1genes, etc.</p> <p>Por ello, es conveniente establecer un sistema de organizaci\u00f3n coherente y eficiente para estructurar todos estos componentes que se generan durante el desarrollo de una aplicaci\u00f3n web. La mayor\u00eda de las plataformas de desarrollo avanzadas imponen mecanismos para organizar y describir de manera sistem\u00e1tica la ubicaci\u00f3n, caracter\u00edsticas y configuraci\u00f3n de los componentes y recursos de las aplicaciones.</p> <p>Entre estos mecanismos, se destacan dos:</p>"},{"location":"Ud3%20Servidores%20web/T01/#estructura-de-directorios","title":"Estructura de Directorios","text":"<p>Las plataformas avanzadas de desarrollo de aplicaciones web suelen definir una estructura de directorios m\u00ednima que toda aplicaci\u00f3n debe tener, a partir de la cual se despliegan los diferentes tipos de componentes. Los desarrolladores deben seguir las directrices de cada plataforma.</p>"},{"location":"Ud3%20Servidores%20web/T01/#descriptor-de-despliegue","title":"Descriptor de Despliegue","text":"<p>Existe un archivo de configuraci\u00f3n en el cual se puede especificar el nombre, ubicaci\u00f3n y par\u00e1metros de configuraci\u00f3n de los diferentes componentes que conforman una aplicaci\u00f3n. Esto permite tener dicha informaci\u00f3n centralizada, accesible y actualizable sin necesidad de modificar el c\u00f3digo fuente de la aplicaci\u00f3n. Este descriptor describe c\u00f3mo se debe desplegar la aplicaci\u00f3n en el servidor.</p>"},{"location":"Ud3%20Servidores%20web/T01/#plataformas-web-libres-y-propietarias","title":"Plataformas Web libres y propietarias","text":"<p>Una plataforma web es el entorno de desarrollo de software empleado para dise\u00f1ar y ejecutar un sitio web. En t\u00e9rminos generales, una plataforma web consta de cuatro componentes b\u00e1sicos:</p> <ol> <li>Sistema operativo: Bajo el cual opera el equipo donde se hospedan las p\u00e1ginas web y que representa la base misma del funcionamiento del computador. En ocasiones limita la elecci\u00f3n de otros componentes.</li> <li>Servidor web: El software que maneja las peticiones desde equipos remotos a trav\u00e9s de la Internet. En el caso de p\u00e1ginas est\u00e1ticas, el servidor web simplemente provee el archivo solicitado, el cual se muestra en el navegador. En el caso de sitios din\u00e1micos, el servidor web se encarga de pasar las solicitudes a otros programas que puedan gestionarlas adecuadamente.</li> <li>Gestor de bases de datos: Se encarga de almacenar sistem\u00e1ticamente un conjunto de registros de datos relacionados para ser usados posteriormente.</li> <li>Lenguaje de programaci\u00f3n interpretado: Controla las aplicaciones de software que corren en el sitio web.</li> </ol> <p>Diferentes combinaciones de los cuatro componentes se\u00f1alados, basadas en las distintas opciones de software disponibles en el mercado, dan lugar a numerosas plataformas web, aunque, sin duda, hay dos que sobresalen del resto por su popularidad y difusi\u00f3n: LAMP y WISA.</p>"},{"location":"Ud3%20Servidores%20web/T01/#plataforma-lamp","title":"Plataforma LAMP","text":"<p>La plataforma LAMP trabaja enteramente con componentes de software libre y no est\u00e1 sujeta a restricciones propietarias. El nombre LAMP surge de las iniciales de los componentes de software que la integran:</p> <ul> <li>Linux: sistema operativo.</li> <li>Apache: servidor web.</li> <li>MySQL: gestor de bases de datos.</li> <li>PHP: lenguaje interpretado PHP, aunque a veces se sustituye por Perl o Python.</li> </ul>"},{"location":"Ud3%20Servidores%20web/T01/#plataforma-wisa","title":"Plataforma WISA","text":"<p>La plataforma WISA est\u00e1 basada en tecnolog\u00edas desarrolladas por la compa\u00f1\u00eda Microsoft; se trata, por lo tanto, de software propietario. La componen los siguientes elementos:</p> <ul> <li>Windows: sistema operativo.</li> <li>Internet Information Services (IIS): servidor web.</li> <li>SQL Server: gestor de bases de datos.</li> <li>ASP o ASP.NET: como lenguaje para scripting del lado del servidor.</li> </ul>"},{"location":"Ud3%20Servidores%20web/T01/#otras-plataformas","title":"Otras plataformas","text":"<p>Existen otras plataformas, como por ejemplo la configuraci\u00f3n WAMP (Windows-Apache-MySQL-PHP), que es bastante com\u00fan pero s\u00f3lo como plataforma de desarrollo local. De forma similar, un servidor Windows puede correr con IIS y con MySQL y PHP. A esta configuraci\u00f3n se la conoce como plataforma WIMP.</p> <p>Entre los servidores web m\u00e1s utilizados hoy en d\u00eda, aparte de Apache e IIS, tenemos tambi\u00e9n a Nginx, un servidor web software libre que est\u00e1 demostrando un alto rendimiento. Nginx es capaz de atender una gran cantidad de peticiones simult\u00e1neas y tiene un mejor rendimiento que sus competidores al servir contenido est\u00e1tico. Sin embargo, su configuraci\u00f3n es menos flexible que otros.</p> <p>Nginx tambi\u00e9n puede integrarse con PHP, dando lugar a plataformas tipo LNMP (Linux + Nginx + MySQL o MariaDB + PHP). Esta opci\u00f3n es tambi\u00e9n posible en Windows, dando lugar a plataformas WNMP (Windows + Nginx + MySQL o MariaDB + PHP).</p> <p>Existen muchas otras plataformas que trabajan con distintos sistemas operativos (Unix, MacOS, Solaris), servidores web (incluyendo algunos que se han cobrado relativa popularidad como Lighttpd y LiteSpeed), bases de datos (MariaDB, PostgreSQL, MongoDB) y otros lenguajes de programaci\u00f3n.</p> <p>XAMPP: XAMPP es una forma f\u00e1cil de instalar y usar el servidor web Apache con un sistema gestor de bases de datos (MariaDB), PHP y Perl. Basta con descargarlo, extraerlo y comenzar. En este momento hay cuatro versiones de XAMPP para Linux, Windows, Mac OS X y Solaris.</p>"},{"location":"Ud3%20Servidores%20web/T01/#escalabilidad","title":"Escalabilidad","text":"<p>Las aplicaciones web se ejecutan en un entorno donde el n\u00famero de clientes que solicitan el servicio puede variar en gran medida en funci\u00f3n del momento. Es por ello que hay una caracter\u00edstica de esencial importancia como es la escalabilidad.</p> <p>En el entorno en que se ubican las aplicaciones web, uno de los principales factores que puede afectar al rendimiento de las mismas es el n\u00famero de usuarios, ya que este puede verse incrementado de forma vertiginosa en un periodo de tiempo relativamente corto. El \u00e9xito o el fracaso de un sitio web orientado al usuario com\u00fan vendr\u00e1 determinado, entre otros aspectos, por el dimensionamiento del sistema sobre el que se instala y soporta el software que sustenta dicho sitio. En consecuencia, uno de los requisitos fundamentales de una aplicaci\u00f3n web es que sea completamente escalable sin que un aumento de los recursos dedicados a la misma suponga modificaci\u00f3n alguna en su comportamiento o capacidades.</p>"},{"location":"Ud3%20Servidores%20web/T01/#escalabilidad-de-un-sistema-web","title":"Escalabilidad de un sistema web","text":"<p>La escalabilidad de un sistema web puede ser:</p> <ul> <li>Verticalmente: de manera ascendente \"upgrades\" a cada nodo.</li> <li>Horizontalmente: consiste en aumentar el n\u00famero de nodos.</li> <li>Cluster: consiste en crear agrupaciones de servidores.</li> </ul>"},{"location":"Ud3%20Servidores%20web/T01/#escalabilidad-vertical","title":"Escalabilidad vertical","text":"<p>Habitualmente, la separaci\u00f3n l\u00f3gica en capas se implementa de tal forma que se permita una separaci\u00f3n f\u00edsica de las mismas. Interponiendo elementos conectores que act\u00faen de \"middlewares\" es posible distribuir la aplicaci\u00f3n de forma vertical (una m\u00e1quina por cada capa del sistema), e incluso si esto no fuera suficiente, distribuyendo los elementos de una misma capa entre distintas m\u00e1quinas servidoras.</p>"},{"location":"Ud3%20Servidores%20web/T01/#escalabilidad-horizontal","title":"Escalabilidad horizontal","text":"<p>Se trata de clonar el sistema en otra m\u00e1quina de caracter\u00edsticas similares y balancear la carga de trabajo mediante un dispositivo externo. El balanceador de carga puede ser:</p> <ul> <li> <p>Balanceador Software: Por ejemplo, es com\u00fan encontrar un servidor web Apache junto con el m\u00f3dulo <code>mod_jk</code>, que permite redirigir las solicitudes HTTP configuradas entre las diferentes m\u00e1quinas que conforman la granja de servidores. Estos balanceadores examinan el paquete HTTP e identifican la sesi\u00f3n del usuario, registrando qu\u00e9 m\u00e1quina de la granja est\u00e1 atendiendo dicha sesi\u00f3n. Esto es crucial, ya que nos permite dise\u00f1ar la aplicaci\u00f3n teniendo en cuenta el objeto de sesi\u00f3n del usuario y almacenar informaci\u00f3n relevante de la sesi\u00f3n del mismo. Con esta garant\u00eda, todas las peticiones de una misma sesi\u00f3n HTTP se redirigen a la misma m\u00e1quina.</p> </li> <li> <p>Balanceador hardware: Son dispositivos que, siguiendo algoritmos de reparto de carga (como Round Robin, LRU - Menos Usado Recientemente, etc.), redirigen una solicitud HTTP del usuario a la m\u00e1quina que corresponde seg\u00fan dicho algoritmo. Estos son m\u00e1s r\u00e1pidos que los anteriores, ya que se basan en conmutaci\u00f3n de circuitos y no examinan ni interpretan el paquete HTTP. Sin embargo, no aseguran el mantenimiento de la misma sesi\u00f3n de usuario en la misma m\u00e1quina. Esto condiciona el dise\u00f1o, ya que obliga a almacenar la informaci\u00f3n de sesi\u00f3n del usuario por parte del desarrollador, en cookies o en una base de datos.</p> </li> <li> <p>Balanceador hardware HTTP: Son dispositivos hardware que examinan el paquete HTTP y mantienen la relaci\u00f3n entre el usuario y la m\u00e1quina servidora. Son m\u00e1s r\u00e1pidos que los balanceadores software, pero ligeramente menos que los balanceadores hardware. Hoy en d\u00eda, representan una de las soluciones m\u00e1s aceptadas en el mercado.</p> </li> </ul> <p>Cluster:</p> <p>Con la introducci\u00f3n de servidores de aplicaciones en cluster se abre una nueva capacidad de escalabilidad que puede clasificarse como vertical u horizontal, dependiendo de su implementaci\u00f3n. Un cluster de servidores de aplicaciones permite desplegar una aplicaci\u00f3n web convencional, distribuyendo su carga de trabajo entre la granja de servidores del cluster. Esto ocurre de manera transparente tanto para el usuario como para el administrador. Mediante el mecanismo de replicaci\u00f3n de sesi\u00f3n, el cluster garantiza que sin importar cu\u00e1l m\u00e1quina atienda la solicitud HTTP, esta tendr\u00e1 acceso a la sesi\u00f3n del usuario (objeto HttpSession en Java). Sin embargo, debido a la replicaci\u00f3n de sesi\u00f3n, este tipo de sistemas suele presentar problemas de rendimiento.</p>"},{"location":"Ud3%20Servidores%20web/T01/#referencias","title":"Referencias","text":"<p>IOC - Institut obert de Catalunya</p> <p>https://apuntes-daw.javiergutierrez.trade/despliegue-de-aplicaciones/ut1/recopila.html</p>"},{"location":"Ud3%20Servidores%20web/T02/","title":"Arquitectura Web. Implantaci\u00f3n y administraci\u00f3n de servidores web","text":""},{"location":"Ud3%20Servidores%20web/T02/#introducion","title":"Introduci\u00f3n","text":"<p>Con la evoluci\u00f3n y el acceso libre a Internet, uno de los principales alicientes que han surgido es la publicaci\u00f3n de p\u00e1ginas web donde se pueden mostrar contenidos atractivos que pueden ser consultados desde cualquier del mundo por cualquier persona. </p> <p>Cabe decir que, con la popularizaci\u00f3n de Internet, tanto empresas como usuarios han visto la necesidad de establecer un punto desde donde anunciar sus productos, o bien, a t\u00edtulo particular, dar publicidad a las aficiones o capacidades personales mediante la publicaci\u00f3n de p\u00e1ginas personales. </p> <p>Las p\u00e1ginas web, en su mayor\u00eda en formato HTML, requieren ser alojadas en m\u00e1quinas que dispongan de espacio en disco para almacenar archivos HTML, im\u00e1genes, bloques de c\u00f3digo o archivos de v\u00eddeo en directorios espec\u00edficos y, al mismo tiempo, deben ser capaces de entender todo tipo de extensi\u00f3n de los archivos que son enviados en ambos sentidos de la comunicaci\u00f3n. </p> <p></p> <p>Paralelamente, no podemos dejar de lado la importancia de las medidas de seguridad ante los peligros existentes en Internet. Para ello, las p\u00e1ginas deber\u00e1n estar dise\u00f1adas considerando la incorporaci\u00f3n de protocolos de comunicaci\u00f3n seguros como, por ejemplo, los desarrollados con el protocolo seguro de transferencia de hipertexto (HTTPS, Hyper Text Transfer Protocol secure) que utilizan claves y estrategias de cifrado propias de las herramientas del protocolo de capa de conexi\u00f3n segura (SSL, secure sockets layer). </p> <p>Las m\u00e1quinas que alojan las p\u00e1ginas web reciben la categor\u00eda de servidores web. Desde el punto de vista de los servidores, los requerimientos m\u00e1s relevantes son el espacio de disco necesario para poder almacenar la estructura de la p\u00e1gina web y una buena conexi\u00f3n de red. </p> <p>En cuanto a la capacidad de procesamiento, el funcionamiento de los servidores web es especial, ya que tienen consumos de recursos muy bajos durante un tiempo, porque pueden no estar recibiendo peticiones y, de repente, tener una avalancha de peticiones que les haga consumir muchos recursos puntualmente. Por eso se dice que tienen un consumo de recursos en forma de \"diente de sierra\". Esto hace que los servidores web suelan tener un n\u00famero bajo de procesos en espera. A medida que resultan necesarios, se van arrancando nuevos. </p> <p>Cabe decir que no todas las peticiones consumen lo mismo, y, por ejemplo, aquellas p\u00e1ginas web que ejecuten programas de interacci\u00f3n con el usuario o requieran cifrado (HTTPS) consumen m\u00e1s recursos que otras p\u00e1ginas web est\u00e1ticas. </p>"},{"location":"Ud3%20Servidores%20web/T02/#que-es-un-servidor-web","title":"\u00bfQu\u00e9 es un servidor web?","text":"<p>Los servidores web sirven para almacenar contenidos de Internet y facilitar su disponibilidad de forma constante y segura. Cuando visitas una p\u00e1gina web desde tu navegador, es en realidad un servidor web el que env\u00eda los componentes individuales de dicha p\u00e1gina directamente a tu ordenador. Esto quiere decir que para que una p\u00e1gina web sea accesible en cualquier momento, el servidor web debe estar permanentemente online. </p> <p></p> <p>Toda p\u00e1gina accesible en Internet necesita un servidor especial para sus contenidos web. A menudo, las grandes empresas y organizaciones cuentan con un servidor web propio para disponer sus contenidos en Intranet e Internet. Sin embargo, la mayor\u00eda de administradores recurren a los centros de datos de proveedores de alojamiento web para sus proyectos. Y cada vez m\u00e1s la tendencia es a usar servicios \"cloud\" que nos proporcionen los servicios requeridos sin necesidad de instalar, gestionar y mantener el HW asociado.</p> <p>Independientemente de si tienes un servidor web propio o de si alquilas uno externo, siempre necesitar\u00e1s un software para gestionar los datos de tu p\u00e1gina y mantenerla actualizada. En este sentido, tienes la posibilidad de elegir entre varias soluciones de software para servidores web dise\u00f1adas para diferentes aplicaciones y sistemas operativos. </p>"},{"location":"Ud3%20Servidores%20web/T02/#tecnologia-de-servidores-web","title":"Tecnolog\u00eda de servidores web","text":"<p>Principalmente, el software de un servidor HTTP es el encargado de proporcionar los datos para la visualizaci\u00f3n del contenido web. </p> <p>Para abrir una p\u00e1gina web, el usuario solo tiene que escribir el URL correspondiente en la barra de direcciones de su navegador web. El navegador env\u00eda una solicitud al servidor web, quien responde, por ejemplo, entregando una p\u00e1gina HTML. Esta puede estar alojada como un documento est\u00e1tico en el host o ser generada de forma din\u00e1mica, lo que significa que el servidor web tiene que ejecutar un c\u00f3digo de programa (p. ej., Java o PHP) antes de tramitar su respuesta. </p> <p>El navegador interpreta la respuesta, lo que suele generar autom\u00e1ticamente m\u00e1s solicitudes al servidor a prop\u00f3sito de, por ejemplo, im\u00e1genes integradas o archivos CSS (hojas de estilos). </p> <p></p> <p>El protocolo utilizado para la transmisi\u00f3n es HTTP (o su variante cifrada HTTPS), que se basa, a su vez, en los protocolos de red IP y TCP (y muy rara vez en UDP). Un servidor web puede entregar los contenidos simult\u00e1neamente a varios ordenadores o navegadores web. La cantidad de solicitudes (requests) y la velocidad con la que pueden ser procesadas depende, entre otras cosas, del hardware y la carga (n\u00famero de solicitudes) del host. Sin embargo, la complejidad del contenido tambi\u00e9n juega un papel importante: los contenidos web din\u00e1micos necesitan m\u00e1s recursos que los contenidos est\u00e1ticos. </p> <p></p> <p>La selecci\u00f3n del equipo adecuado para el servidor y la decisi\u00f3n de si este debe ser dedicado, virtual o en la nube, se debe hacer pensando siempre en evitar sobrecargas en el servidor. Aunque se haya encontrado un servidor web que se adapta perfectamente a las necesidades del proyecto, siempre se corre el riesgo de que se presenten fallos en \u00e9l como consecuencia de imprecisiones t\u00e9cnicas o cortes de energ\u00eda en el centro de datos del host. Aunque no es muy frecuente, durante un per\u00edodo de inactividad de este tipo (downtime), la web no estar\u00e1 disponible. </p>"},{"location":"Ud3%20Servidores%20web/T02/#otras-funciones-de-los-servidores-web","title":"Otras funciones de los servidores web","text":"<p>Aunque su principal funci\u00f3n es la transferencia de contenido web, muchos programas de servidor web ofrecen caracter\u00edsticas adicionales: </p> Seguridad Cifrado de la comunicaci\u00f3n entre el servidor web y el cliente v\u00eda HTTPS Autenticaci\u00f3n del usuario Autenticaci\u00f3n HTTP para \u00e1reas espec\u00edficas de una aplicaci\u00f3n web Redirecci\u00f3n Redirecci\u00f3n de una solicitud de documento por medio de Rewrite Engine Cach\u00e9 Almacenamiento en cach\u00e9 de documentos din\u00e1micos para la respuesta eficiente de solicitudes y para evitar una sobrecarga del servidor web Asignaci\u00f3n de cookies Env\u00edo y procesamiento de cookies HTTP <p>Adem\u00e1s del software del servidor, un host puede contener otro tipo de programas, como por ejemplo un servidor FTP para la carga de archivos o un servidor de base de datos para contenidos din\u00e1micos. En general, existen diferentes tipos de servidores web que pueden ser utilizados para numerosos prop\u00f3sitos, por ejemplo, los servidores de correo, los servidores de juegos o los servidores proxy. </p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P01/","title":"Pr\u00e1ctica 1 - Acceso a un servidor FTP p\u00fablico ftp.rediris.es","text":""},{"location":"Ud5%20Servicios%20de%20red%20FTP/P01/#objetivo","title":"Objetivo.","text":"<p>Conectarse a un servidor p\u00fablico utilizando los comandos b\u00e1sicos de ftp y descargar un archivo.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P01/#acceso-en-modo-comando","title":"Acceso en modo comando.","text":"<p>Vamos a conectarnos a un servidor FTP p\u00fablico desde una ventana de comando de tu sistema operativo.</p> <ul> <li>Abre un terminal cmd en Linux</li> <li>PowerShell en Windows</li> <li>Terminal en Mac OS X</li> </ul> <p>Utiliza el comando ftp, esto har\u00e1 que entres dentro del servidor ftp de tu ordenador y visualiza los comandos ftp disponibles en tu m\u00e1quina con el comando help.</p> <p>Note</p> <p>Si en Mac OSX no tienes el comando <code>ftp`` disponible puedes instalarlo con</code>brew install lftp<code>y usar el comando</code>lftp` en su lugar.</p> <pre><code>ftp\n</code></pre> <pre><code>help\n</code></pre> <p></p> <p>Vamos a conectar con una red p\u00fablica como es ftp.rediris.es con el usuario an\u00f3nimo, por lo que no hace falta registrarse con ning\u00fan usuario, pulsamos intro cuando nos pida el usuario. </p> <p><pre><code>open ftp.rediris.es\n</code></pre> </p> <p>Posteriormente vamos listar el contenido de archivo y directorios y accederemos a la carpeta /debian/doc para descargar el archivo constitution.txt, para ello sigue las indicaciones siguientes </p> <p><pre><code>get constitution.txt\n</code></pre> </p> <p>Para comprobar que se ha descargado correctamente, salimos del servidor ftp y listamos los archivos de nuestra m\u00e1quina. Donde podemos observar que el archivo se ha descargado correctamente. <pre><code>quit\n</code></pre> </p> <p>Warning</p> <p>En definitiva los permisos del usuario an\u00f3nimo en un servidor ftp se establecer\u00e1n para que solamente pueda moverse por los directorios y descargar archivos, nunca subirlos, esto es, normalmente el usuario an\u00f3nimo no podr\u00e1 crear ni eliminar ficheros y directorios.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P01/#acceso-desde-cliente-grafico","title":"Acceso desde cliente gr\u00e1fico.","text":"<p>Vamos a ver ahora c\u00f3mo acceder a un servidor FTP desde un cliente gr\u00e1fico. Usaremos FileZilla por tratarse de un SW de c\u00f3digo abierto y disponible para todos los sistemas operativos m\u00e1s utilizados.</p> <p>Abre Filezilla y ver\u00e1s el entorno similar a este.</p> <p></p> <p>Ahora vamos a conectarnos a ftp.rediris.es. Prueba a hacer una conexi\u00f3n r\u00e1pida poniendo el servidor y usuario \"anonymous\" e intenta conectarte. Observa los mensajes que obtienes. \u00bfHas podido conectarte? \u00bfSabes por qu\u00e9 no puedes?</p> <p>Si miras bien los mensajes ver\u00e1s que has llegado al servidor, has autenticado pero obtienes un error que dice <code>Error: Se ha recibido una alerta TLS del servidor: Handshake failed (40)</code></p> <p>El motivo es que el FTP plano, sin cifrado, no es la opci\u00f3n por defecto y la conexi\u00f3n r\u00e1pida est\u00e1 intentando usar cifrado TSL.</p> <p>As\u00ed que vamos a crear una conexi\u00f3n avanzada.</p> <p></p> <p>Ahora crea un \"Nuevo sitio\" sin cifrado como en la imagen.</p> <p></p> <p>Acepta los mensajes que te previenen de usar FTP sin cifrado. Comprueba en los mensajes que has podido conectarte al servidor.</p> <p></p> <p>En la parte izquierda de la pantalla tendr\u00e1s un navegador que te permitir\u00e1 moverte por la estructura de directorios de tu equipo local. En la derecha podr\u00e1s moverte por el sitio remoto.</p> <p>Selecciona ahora en la izquierda donde quieres descargarte el archivo y en la derecha busca <code>/debian/doc/constitution.txt</code> como hicimos por comando.</p> <p>Haz doble clic sobre el archivo para descargarlo. Tambi\u00e9n puedes hacer clic con el bot\u00f3n derecho y \"Descargar\".</p> <p>Comprueba c\u00f3mo se descarga tu archivo.</p> <p>Para finalizar la conexi\u00f3n selecciona el icono de desconectar.</p> <p></p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P01/#conclusion","title":"Conclusi\u00f3n","text":"<p>En esta pr\u00e1ctica has aprendido a conectarte a un servidor FTP y descargarte archivos tanto por comando como con un programa gr\u00e1fico.</p> <p>A partir de ahora configuraremos el servidor, pero necesitar\u00e1s hacer pruebas desde el cliente para probar las distintas configuraciones.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P02/","title":"Pr\u00e1ctica 2 - Instalar y Configurar el servidor vsFTPd sin cifrado.","text":"<p>En esta pr\u00e1ctica, aprenderemos c\u00f3mo instalar y configurar un servidor FTP usando vsFTPd en un servidor basado en Debian. En esta primera pr\u00e1ctica configuraremos el servidor como FTP sin cifrado. Es una manera de configuraci\u00f3n insegura que usaremos solo desde un punto de vista did\u00e1ctico.</p> <p>Informaci\u00f3n b\u00e1sica sobre el servidor vsFTPd (Very Secure FTP Daemon):</p> <p>Hoy en d\u00eda existe una amplia gama de servidores FTP de c\u00f3digo abierto, como FTPD, vsFTPd, PROFTPD y pureftpd. Entre todos ellos, vsFTPd es un protocolo muy seguro, r\u00e1pido y el m\u00e1s utilizado para transferir archivos entre dos sistemas. vsFTPd tambi\u00e9n se conoce como \u00abDemonio de Protocolo de Transferencia de Archivos Muy Seguro\u00bb con soporte de SSL, IPv6, FTPS expl\u00edcito e impl\u00edcito.</p> <p>Archivos y directorios que se crean en el sistema:</p> <ul> <li>El archivo <code>/etc/init.d/vsftpd</code> es el script de inicio en sistemas basados en Linux que permite administrar el servicio vsftpd, a trav\u00e9s de  tareas como iniciar, detener, reiniciar y administrar el servicio de FTP. Por ejemplo un comando para iniciar el servicio en Ubuntu ser\u00eda este: <code>systemctl start vsftpd</code> , entre otros (stop, restart, reload, status).</li> <li>El archivo <code>/usr/sbin/vsftpd</code> este archivo es el binario principal que se utiliza para iniciar y ejecutar el servidor vsFTPd. Es responsable de escuchar en el puerto FTP (por lo general, el puerto 21) y gestionar las conexiones de los clientes FTP. Este archivo lee la configuraci\u00f3n del archivo <code>/etc/vsftpd.conf</code> al iniciarse para personalizar el comportamiento del servidor FTP. </li> <li>El archivo <code>/etc/vsftpd.conf</code> es el archivo de configuraci\u00f3n principal del servidor vsFTPd donde se especifican numerosos par\u00e1metros de configuraci\u00f3n que controlan el comportamiento y la seguridad del servidor FTP.</li> <li>El directorio <code>/srv/ftp</code> este directorio ra\u00edz por defecto del servidor FTP, que se utiliza para organizar y administrar los archivos y directorios que est\u00e1n disponibles para los usuarios que se conectan al servidor FTP. Es donde se alojar\u00e1n los archivos para usuarios an\u00f3nimos (accesos an\u00f3nimos) sino se indica lo contrario en la configuraci\u00f3n.</li> <li>El archivo <code>/etc/ftpusers</code> tiene como funci\u00f3n denegar el acceso a ciertos usuarios, evitando que puedan autenticarse y utilizar los servicios de FTP.</li> <li>El archivo <code>/etc/vsftpd.user_list</code> se utiliza para controlar el acceso permitido a un grupo espec\u00edfico de usuarios. Este archivo no se instala, por lo cual hay que crearlo antes de comenzar a trabajar con la configuraci\u00f3n.</li> <li>El archivo <code>/etc/vsftpd.chroot_list</code> tiene como prop\u00f3sito principal controlar qu\u00e9 usuarios pueden ser \"encarcelados\" en sus respectivos directorios de inicio (chroot) cuando se conectan al servidor FTP.</li> <li>El archivo <code>/var/log/vsftpd.log</code> es un archivo de registro \u00fatil para el monitoreo, la soluci\u00f3n de problemas y la auditor\u00eda de actividades en el servidor FTP.</li> </ul> <p>Para m\u00e1s informaci\u00f3n puedes consultar la comunidad vsFTPd : https://help.ubuntu.com/community/vsftpd</p> <p>Vamos a empezar a trabajar. </p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P02/#creamos-una-instancia-aws","title":"Creamos una instancia AWS","text":"<p>Vamos a instalar el servidor vsFTPd en una VM Debian en AWS. Crear una instancia nueva que llamar\u00e1s P4-vsFTPd</p> <p>A\u00f1ade una Regla de Entrada: En la pesta\u00f1a \"Reglas de entrada\", debes a\u00f1adir una regla para permitir el tr\u00e1fico en el puerto FTP que necesitas. </p> <ul> <li>Para FTP no cifrado (puerto 21), crea una regla con el protocolo TCP y el puerto 21.</li> <li>Para FTPS o SFTP con cifrado (puerto 22), tambi\u00e9n crea una regla con el protocolo TCP y el puerto 22.</li> </ul> <p>Aseg\u00farate de especificar la fuente del tr\u00e1fico, lo que puede ser tu propia direcci\u00f3n IP si deseas acceder al servidor FTP desde tu ubicaci\u00f3n actual o cualquier otra fuente si deseas permitir el acceso desde cualquier lugar (ten en cuenta que esto puede ser menos seguro).</p> <p></p> <p>Ahora vamos a instalar y configurar vsFTPd para el acceso de usuarios locales (es decir, usuarios que existen en el sistema operativo donde est\u00e1 instalado el servidor FTP), que solo podr\u00e1n acceder a su carpeta de usuarios (chroot). Adem\u00e1s les permitiremos subir ficheros.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P02/#paso-1-instalacion-del-servidor-vsftpd","title":"Paso 1. Instalaci\u00f3n del servidor vsFTPd","text":"<p>En primer lugar, actualizaremos los repositorios de Ububtu y a continuaci\u00f3n instalaremos el servidor vsFTPd :</p> <pre><code>sudo apt-get update &amp;&amp; sudo apt-get upgrade\nsudo apt-get install vsftpd\n</code></pre> <p>Se crea el usuario ftp dentro del fichero /etc/passwd, y el grupo ftp en /etc/group del Servidor Linux. Puedes comprobarlo visualizando ambos ficheros.</p> <pre><code>cat /etc/passwd\ncat /etc/group\n</code></pre> <p>Para comprobar que el servidor se ha iniciado comprobamos que el servicio est\u00e1 en marcha:</p> <pre><code>systemctl status vsftpd\n</code></pre> <p>Tambi\u00e9n podr\u00edamos comprobar que el proceso vsftpd est\u00e1 funcionando.</p> <p><pre><code>ps -ef | grep vsftpd\n</code></pre> Vemos que aparecen el proceso con el archivo de configuraci\u00f3n  /etc/vsftpd.conf y el archivo ejecutable principal del servidor FTP vsFTPd /usr/sbin/vsftpd </p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P02/#paso-2-configuramos-usuario-de-pruebas","title":"Paso 2. Configuramos usuario de pruebas.","text":"<p>Recordamos de la teor\u00eda que el servidor FTP puede configurarse para que lo usen 3 tipos distintos de usuarios:</p> <ol> <li>Usuario an\u00f3nimo</li> <li>Usuarios locales (del sistema)</li> <li>Usuarios virtuales (independientes de los del sistema y creados por el administrador)</li> </ol> <p>En este m\u00f3dulo de Despliegue de aplicaciones nos interesa usar FTP para subir nuestros ficheros al servidor donde est\u00e1 alojado nuestro servidor web o servidor de aplicaciones, as\u00ed que no nos interesa mucho configurar el usuario an\u00f3nimo. Nos centraremos en trabajar con usuarios locales, que nos ofrece la funcionalidad que necesitamos.</p> <p>Empezaremos por crear un usuario que llamaremos <code>userftp</code> y que utilizaremos el resto de la pr\u00e1ctica para transacciones FTP. Utilizando este usuario iniciaremos la sesi\u00f3n en el servidor FTP m\u00e1s adelante. Estableceremos como contrase\u00f1a \"ieselcaminas\".</p> <pre><code>sudo adduser userftp\n</code></pre>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P02/#paso-3-configuracion-del-servidor-vsftpd","title":"Paso 3. Configuraci\u00f3n del servidor vsFTPd","text":"<p>Ahora repasaremos algunas configuraciones importantes para que vsFTPd funcione. Para ello buscamos el archivo de configuraci\u00f3n y guardamos una copia de \u00e9l por si acaso: </p> <p><pre><code>sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.backup\n</code></pre> Comienza abriendo el archivo de configuraci\u00f3n.</p> <pre><code>sudo nano /etc/vsftpd.conf\n</code></pre> <p>Ahora vamos a ir probando distintas configuraciones y veremos c\u00f3mo afectan a la funcionalidad.</p> <p>1. Acceso FTP a usuarios locales</p> <p>En este tutorial, permitiremos el acceso FTP solo a los usuarios locales y deshabilitaremos cualquier acceso an\u00f3nimo. Esta es la configuraci\u00f3n por defecto cuando instalamos vsftpd. Comprueba estas 2 l\u00edneas en el fichero <code>/etc/vsftpd.conf</code></p> <pre><code>  anonymous_enable=NO #(1)\n  local_enable=YES #(2)\n</code></pre> <ol> <li>No permitimos el acceso an\u00f3nimo</li> <li>Permitimos el acceso de los usuarios del sistema</li> </ol> <p>Guarda el fichero, y reinicia el servicio vsftpd para habilitar la configuraci\u00f3n realizada.</p> <p><pre><code>sudo systemctl restart vsftpd\n</code></pre> A continuaci\u00f3n, aseg\u00farate de que el servicio vsftpd est\u00e1 en su estado de ejecuci\u00f3n ejecutando el siguiente comando en el Terminal:</p> <pre><code>sudo systemctl status vsftpd\n</code></pre> <p>Recuerda para volver al prompt , debes pulsar q  </p> <p>Prueba a conectarte con el usuario <code>userftp</code> con tu cliente FTP. </p> <p></p> <p>Atenci\u00f3n</p> <p>Si tienes problemas con la conexi\u00f3n recuerda que FTP tiene 2 modos, activo y pasivo y que en funci\u00f3n de la configuraci\u00f3n del firewall de servidor y cliente puede ser m\u00e1s adecuado uno que otro.</p> <p>2. Habilitar modo de conexi\u00f3n activa/pasiva </p> <p>VSFTPD usa el modo activo de FTP de manera predeterminada, lo que puede causar problemas de conexi\u00f3n cuando los clientes de FTP usan el modo pasivo en su lugar. Lo que podemos hacer es habilitar en el Cliente FTP la opci\u00f3n de conexi\u00f3n activa o habilitar en nuestro servidor vsftpd el modo pasivo, como se realiza en la pr\u00e1ctica siguiente.</p> <p>Una vez ya te has conectado al servidor prueba a moverte por los distintos directorios del equipo  \u00bfTienes alguna restricci\u00f3n? \u00bfPuedes acceder a cualquier directorio? \u00bfHas probado a acceder a /root? \u00bfTe puedes descargar /etc/vsftpd.conf? \u00bfPuedes subir un archivo de tu equipo local a /home/userftp en el servidor?</p> <p>3. Habilitar la carga de archivos</p> <p>Lo m\u00e1s probable es que la respuesta a la \u00faltima pregunta fuera no. Por defecto la carga de ficheros al servidor est\u00e1 deshabilitada. El prop\u00f3sito singular m\u00e1s importante de FTP aqu\u00ed es poder escribir en el servidor. Descomenta la siguiente l\u00ednea para habilitar la carga de archivos eliminando # delante de ella.</p> <pre><code>  write_enable=YES\n</code></pre> <p>Reinicia nuevamente el servidor. Prueba a cargar en /home/userftp el archivo /etc/vsftpd.conf que intentaste descargaste antes. \u00bfAhora puedes? \u00bfY con qu\u00e9 permisos se carga el fichero en la carpeta?</p> <p>Prueba a cargarlo en /etc. \u00bfPuedes? \u00bfPor qu\u00e9 no?</p> <p>4. Permisos de los archivos subidos</p> <p>Al subir el fichero vsftpd.conf a /home/userftp los permisos son estos, \u00bfverdad?</p> <p><code>-rw-------</code> o dicho en octal <code>600</code>.</p> <p>Si buscas en el fichero de configuraci\u00f3n ver\u00e1s que habla de \"umask\" y dice esto</p> <pre><code># Default umask for local users is 077. You may wish to change this to 022,\n# if your users expect that (022 is used by most other ftpd's)\n#local_umask=022\n</code></pre> <p>Nos dice que umask es 077, pero los permisos del fichero que hemos subido son 600. \u00bfQu\u00e9 pasa aqu\u00ed? Los permisos por defecto al subir un fichero son 666 (rw-rw-rw- o 110110110) y a esos permisos se les hace un AND con la m\u00e1scara definida con umask \u00a1pero negada! Si la umask es 077 (---rwxrwx o 000111111) y la negamos obtenemos 700=111000000. Si hacemos el AND obtenemos:</p> <pre><code>110110110 = 666\n111000000 = 700\n---------\n110000000 = 600\n</code></pre> <p>Y aqu\u00ed tenemos el 600 o rw------- que nos hab\u00eda salido antes. </p> <p>En los servidores FTP lo habitual es que la umask sea 022. \u00bfQu\u00e9 permisos tendr\u00e1 un fichero al subirlo con esa m\u00e1scara?</p> <p>Prueba a descomentar esta l\u00ednea, reinicia el servicio, sube un fichero a <code>/home/userftp</code> y compru\u00e9ba sus permisos. Esto ser\u00e1 importante para cuando subas una p\u00e1gina web al servidor web usando FTP. Recuerda que los ficheros necesitaban unos permisos concretos para que pudieran visualizarse.</p> <p>5. C\u00e1rcel de Chroot para los usuarios locales</p> <p>Como vimos antes el usuario, al conectarse por FTP pod\u00eda navegar por todo el sistema de archivos. Esto no es muy recomendado y podemos hacer el usuario que est\u00e1 restringido a un directorio determinado.  El servidor vsFTPd logra eso usando chroot jails, de manera que cuando chroot est\u00e1 habilitado para usuarios locales, estos usuarios est\u00e1n restringidos a sus directorios de inicio de forma predeterminada. Para lograr esto, cambiamos la configuraci\u00f3n con las propiedades siguientes:</p> <p><pre><code>chroot_local_user=YES\n</code></pre> Para evitar cualquier vulnerabilidad de seguridad, cuando chroot est\u00e1 habilitado, no funcionar\u00e1 si el directorio ra\u00edz al que se conectan los usuarios es escribible. Por tanto, si no hacemos nada m\u00e1s e intentamos conectarnos veremos que no nos deja, ya que <code>userftp</code> si puede escribir en su directorio home: <code>/home/userftp</code>. Para sortear esta limitaci\u00f3n, tenemos varias opciones de configuraci\u00f3n:</p> <ul> <li>Opci\u00f3n 1 \u2013 Simplemente permitir que el directorio ra\u00edz al que nos conectamos s\u00ed pueda ser escribible.</li> </ul> <p>En ese caso, agregamos la siguiente l\u00ednea. Haz la prueba, reinicia vsftpd e intenta conectarte. Despu\u00e9s deshabilita esta opci\u00f3n, ya que no es la que usaremos.</p> <pre><code>allow_writeable_chroot=YES\n</code></pre> <ul> <li>Opci\u00f3n 2 \u2013 Definir un directorio de acceso por FTP distinto al home del usuario y sin permisos de escritura.</li> </ul> <p>Se debe utilizar un directorio diferente para cargas FTP. Crearemos un directorio <code>/home/userftp/ftp</code> al que quitaremos los permisos de escritura para todo el mundo que servir\u00e1 como chroot. Pero antes de quitarle los permisos de escritura, crearemos un segundo directorio <code>/home/userftp/ftp/upload</code> para la carga de archivos, este s\u00ed tendr\u00e1 permisos de escritura. Para configurar esta opci\u00f3n de chroot, agregamos las siguientes l\u00edneas al fichero de configuraci\u00f3n.</p> <p><pre><code>user_sub_token=userftp\nlocal_root=/home/userftp/ftp\n</code></pre> Prueba a conectarte por ftp con el usuario <code>userftp</code> y comprueba que su directorio ra\u00edz ahora es <code>/home/userftp/ftp</code> y que ah\u00ed no puedes subir ning\u00fan fichero. Prueba a subir a <code>upload</code> y comprueba que en este directorio s\u00ed puedes.</p> <p>En el caso anterior servir\u00e1 solo para el usuario <code>userftp</code>. Si lo queremos hacer para todos los usuarios del sistema usaremos estas directivas en su lugar :</p> <pre><code>user_sub_token=$USER\nlocal_root=/home/$USER/ftp\n</code></pre> <p>Ahora crea un segundo usuario, por ejemplo <code>user2</code>. Crea los directorios <code>/home/user2/ftp</code> sin permiso de escritura y <code>/home/user2/ftp/upload</code> con permiso de escritura. Con\u00e9ctate con <code>user2</code> y comprueba lo dicho anteriormente.</p> <p>Elimina las directivas <code>user_sub_token</code> y <code>local_root</code> para probar la opci\u00f3n 3.</p> <ul> <li>Opci\u00f3n 3 \u2013 Enjaular al usuario en otra carpeta distinta, por ejemplo /var/www</li> </ul> <p>Suele ser normal querer que el usuario pueda ver un directorio distinto al de su home, como por ejemplo la carpeta www o la de un servidor virtual concreto de apache, para ello, la soluci\u00f3n m\u00e1s r\u00e1pida es cambiar el directorio home del usuario de la siguiente forma. Para hacer esta prueba, antes instala APACHE si no estaba instado.</p> <pre><code>sudo usermod --home /var/www userftp\n</code></pre> <p>Comprobamos con:</p> <pre><code>su userftp\ncd\npwd\n</code></pre> <p>Vuelve al usuario admin con <code>exit</code>.</p> <p>Con esto habremos cambiado el directorio home del usuario y cada vez que se conecte tanto por FTP como por SSH entrar\u00e1 al directorio /var/www. Compru\u00e9balo. Si quisieramos subir archivos a la web s\u00f3lo nos quedar\u00eda, para este caso, a\u00f1adir el usuario al grupo de apache o www-data dependiendo del sistema operativo o el usuario apache configurado.</p> <pre><code>sudo adduser userftp www-data\n</code></pre> <p>6. Restricci\u00f3n de usuarios</p> <p>Para permitir que s\u00f3lo ciertos usuarios inicien sesi\u00f3n en el servidor FTP, agregamos las siguientes l\u00edneas en la parte inferior. Con esta opci\u00f3n habilitada, debemos especificar qu\u00e9 usuarios deber\u00edan poder usar FTP y agregar sus nombres de usuario en el archivo <code>/etc/vsftpd.userlist</code>.</p> <pre><code>userlist_enable=YES #(1)\nuserlist_file=/etc/vsftpd.userlist #(2)\nuserlist_deny=NO #(3)\n</code></pre> <ol> <li>Hace que solo puedan conectarse o impide que se puedan conectar los usuarios de la lista</li> <li>Lista donde se definen qu\u00e9 usuarios pueden conectarse o no conectarse</li> <li>Si el valor es YES a los usuarios de la lista se les deniega el acceso. Si es NO se les permite</li> </ol> <p>Agregamos el nuevo usuario <code>userftp</code> a la lista de usuarios de FTP permitidos, con este comando o con nano.</p> <pre><code>echo \"userftp\" | sudo tee -a /etc/vsftpd.userlist\n</code></pre> <p>Guarda y cierra el archivo. Reinicia el servidor e intenta conectarte con <code>userftp</code>. Comprueba que funciona. Intenta conectarte ahora con <code>user2</code>. \u00bfTe lo permite?</p> <p>Despu\u00e9s de todas estas pruebas vamos a dejarlo de la siguiente manera para las comprobaciones finales:</p> <ol> <li>Deja que s\u00f3lo puedan conectarse los usuarios locales.</li> <li>Habilita la carga de archivos.</li> <li>Haz que los archivos se suban con umask 022.</li> <li>Habilita chroot con la opci\u00f3n 2, es decir, que cada usuario del sistema se conecte a <code>/home/$USER/ftp</code></li> <li>Restringe para que solo <code>userftp</code> pueda conectarse por FTP</li> <li>Agrega un archivo <code>pruebaftp.txt</code> en <code>/home/userftp/ftp/upload/</code> para usar en las pruebas.</li> </ol> <pre><code>echo \"esto es una prueba con vsftpd\" | sudo tee /home/userftp/ftp/upload/pruebaftp.txt\n</code></pre>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P02/#paso-4-comprobacion-del-acceso-ftp","title":"Paso 4: Comprobaci\u00f3n del acceso FTP","text":"<p>Nuestro servidor FTP es completamente funcional en este momento. Podemos hacer una peque\u00f1a prueba antes de continuar.</p> <p>Intentemos iniciar sesi\u00f3n como un usuario an\u00f3nimo. Vemos que funciona seg\u00fan lo previsto, es decir, no se permiten usuarios an\u00f3nimos.</p> <p></p> <p>Ahora vamos a conectarnos como usuario de prueba <code>userftp</code> que creamos para acceder al servidor FTP. </p> <p></p> <p>Cambiemos al directorio de carga y usemos el comando get para transferir el archivo de prueba a nuestra m\u00e1quina local.</p> <p></p> <p>A continuaci\u00f3n, subamos el archivo con un nuevo nombre usando el comando put para probar los permisos de escritura del archivo.</p> <p></p> <p>Cierra la conexi\u00f3n. <pre><code>ftp&gt; bye\n</code></pre></p> <p>Finalmente comprobaci\u00f3n que la descarga se ha producido.</p> <p>Comprobamos que el archivo se ha descargado correctamente en nuestra m\u00e1quina local. La descarga la dejar\u00e1 en la misma carpeta donde se haya producido la conexi\u00f3n ftp. En nuestro caso, la misma carpeta que nos encontremos al salir con el quit.</p> <p></p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P02/#referencias","title":"Referencias","text":"<ul> <li>vsftpd - Ubuntu documentation</li> <li>VSFTPD: Instalaci\u00f3n y chroot a una carpeta de usuario.</li> <li>How To Set Up vsftpd for a User's Directory on Ubuntu 16.04</li> </ul>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P03/","title":"Pr\u00e1ctica 3. Configuraci\u00f3n de servidor FTP con Cifrado","text":"<p>En esta pr\u00e1ctica, aprenderemos c\u00f3mo asegurar la conexi\u00f3n usando el protocolo SSL/TLS, de esta forma se podr\u00e1n transferir datos encriptados a trav\u00e9s de FTP.</p> <p>Recuerda de la teor\u00eda que hay 2 modos de conexi\u00f3n cifrada de FTP, FTPS y SFTP y que no tienen nada que ver en cuanto a configuraci\u00f3n y funcionamiento.</p> <ul> <li>FTPS (File Transfer Protocol Secure) - Es a FTP lo que HTTPS a HTTP. Es el servidor FTP quien define sus claves p\u00fablica y privada. Comparte su clave p\u00fablica con el cliente que quiere conectarse a \u00e9l para establecer el canal privado. Por tanto requiere de la generaci\u00f3n de dichas claves en el servidor y la configuraci\u00f3n en vsftpd.conf. Adem\u00e1s tiene 2 formas de conexi\u00f3n<ul> <li>FTPS Expl\u00edcito (FTPES): En este modo, la seguridad SSL/TLS se inicia despu\u00e9s de que el cliente se conecta al servidor y emite un comando espec\u00edfico (por ejemplo, AUTH TLS o AUTH SSL) para solicitar una conexi\u00f3n segura. Por tanto la primera conexi\u00f3n del cliente al servidor es por el puerto habitual de comandos de FTP, el 21.</li> <li>FTPS Impl\u00edcito (FTPIS): En este modo, la seguridad SSL/TLS se establece autom\u00e1ticamente cuando el cliente se conecta al servidor en un puerto espec\u00edfico (generalmente el puerto 990 para FTPS impl\u00edcito).</li> </ul> </li> <li>SFTP (SSH File Transfer Protocol) - Aqu\u00ed primero se establece un canal SSH entre cliente y servidor SSH (no vsftpd) a trav\u00e9s del puerto habitula ssh, el 22.. Una vez establecido el canal el cliente ftp y vsftpd intercambian mensajes cifrados dentro de ese canal. Por tanto, vsftpd no necesita ninguna configuraci\u00f3n especial</li> </ul> <p>En esta pr\u00e1ctica veremos las 2 formas de funcionamiento y conexi\u00f3n.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P03/#instancia-en-aws","title":"Instancia en AWS","text":"<p>Primero abriremos la instancia AWS P4-vsftpd creada en la pr\u00e1ctica anterior, donde ya ten\u00edamos instalado el servidor vsftpd y usuarios con permisos a FTP.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P03/#servidor-vsftpd","title":"Servidor vsftpd","text":"<p>Comprobamos el estado del servicio y en caso de que no est\u00e9 habilita el servicio al inicio.</p> <pre><code>sudo systemctl status vsftpd\n</code></pre> <p>En caso de que no est\u00e9 iniciado el servicio, realizar estos pasos;</p> <pre><code>sudo systemctl start vsftpd\nsudo systemctl enable vsftpd.service\n</code></pre>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P03/#ftps-file-transfer-protocol-secure","title":"FTPS (File Transfer Protocol Secure)","text":"<p>Veamos primero la configuraci\u00f3n y conexi\u00f3n a trav\u00e9s de FTPS.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P03/#generar-un-certificado-autofirmado-con-openssl","title":"Generar un certificado autofirmado con OpenSSL","text":"<p>Ya hemos visto que el servidor vsftpd admite FTPS (FTP sobre SSL/TLS), es decir que cifra las comunicaciones entre el cliente y el servidor. As\u00ed que para poder transferir datos encriptados a trav\u00e9s de FTP, necesitaremos crear un certificado SSL y habilitar la conexi\u00f3n SSL/TLS. Por ello vamos a utilizar OpenSSL con el siguiente comando;</p> <p><pre><code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem\n</code></pre> Tenemos que tener en cuenta que nos pedir\u00e1 que ingresemos cierta informaci\u00f3n, como el pa\u00eds, el estado/provincia y el nombre com\u00fan. Puede ingresar los valores que desee o dejarlos en blanco.</p> <p>Este comando genera un certificado SSL autofirmado v\u00e1lido por 365 d\u00edas y guarda la clave privada y el certificado en <code>/etc/ssl/private/vsftpd-cert.pem</code></p> <p>Podemos comprobarlo con el comando  <pre><code>sudo ls -l /etc/ssl/private\n</code></pre></p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P03/#configurar-el-servidor-vsftpd","title":"Configurar el servidor vsftpd","text":"<p>1. Habilitar el cifrado SSL</p> <p>Una vez que tengamos el certificado SSL y la clave privada, tendremos que modificar el archivo /etc/vsftpd.conf. Para ello buscamos el archivo de configuraci\u00f3n y guardamos una copia de \u00e9l por si acaso: </p> <p><pre><code>sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.backup2\n</code></pre> Pasamos a modificar el archivo de configuraci\u00f3n utilizando un editor.</p> <p><pre><code>sudo nano /etc/vsftpd.conf\n</code></pre> En primer lugar, buscaremos las siguientes l\u00edneas del archivo y las eliminaremos o comentaremos con #:</p> <p><pre><code>rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n</code></pre> Tras ello, a\u00f1adiremos estas l\u00edneas en su lugar;</p> <pre><code>rsa_cert_file=/etc/ssl/private/vsftpd.pem\nrsa_private_key_file=/etc/ssl/private/vsftpd.pem\nssl_enable=YES\n\nallow_anon_ssl=NO\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\nssl_tlsv1=YES\nssl_sslv2=NO\nssl_sslv3=NO\nrequire_ssl_reuse=NO\nssl_ciphers=HIGH\n</code></pre> <p>Al conectarnos utilizando FTPS el servidor forzar\u00e1 al cliente a realizar una conexi\u00f3n pasiva por segurida, como vimos en la teor\u00eda. Si no hacemos nada m\u00e1s, tras el primer intercambio de \u00f3rdenes a trav\u00e9s del puerto 21, la conexi\u00f3n no podr\u00e1 establecerse por el puerto de datos y obtendremos un mensaje similar a este \"El servidor envi\u00f3 una respuesta pasiva con una direcci\u00f3n no enrutable. Usando en su lugar la direcci\u00f3n del servidor.\"</p> <p>2. Habilitar el modo pasivo</p> <p>Para evitar que esto ocurra, definiremos los puertos que puede abrir el servidor para el canal de datos en la conexi\u00f3n pasiva en el fichero /etc/vsftpd.conf con las siguientes \u00f3rdenes:</p> <p><pre><code>pasv_enable=YES\npasv_min_port=1027  # Puerto m\u00ednimo de conexi\u00f3n pasiva (reemplaza XXXX con un n\u00famero)\npasv_max_port=1030  # Puerto m\u00e1ximo de conexi\u00f3n pasiva (reemplaza XXXX con un n\u00famero)\npasv_address=X.X.X.X  # Direcci\u00f3n IP p\u00fablica o accesible desde el cliente (reemplaza X.X.X.X con la direcci\u00f3n IP)\n</code></pre> En este caso hemos elegido los puertos 1027 a 1030, pero puedes elegir otros que est\u00e9n libres. Ten en cuenta que deber\u00e1s abrir esos puertos en el firewall de AWS para permitir conexiones a esos puertos.</p> <p>La \u00faltima l\u00ednea pasv_address=X.X.X.X es opcional y si la pones debes poner la IP p\u00fablica de tu servidor. Si no la pones, cuando te conectes con el cliente recibir\u00e1s un mensaje similar a \"El servidor envi\u00f3 una respuesta pasiva con una direcci\u00f3n no enrutable. Usando en su lugar la direcci\u00f3n del servidor.\", pero funcionar\u00e1 igual. Si la pones ten en cuenta que cada vez que cambie la IP p\u00fablica de tu servidor deber\u00e1s cambiar esta l\u00ednea en la configuraci\u00f3n.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P03/#reinicia-el-servicio","title":"Reinicia el servicio","text":"<p>Finalmente reiniciamos el servicio vsftpd para que coja la nueva configuraci\u00f3n realizada en todos estos pasos.</p> <pre><code>sudo systemctl restart --now vsftpd\n</code></pre>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P03/#comprobar-la-conexion-ftp-al-servidor-vsftpd","title":"Comprobar la Conexi\u00f3n FTP al servidor vsftpd","text":""},{"location":"Ud5%20Servicios%20de%20red%20FTP/P03/#acceso-con-cliente-ftp-de-consola","title":"Acceso con Cliente FTP de consola","text":"<ol> <li>Abre una terminal en tu sistema. </li> <li>Desde Linux/Mac, abre el terminal del sistema</li> <li> <p>Desde Windows, abre el \"S\u00edmbolo del sistema\" o \"PowerShell\". Puedes hacerlo buscando \"cmd\" o \"PowerShell\" en el men\u00fa de inicio o escribiendo \"cmd\" en la barra de b\u00fasqueda.</p> </li> <li> <p>En la terminal, escribe el siguiente comando para iniciar una sesi\u00f3n FTP. Debes reemplazar nombre_de_host_ftp con la direcci\u00f3n IP P\u00daBLICA o el nombre de dominio del servidor FTP al que deseas conectarte:</p> </li> </ol> <pre><code>ftp nombre_de_host_ftp\n</code></pre> <ol> <li>Una vez que ingreses el comando, el cliente FTP intentar\u00e1 establecer una conexi\u00f3n con el servidor. Si la conexi\u00f3n es exitosa, ver\u00e1s un mensaje similar a este:</li> </ol> <pre><code>Connected to nombre_de_host_ftp.\n220 (nombre_del_servidor_ftp) FTP server ready\nName (nombre_de_host_ftp:tu_nombre_de_usuario_ftp):\n</code></pre> <ol> <li>A continuaci\u00f3n, el cliente FTP te pedir\u00e1 que ingreses un usuario (en nuestro caso recuerda que era userftp)  y presiona \"Enter\". Luego, se te pedir\u00e1 que ingreses la contrase\u00f1a (recuerda que era ieselcaminas). Si las credenciales son correctas, deber\u00edas obtener acceso al servidor FTP. Verifica que el prompt a cambiado a ftp&gt; (quiere decir que has conectado correctamente). Es posible que si el cliente ftp no conoce el certificado del servidor no te permita la conexi\u00f3n. Si esto ocurre no te preocupes e intenta la conexi\u00f3n con el cliente gr\u00e1fico, que suele solucionar ese inconveniente.</li> </ol>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P03/#acceso-con-cliente-ftp-grafico","title":"Acceso con Cliente FTP gr\u00e1fico","text":"<p>Vamos a utilizar como cliente FTP con entorno gr\u00e1fico a Filezilla, que dispone de versiones para GNU/Linux, Mac OS X y Windows. Tras descargar el cliente FTP en nuestro ordenador vamos a crear una conexi\u00f3n para usarla m\u00e1s adelante. Lo haremos siguiendo los pasos de la pr\u00e1ctica 4.1 Acceso a un servidor FTP p\u00fablico con los siguientes datos:</p> <p></p> <p>F\u00edjate que usamos FTP y no SFTP, que usamos FTPS Expl\u00edcito y que el puerto est\u00e1 vac\u00edo, porque usar\u00e1 el 21, que es el puerto por defecto. Puedes ponerlo y ver\u00e1s que funciona igual.</p> <p>Tras darle al bot\u00f3n de Conectar, nos saltar\u00e1 un aviso a prop\u00f3sito del certificado, le damos a aceptar puesto que no entra\u00f1a peligro ya que lo hemos generado nosotros mismos:</p> <p></p> <p>Nos conectaremos directamente a la carpeta que le hab\u00edamos indicado en el archivo de configuraci\u00f3n <code>/home/userftp/ftp</code></p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P03/#sftp-ssh-file-transfer-protocol","title":"SFTP (SSH File Transfer Protocol)","text":"<p>Ahora vamos a probar la conexi\u00f3n por SFTP. Recuerda que para esta no necesitamos configurar vsftp de ninguna forma especial, as\u00ed que vamos a recuperar el fichero de configuraci\u00f3n antes de configurar FTPS. Antes guardaremos el fichero de configuraci\u00f3n con ftps activado por si queremos usarlo despu\u00e9s.</p> <pre><code>sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.ftps\nsudo cp /etc/vsftpd.conf.backup2 /etc/vsftpd.conf\n</code></pre> <p>Ahora recuerda que aqu\u00ed primero se establece una conexi\u00f3n ssh entre el usuario y el servidor ssh usando las claves p\u00fablica y privada del usuario. Vamos a usar en este caso el usuario <code>user2</code>. Puedes crear un par de claves p\u00fablica y privada para este usuario como hicimos en la pr\u00e1ctica 1.3 y configurar el servidor ssh en la m\u00e1quina virtual en AWS para que user2 pueda conectarse con ssh usando su clave privada. </p> <p>Cuando lo tengas, lo primero es probar que funciona antes de intentar la conexi\u00f3n SFTP.</p> <pre><code>ssh -i clave user2@ipserver\n</code></pre> <p>Recuerda cambiar clave por el nombre y ruta del fichero de clave privada generado y ipserver por la ip p\u00fablica de tu servidor en AWS. </p> <p>Una vez comprobado que funciona ya podemo intentar conectar por sftp.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P03/#conexion-en-modo-comando","title":"Conexi\u00f3n en modo comando","text":"<p>Probamos a conectarnos en modo comando.</p> <p></p> <p>Si todo va bien se establecer\u00e1 la conexi\u00f3n sin pedirnos usuario ni contrase\u00f1a.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P03/#conexion-en-modo-grafico","title":"Conexion en modo gr\u00e1fico.","text":"<p>Si lo que quisi\u00e9ramos es conectarnos con Filezilla mediante la conexi\u00f3n r\u00e1pida, bastar\u00e1 con seleccionar el puerto 22, que recordemos es el de ssh. Para que esto funcione el archivo de clave privada deber\u00e1 estar en la ubicaci\u00f3n donde el sistema espera encontrarlo, en caso contrario no lo encontrar\u00e1 y nos dar\u00e1 error.</p> <p></p> <p>Si tenemos nuestro fichero con la clave privada de <code>user2</code> en otro sitio podemos crear una conexi\u00f3n nueva as\u00ed:</p> <p></p> <p>Fij\u00e1os que al utilizar las claves de SSH no se debe introducir la contrase\u00f1a, \u00fanicamente el nombre de usuario.</p> <p>Puesto que nos estamos conectando usando las claves FTP, nos sale el mismo aviso que nos sal\u00eda al conectarnos por primera vez por SSH a nuestra Debian, que aceptamos porque sabemos que no entra\u00f1a ning\u00fan peligro en este caso:</p> <p></p> <p>Y vemos que al ser una conexi\u00f3n SSH, nos conecta al <code>home</code> del usuario, en lugar de a la carpeta <code>ftp</code>. A partir de aqu\u00ed ya proceder\u00edamos igual que en el otro caso.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P04/","title":"Pr\u00e1ctica 4. Dockerizar un servidor FTP","text":"<p>Si buscamos vsftpd en Docker Hub encontraremos que la imagen m\u00e1s utilizada es fauria/vsftpd</p> <p>En la p\u00e1gina de Docker Hub tenemos toda la informaci\u00f3n necesaria para usar este contenedor. Tendr\u00e1s que consultarla as\u00ed que \u00e9chale un primer vistazo.</p> <p>Intentar usar un contenedor usando todas sus opciones desde el principio es garant\u00eda de no conseguirlo. Vamos a ir poco a poco. Nuestro objetivo final ser\u00e1 crear un contenedor dockerizado con las mismas caracter\u00edsticas que el contenedor de la pr\u00e1ctica 2, que recordamos era:</p> <ol> <li>Deja que s\u00f3lo puedan conectarse los usuarios locales.</li> <li>Habilita la carga de archivos.</li> <li>Haz que los archivos se suban con umask 022.</li> <li>Habilita chroot con la opci\u00f3n 2, es decir, que cada usuario del sistema se conecte a <code>/home/$USER/ftp</code></li> <li>Restringe para que solo <code>userftp</code> pueda conectarse por FTP</li> <li>Agrega un archivo <code>pruebaftp.txt</code> en <code>/home/userftp/ftp/upload/</code> para usar en las pruebas.</li> </ol> <p>Info</p> <p>La imagen docker <code>fauria/vsftpd</code> est\u00e1 configurada para usar \"usuarios virtuales\" en lugar de usuarios locales. Pero como la configuraci\u00f3n ya est\u00e1 hecha en el contenedor no nos preocupar\u00e1. Simplemente hemos de saberlo para cuando veamos ciertas configuraciones en vsftpd.conf que no conozcamos.</p> <p>Vamos a empezar por intentar correr un contentedor que permita un acceso FTP activo simple. Viendo las opciones que nos da la p\u00e1gina de \"fauria/vsftpd\" probaremos esto:</p> <pre><code>docker run \\\n    --rm \\\n    -p 21:21 -p 20:20 \\\n    -d \\\n    --name pruebavsftpd \\\n    fauria/vsftpd\n</code></pre> <p>La opci\u00f3n -rm borrar\u00e1 el contenedor al pararlo. Como estamos en pruebas nos interesa esa opci\u00f3n. Corre el contenedor y luego, siguiendo las instrucciones del contenedor, ejecuta lo siguiente para obtener el usuario y contrase\u00f1a de acceso:</p> <pre><code>$ docker logs pruebavsftpd \n    *************************************************\n    *                                               *\n    *    Docker image: fauria/vsftpd                *\n    *    https://github.com/fauria/docker-vsftpd    *\n    *                                               *\n    *************************************************\n\n    SERVER SETTINGS\n    ---------------\n    \u00b7 FTP User: admin\n    \u00b7 FTP Password: nfcf4ZoxNRsV2c3L\n    \u00b7 Log file: /var/log/vsftpd/vsftpd.log\n    \u00b7 Redirect vsftpd log to STDOUT: No.\n</code></pre> <p>Ahora abre Filezilla y establece un conexi\u00f3n con el contenedor. Recuerda que si est\u00e1 corriendo en una EC2 de AWS habr\u00e1s de tener abiertos los puertos 20 y 21. Y en Filezilla tendr\u00e1s que establecer una conexi\u00f3n FTP (no FTPS ni sFTP) y en opciones de transferencia establecer el modo \"Activo\".</p> <p>Una vez establecida la conexi\u00f3n, \u00bfesta activo el chroot (puedes moverte por todos los directorios del servidor)? \u00bfPuedes subir archivos al servidor?</p> <p>Bueno, ya tenemos algunas cosas claras. Pero se trata de un servidor FTP. No nos interesa que los archivos a descargar o subir est\u00e9n dentro del contenedor y se borren cuando este se elimine. As\u00ed que vamos a pararlo pero montando el directorio de datos en un directorio de nuestro host. Crearemos un directorio <code>datosftp</code> y lo montaremos como dicen las instrucciones del contenedor.</p> <pre><code>mkdir datosftp\ndocker run \\\n    --rm \\\n    -p 21:21 -p 20:20 \\\n    -d \\\n    --name pruebavsftpd \\\n    -v /home/admin/datosftp:/home/vsftpd \\\n    fauria/vsftpd\n</code></pre> <p>Vuelve a conectarte con Filezilla. Recuerda recuperar la nueva contrase\u00f1a de admin. Observa en la m\u00e1quina host como se crea un directorio <code>/home/admin/datosftpd/admin</code> que alojar\u00e1 los datos. Con filezilla env\u00eda un fichero al directorio ra\u00edz donde te has conectado. Comprueba en el host que aparece dicho fichero en <code>/home/admin/datosftpd/admin</code>. Ya podemos parar nuevamente el contenedor.</p> <p>Vamos ahora con una configuraci\u00f3n m\u00e1s completa en la que crearemos un usuario ftp y activaremos el modo pasivo:</p> <pre><code>docker run \\\n    --rm \\\n    -e FTP_USER=userftp \\\n    -e FTP_PASS=ieselcaminas \\\n    -e PASV_MIN_PORT=21100 \\\n    -e PASV_MAX_PORT=21110 \\\n    -p 21:21 -p 21100-21110:21100-21110 \\\n    -d \\\n    --name pruebavsftpd \\\n    -v /home/admin/datosftp:/home/vsftpd \\\n    fauria/vsftpd\n</code></pre> <p>Atenci\u00f3n</p> <p>Antes de probarlo, f\u00edjate que hemos abierto en el servido los puertos 21100 a 21110. Por tanto, si nuestro docker corre en una EC2 de AWS deberemos modificar el grupo de seguridad para permitir el acceso a dicho rango de puertos.</p> <p>Prueba ahora a conectarte con <code>userftp</code> password <code>ieselcaminas</code> y modo pasivo desde Filezilla. Si todo va bien, prueba a enviar un fichero y despu\u00e9s comprueba en el host que existe dicho fichero en <code>/home/admin/datosftp/userftp/</code>. Comprueba sus permisos. \u00bfQu\u00e9 permisos tiene?</p> <p>Con esto ya tenemos \"casi\" todo lo que dijimos en un principio. Y digo casi, porque no hemos tenido en cuenta los permisos con los que se suben los archivos. En la pregunta anterior comprobar\u00edamos que los permisos del fichero subido son -rw------- . Veamos por qu\u00e9. Si revisamos la documentaci\u00f3n del contenedor vemos que hay 2 variables para definir los permisos de los archivos subidos: </p> <ul> <li>Variable name: FILE_OPEN_MODE</li> <li>Default value: 0666</li> <li>Accepted values: File system permissions.</li> <li> <p>Description: The permissions with which uploaded files are created. Umasks are applied on top of this value. You may wish to change to 0777 if you want uploaded files to be executable.</p> </li> <li> <p>Variable name: LOCAL_UMASK</p> </li> <li>Default value: 077</li> <li>Accepted values: File system permissions.</li> <li>Description: The value that the umask for file creation is set to for local users. NOTE! If you want to specify octal values, remember the \"0\" prefix otherwise the value will be treated as a base 10 integer!</li> </ul> <p>Es decir, el fichero subido se crea con permisos 0666 \u00f3 rw-rw-rw. Y luego se hace un AND con la LOCAL_UMASK negada. Como LOCAL_UMASK=077, la negada es 700 \u00f3 111000000. Por tanto, el resultado de rw-rw-rw AND 11100000000 = rw-------</p> <p>Pero nosotros quer\u00edamos que nuestra UMASK fuera 022, as\u00ed que pasaremos la siguiente variable:</p> <pre><code>docker run \\\n    -e FTP_USER=userftp \\\n    -e FTP_PASS=ieselcaminas \\\n    -e PASV_MIN_PORT=21100 \\\n    -e PASV_MAX_PORT=21110 \\\n    -e LOCAL_UMASK=022 \\\n    -p 21:21 -p 21100-21110:21100-21110 \\\n    -d \\\n    --name vsftpdsincifrado \\\n    -v /home/admin/datosftp:/home/vsftpd \\\n    fauria/vsftpd\n</code></pre> <p>Comprueba ahora que si subes un fichero sus permisos ser\u00e1n rw-r--r-- y con esto ya tenemos todo lo que hicimos en el servidor vsftp sin cifrado pero dockerizado. F\u00edjate que le he quitado el <code>-rm</code> y le he cambiado el nombre al contenedor por <code>vsftpdsincifrado</code>.</p> <p>Warning</p> <p>En esta pr\u00e1ctica hemos creado un usuario en el docker run usando variables de entorno. Pero podr\u00eda ocurrir que quisi\u00e9ramos a\u00f1adir m\u00e1s usuarios una vez el contenedor ya creado. En la p\u00e1gina del contenedor fauria/vsftpd en Docker Hub ten\u00e9is la forma de hacerlo usando un comando <code>docker exec</code></p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/P04/#dockerizando-servidor-vsftpd-con-cifrado","title":"Dockerizando servidor vsftpd con CIFRADO","text":"<p>Si recordamos de la \"Pr\u00e1ctica 3. Configuraci\u00f3n de servidor FTP con Cifrado\" para activar FTPS en vsftpd deb\u00edamos hacer 2 cosas:</p> <ul> <li>Generar un certificado autofirmado que se guarda en un fichero .pem (le llamaremos vsftpd.pem)</li> <li>Modificar el fichero de configuraci\u00f3n <code>vsftpd.conf</code> con las directivas que activan el cifrado SSL</li> </ul> <p>Para hacer esto en un contenedor podr\u00edamos plantearnos varias estrategias partiendo de que tenemos los ficheros vsftpd.pem y vsftpd.conf en el host y los queremos copiar al interior del contenedor</p> <ol> <li>Crear un contenedor como el anterior. Despu\u00e9s copiar en su interior los 2 ficheros con comandos <code>docker cp vsftpd.conf vsftpdconcifrado:/etc/vsftpd/vsftpd.conf</code> y <code>docker cp vsftpd.pem vsftpdconcifrado:/etc/vsftpd/vsftpd.pem</code></li> <li>Crear un Dockerfile que genere una imagen copiando esos 2 ficheros a su interior. Despu\u00e9s crear el contenedor, con los mismos par\u00e1metros a partir de la imagen creada</li> </ol> <p>Warning</p> <p>Aunque ambas soluciones parecen v\u00e1lidas pod\u00e9is comprobar que la primera no funciona. Una vez copiados los archivos al interior el contenedor no arranca correctamente.  No es la primera vez que comprobamos que algunas im\u00e1genes docker solo nos permiten hacer ciertas cosas si antes creamos nuestra propia imagen con un <code>docker build</code>. As\u00ed que ahora y en lo sucesivo usaremos esa estrategia.</p> <p>Por tanto, vamos a crear primero una imagen propia a partir de <code>fauria/vsftpd</code> copiando en su interior los ficheros que necesitemos. Crearemos un directorio <code>practicavsftpd</code> y entraremos dentro.</p> <p>Primero crearemos el fichero vsftpd.pem con el certificado:</p> <pre><code>openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout vsftpd.pem -out vsftpd.pem\n</code></pre> <p>Luego copiaremos el vsftpd.conf del contenedor sin cifrado en el host para despu\u00e9s modificarlo:</p> <pre><code>docker cp vsftpdsincifrado:etc/vsftpd/vsftpd.conf .\nsudo nano vsftpd.conf \n</code></pre> <p>A\u00f1adimos las l\u00edneas que vimos en la \"Pr\u00e1ctica 3. Configuraci\u00f3n de servidor FTP con Cifrado\" que habilitaban el cifrado</p> <pre><code>rsa_cert_file=/etc/vsftpd/vsftpd.pem\nrsa_private_key_file=/etc/vsftpd/vsftpd.pem\nssl_enable=YES\n\nallow_anon_ssl=NO\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\nssl_tlsv1=YES\nssl_sslv2=NO\nssl_sslv3=NO\nrequire_ssl_reuse=NO\nssl_ciphers=HIGH\n</code></pre> <p>F\u00edjate que las vamos a copiar en <code>/etc/vsftpd/</code> en lugar de la ruta donde la copi\u00e1bamos en la Pr\u00e1ctica3. Da igual d\u00f3nde siempre que el COPY que hagamos en el Dockerfile sea coherente.</p> <p>Ahora creamos el Dockerfile con este contenido</p> <pre><code>FROM fauria/vsftpd\n\n# Copia tu archivo vsftpd.conf y los certificados\nCOPY vsftpd.conf /etc/vsftpd/vsftpd.conf\nCOPY --chown=root:root vsftpd.pem /etc/vsftpd/vsftpd.pem\n</code></pre> <p>F\u00edjate que hemos usado una opci\u00f3n en COPY para que vsftpd.pem se copie al interior del contenedor siendo el propietario root del grupo root. Esto es necesario para el certificado.</p> <p>Creamos nuestra imagen</p> <pre><code>docker build -t mivsftpd .\n</code></pre> <p>Y creamos nuestro contenedor a partir de la imagen creada:</p> <pre><code>docker run \\\n    -e FTP_USER=userftp \\\n    -e FTP_PASS=ieselcaminas \\\n    -e PASV_MIN_PORT=21100 \\\n    -e PASV_MAX_PORT=21110 \\\n    -e LOCAL_UMASK=022 \\\n    -p 21:21 -p 21100-21110:21100-21110 \\\n    -d \\\n    --name vsftpdconcifrado \\\n    -v /home/admin/datosftp:/home/vsftpd \\\n    mivsftpd\n</code></pre> <p>Comprueba ahora el acceso con Filezilla. Recuerda que tendr\u00e1s que usar \"Cifrado: Requiere FTP expl\u00edcito sobre TLS\" y el \"Modo de transferencia: Pasivo\"</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T01/","title":"1. Servidor de Transferencia de Ficheros","text":""},{"location":"Ud5%20Servicios%20de%20red%20FTP/T01/#introduccion","title":"Introducci\u00f3n","text":"<p>Las aplicaciones de transferencia de ficheros fueron una de las primeras herramientas al desarrollarse en la expansi\u00f3n de las redes de internet. La necesidad de poder acceder a diferentes sistemas e intercambiar informaci\u00f3n origin\u00f3 uno de los sistemas que actualmente se usan.</p> <p>Actualmente hay diferentes formas de intercambio de informaci\u00f3n de forma distribuida en formato fichero:</p> <ul> <li>Sistemas de ficheros en redes</li> <li>Software de mensajer\u00eda</li> <li>Software de distribuciones de ficheros P2P (peer-to-peer)</li> </ul> <p>El FTP (File transfer protocol) o protocolo de transferencia de ficheros es un protocolo que proporciona el servicio de transferencia de ficheros entre sistemas de diferente naturaleza, es decir, se podr\u00e1n interconectar clientes de Linux hacia un sistema de Microsoft u otros.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T01/#funcionalidad-del-servicio-de-transferencia-de-ficheros","title":"Funcionalidad del servicio de transferencia de ficheros","text":"<p>La funcionalidad que aporta este servicio es esencial en numerosos escenarios y aplicaciones, y desempe\u00f1a un papel crucial en la gesti\u00f3n y compartici\u00f3n de datos. Estas son algunas de las principales funcionalidades del servicio de transferencia de archivos:</p> <ul> <li>Transferencia de Archivos</li> <li>Copia de Seguridad</li> <li>Compartici\u00f3n de Archivos</li> <li>Despliegue de Software de actualizaciones y parches.</li> <li>Acceso Remoto</li> <li>Intercambio de Datos entre Aplicaciones</li> <li>Automatizaci\u00f3n de tareas </li> <li>Seguridad, como el cifrado de datos (a trav\u00e9s de protocolos como SFTP o FTPS) y la autenticaci\u00f3n</li> <li>Control de Acceso</li> <li>Monitorizaci\u00f3n y Registro</li> </ul> <p>En resumen, la funcionalidad del servicio de transferencia de archivos es facilitar la transferencia segura y eficiente de datos entre sistemas y dispositivos. Estas capacidades son fundamentales en numerosos escenarios, desde la gesti\u00f3n de archivos personales hasta la administraci\u00f3n de sistemas empresariales y la colaboraci\u00f3n en equipo.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T01/#un-poco-de-historia","title":"Un poco de historia","text":"<p>La implementaci\u00f3n de la FTP se remonta en el a\u00f1o 1971, cuando se desarroll\u00f3 un sistema de transferencia de ficheros, definido dentro de la RFC (request for comments) 141, entre equipos del Instituto Tecnol\u00f3gico de Massachusetts (MIT, Massachusetts Institute of Technology). Durante los a\u00f1os posteriores se hicieron diferentes innovaciones al protocolo b\u00e1sico, que se incluyeron en 1973.</p> <p>El protocolo FTP, tal como se conoce actualmente como est\u00e1ndar, se especifica dentro de la RFC 959 en 1985 y define el funcionamiento del protocolo. Posteriormente, el protocolo FTP se ha ido revisando con algunas nuevas caracter\u00edsticas, pero su base de funcionamiento ha sido mantenida.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T01/#el-modelo-ftp-como-funciona","title":"El modelo FTP. \u00bfC\u00f3mo funciona?","text":"<p>El protocolo FTP emplea una arquitectura cliente/servidor, siendo el cliente FTP quien solicita la transferencia de archivos y el servidor FTP quien ofrece los archivos. Pertenece a la familia de protocolos de red TCP y por lo tanto es un protocolo orientado a conexi\u00f3n, esto es, el cliente ftp necesita establecer una conexi\u00f3n con el servidor para empezar la transferencia de ficheros. Si no se establece la conexi\u00f3n \u00e9sta no tiene lugar.</p> <p>Puesto que FTP es un protocolo que no utiliza una autenticaci\u00f3n de usuarios y contrase\u00f1a cifrada, se considera un protocolo inseguro y no se deber\u00eda utilizar a menos que sea absolutamente necesario. Ver\u00e1s que existen otras alternativas al FTP, como por ejemplo el protocolo FTPS, para mantener comunicaciones cifradas. A\u00fan as\u00ed, el protocolo FTP est\u00e1 muy extendido en Internet ya que a menudo los usuarios necesitan transferir archivos entre m\u00e1quinas sin importar la seguridad.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T01/#canales-o-puertos-de-comunicacion","title":"Canales o puertos de comunicaci\u00f3n","text":"<p>El protocolo FTP requiere de dos puertos TCP en el servidor para su funcionamiento, a diferencia de la mayor\u00eda de los protocolos utilizados en Internet que solamente requieren un puerto en el servidor. </p> <p>Estos dos puertos o canales de comunicaci\u00f3n dentro del protocolo FTP son:</p> <ul> <li>El canal de control env\u00eda todas las \u00f3rdenes de comunicaci\u00f3n, como pueden ser iniciar la sesi\u00f3n de trabajo y \u00f3rdenes de ejecuci\u00f3n como leer, escribir, listar, borrar, etc.</li> <li>El canal de datos env\u00eda el contenido de aquellos ficheros a trabajar, que puede ser tanto para leer el contenido del fichero como para hacer la escritura del fichero.</li> </ul> <p>Los puertos TCP del servidor en cuesti\u00f3n, suelen ser un puerto para el control de la conexi\u00f3n y otro puerto para los datos, a determinar seg\u00fan el modo de conexi\u00f3n, que podr\u00eda ser el 20 o incluso uno mayor de 1024. Normalmente se utilizan el puerto 21 como puerto de control o comandos y el puerto 20 como puerto de datos.  Hay que tener en cuenta que estos puertos pueden ser modificados en la configuraci\u00f3n del servidor, as\u00ed no es obligatorio que los puertos 21 y 20 sean los asignados al servidor FTP, pero s\u00ed son los que \u00e9ste maneja por defecto. </p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T01/#procesos-dtp-y-pi-en-el-servidor-y-en-el-cliente","title":"Procesos DTP y PI en el Servidor y en el Cliente","text":"<p>Tanto el cliente como el servidor gestionan dos procesos:</p> <ul> <li>Proceso DTP (Data Transfer Protocol, o proceso de transferencia de datos): es el encargado de establecer la conexi\u00f3n y administrar el canal de datos. Tanto el cliente como el servidor tienen su propio DTP.</li> <li>Proceso PI (Protocol Interpret, int\u00e9rprete del protocolo): interpreta el protocolo y permite que el DTP pueda ser controlado mediante \u00f3rdenes recibidas a trav\u00e9s del canal de control.</li> </ul> <p></p> <p></p> <p>El proceso PI en el servidor:</p> <ul> <li>Escucha las \u00f3rdenes que provienen del proceso PI del usuario mediante el canal de control por un puerto de datos (puerto 20).</li> <li>Establece la conexi\u00f3n del canal de control.</li> <li>Recibe las \u00f3rdenes FTP del proceso PI del usuario, las responde y ejecuta el proceso DTP del servidor.</li> </ul> <p>El proceso PI en el cliente:</p> <ul> <li>Es el responsable de establecer la conexi\u00f3n con el servidor FTP.</li> <li>Env\u00eda \u00f3rdenes FTP.</li> <li>Recibe las respuestas del servidor PI.</li> <li>Controla el DTP del usuario.</li> </ul> <p>El modo de funcionamiento es el siguiente; Cuando un cliente conecta al servidor FTP, la PI del usuario inicia la conexi\u00f3n con el servidor con el protocolo  Telnet (RFC 854). El cliente env\u00eda \u00f3rdenes FTP al servidor, el servidor las interpreta, ejecuta el DTP y responde con un formato est\u00e1ndar. Una vez establecida la conexi\u00f3n, el proceso PI del servidor proporciona el puerto por el cual se enviar\u00e1n los datos al DTP del cliente, por donde escuchar\u00e1 y recibir\u00e1 los datos del servidor.</p> <p>Toda la comunicaci\u00f3n que se hace en el canal de control sigue las recomendaciones del protocolo Telnet.  Los canales de control deben permanecer abiertos durante la transferencia de datos. De este modo, un servidor puede detener una transmisi\u00f3n si el canal de control es interrumpido durante la transmisi\u00f3n.</p> <p></p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T01/#modos-de-conexion-del-cliente-ftp","title":"Modos de conexi\u00f3n del cliente FTP","text":"<p>Dentro del protocolo FTP se definen dos modos de conexi\u00f3n que se configuran dentro del servicio. Estos modos se refieren a la forma en que se establecen las conexiones de datos entre el cliente y el servidor. </p> <p>El modo ftp Activo (o Est\u00e1ndar, o PORT, debido a que el cliente env\u00eda comandos tipo PORT al servidor por el canal de control al establecer la conexi\u00f3n) y el modo ftp Pasivo (o PASV, porque en este caso env\u00eda comandos tipo PASV). Tanto en el modo Activo como en el modo Pasivo, el cliente establece una conexi\u00f3n con el servidor mediante el puerto 21, que establece el canal de control.</p> <p>Aqu\u00ed hay una explicaci\u00f3n de las diferencias entre ambos modos:</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T01/#modo-ftp-activo","title":"Modo FTP activo","text":"<p>Para establecer una conexi\u00f3n FTP activa, se siguen estos pasos:</p> <ul> <li>En el modo FTP activo, el cliente conecta desde un puerto aleatorio m\u00e1s grande de 1024 (denominemos N) hacia el puerto 21 de control del servidor. </li> <li>El cliente inicia la escucha en el puerto (N+1).</li> <li>El servidor establece la conexi\u00f3n desde el puerto 20 al cliente por el puerto de datos especificado por parte del cliente, que es el puerto N+1.</li> </ul> <p>Cuando se trabaja en modo activo puede haber problemas con el cortafuegos del sistema. El cortafuegos tiene que tener los puertos de trabajo abiertos del servidor y del cliente, para poder establecer las comunicaciones. En este modo es el cliente el que inicia la comunicaci\u00f3n en el canal de control, pero es el servidor el que inicia la comunicaci\u00f3n en el canal de datos.</p> <p>Ve\u00e1moslo con un ejemplo:</p> <p></p> <p>Puertos que se abrir\u00e1n en modo activo dentro del servidor:</p> <ol> <li>El cliente conectar\u00e1 al puerto 21 del servidor FTP con un puerto m\u00e1s grande de 1024 del cliente. (Iniciaci\u00f3n de la conexi\u00f3n del cliente)</li> <li>El puerto 21 del servidor FTP conectar\u00e1 a un puerto m\u00e1s grande de 1024. (El servidor responde al puerto de control del cliente)</li> <li>El puerto 20 del servidor FTP conectar\u00e1 a un puerto m\u00e1s grande de 1024. (El servidor inicia la conexi\u00f3n de datos hacia el puerto de datos del cliente FTP)</li> <li>El cliente conectar\u00e1 con un puerto m\u00e1s grande de 1024 hacia el puerto 20 del servidor FTP. (El cliente env\u00eda la confirmaci\u00f3n de conexi\u00f3n al puerto de datos del servidor FTP.)</li> </ol> <p>En resumen, en modo Activo, el servidor siempre crea el canal de datos en su puerto 20, mientras que en el lado del cliente el canal de datos se asocia a un puerto aleatorio mayor que el 1024. Para ello, el cliente manda un comando PORT al servidor por el canal de control indic\u00e1ndole ese n\u00famero de puerto, de manera que el servidor pueda abrirle una conexi\u00f3n de datos por donde se transferir\u00e1n los archivos y los listados, en el puerto especificado.</p> <p>Ver otro ejemplo de \"modo activo\".</p> <p></p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T01/#modo-ftp-pasivo","title":"Modo FTP pasivo","text":"<p>Para evitar que el servidor inicie la conexi\u00f3n al cliente, lo que impedir\u00eda la comunicaci\u00f3n si hay un cortafuegos, hay otro m\u00e9todo de conexi\u00f3n denominado pasivo.</p> <p>En el m\u00e9todo FTP pasivo el cliente inicia las dos conexiones al servidor (control y datos), resolviendo el problema de control del cortafuego o configuraciones NAT en el filtraje del puerto de datos del servidor hacia el cliente. En caso de no existir cortafuegos no habr\u00eda problema, pero si existe, al intentar el servidor devolver la respuesta a un puerto diferente, el cortafuegos bloquear\u00eda la conexi\u00f3n. Como contrapartida hay que tener m\u00e1s rango de puertos abiertos en el servidor.</p> <ul> <li>El cliente, al iniciar la conexi\u00f3n FTP, coge un puerto aleatorio m\u00e1s grande de 1024, que llamaremos N y el siguiente como N + 1.</li> <li>El primer puerto N hace la conexi\u00f3n hacia el puerto 21 del servidor y evita hacer la conexi\u00f3n al puerto de datos 20. El cliente har\u00e1 uso de una orden PASV. </li> <li>El servidor abre un puerto aleatorio P m\u00e1s grande de 1024 y le devuelve al cliente con la orden PASV. </li> <li>El cliente inicia el canal de datos del puerto (N + 1) al puerto P.</li> </ul> <p>Ve\u00e1moslo con un ejemplo:</p> <p></p> <p>Para controlar el cortafuegos en el servidor FTP en modo pasivo abriremos los puertos siguientes:</p> <ol> <li>El cliente conectar\u00e1 al puerto 21 del servidor FTP con un puerto m\u00e1s grande de 1024 del cliente pidiendo una conexi\u00f3n pasiva con la orden PASV. (Iniciaci\u00f3n de la conexi\u00f3n del cliente)</li> <li>El puerto 21 del servidor FTP conectar\u00e1 a un puerto m\u00e1s grande de 1024 del cliente. (El servidor responde al puerto de control del cliente).</li> <li>Un puerto m\u00e1s grande de 1024 del cliente conectar\u00e1 a un puerto m\u00e1s grande de 1024 del servidor. (El cliente inicia el canal de datos a un puerto aleatorio del servidor).</li> <li>Un puerto m\u00e1s grande de 1024 del servidor conectar\u00e1 a un puerto m\u00e1s grande de 1024 del cliente. (El servidor confirma la conexi\u00f3n al puerto de datos)</li> </ol> <p>En la figura, al paso 1 el cliente contacta con el servidor por el puerto 21 pidiendo una conexi\u00f3n pasiva con la orden PASV. El servidor responde en el paso 2 con un puerto aleatorio, en el ejemplo 1024, pidiendo al cliente qu\u00e9 puerto es el que usar\u00e1 para abrir el canal de datos. En el paso 3 el cliente inicia el canal de datos del puerto de datos del cliente 1027 al puerto que ha abierto el servidor 1024. En el paso 4 el servidor confirma la conexi\u00f3n.</p> <p>Ver otro ejemplo de \"modo pasivo\"</p> <p></p> <p>Con el modo pasivo se resuelven muchos problemas del cliente, pero se ampl\u00edan los problemas del servidor. Uno de los principales problemas es la apertura de un gran rango de puertos en el servidor para poder iniciar canales de datos.</p> <p>Una de las ventajas actualmente es que las implementaciones de servidores FTP permiten escoger el rango de puertos que se usar\u00e1n.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T02/","title":"2. Servidores y clientes FTP","text":"<p>Actualmente hay muchas aplicaciones que implementan el protocolo FTP tanto por el lado del cliente como por el lado del servidor. </p> <p>La decisi\u00f3n de utilizar una aplicaci\u00f3n u otra que implemente el protocolo FTP viene dada por las posibilidades que ofrece y el sistema operativo en uso. En el caso del despliegue de aplicaciones web, cualquier servidor o cliente FTP se ajusta a las necesidades del despliegue web. </p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T02/#servidores-ftp","title":"Servidores FTP","text":"<p>Algunos de los servidores FTP populares en este momento son vsFTPd, ProFTPD, Pure-FTPd, y FileZilla Server, entre otros.  La elecci\u00f3n del servidor FTP adecuado depender\u00e1 de las necesidades espec\u00edficas, como la seguridad, la facilidad de configuraci\u00f3n, la compatibilidad con tu sistema, el soporte de protocolos, y otras consideraciones. </p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T02/#servidor-vsftpd","title":"Servidor vsFTPd","text":"<p>En esta unidad usaremos el servidor FTP llamado vsFTPd (Very Secure FTP Daemon). Es un software utilizado para implementar servidores de archivos a trav\u00e9s del protocolo FTP en sistemas Linux.</p> <p>vsFTPd se distingue principalmente porque sus valores predeterminados son muy seguros y por su sencillez en la configuraci\u00f3n, comparado con otras alternativas como Pure-ftpd, ProFTPD y Wu-ftpd tambi\u00e9n para sistemas Linux.</p> <p>Actualmente se presume que vsFTPd podr\u00eda ser quiz\u00e1 el servidor FTP m\u00e1s seguro del mundo.</p> <p>A continuaci\u00f3n, se enumeran algunas de las caracter\u00edsticas destacadas de vsFTPd:</p> <ul> <li>Seguridad: vsFTPd se enfoca en la seguridad y se esfuerza por ser uno de los servidores FTP m\u00e1s seguros disponibles. Ofrece soporte para FTPS (FTP sobre SSL/TLS) y puede cifrar las comunicaciones entre el cliente y el servidor.</li> <li>Modo Pasivo y Activo: Admite tanto el modo pasivo como el modo activo para las conexiones de transferencia de datos.</li> <li>Aislamiento de Usuarios: Permite el aislamiento de usuarios para que cada usuario acceda a su propio directorio ra\u00edz de forma predeterminada, lo que mejora la seguridad.</li> <li>Control de Acceso y Permisos: Proporciona opciones avanzadas para controlar el acceso de usuarios y administrar permisos en los archivos y directorios.</li> <li>Logging Avanzado: Ofrece un sistema de registro (logging) completo que registra actividades y eventos del servidor para facilitar el seguimiento y la soluci\u00f3n de problemas.</li> <li>Rendimiento: Es conocido por su eficiencia y su bajo consumo de recursos, lo que lo hace adecuado para servidores con una alta carga.</li> <li>Modo An\u00f3nimo: Admite el acceso de usuarios an\u00f3nimos y ofrece opciones de configuraci\u00f3n para controlar qu\u00e9 puede hacer un usuario an\u00f3nimo en el servidor.</li> <li>Reglas de Firewall Integradas: vsFTPd incluye funcionalidades de cortafuegos incorporadas para ayudar a los administradores a configurar reglas de firewall espec\u00edficas.</li> <li>Soporte IPv6: Es compatible con IPv6, lo que facilita la transici\u00f3n a protocolos de red modernos.</li> <li>Funciones Avanzadas de PAM: Utiliza Pluggable Authentication Modules (PAM) para una mayor flexibilidad en la autenticaci\u00f3n de usuarios.</li> <li>Funciones de Virtual Hosting: Permite a un servidor vsFTPd alojar varios sitios web FTP en una sola instancia.</li> <li>Tolerancia a Errores y Recuperaci\u00f3n: Ofrece capacidades de recuperaci\u00f3n y tolerancia a errores para garantizar un servicio FTP continuo.</li> <li>Configuraci\u00f3n Detallada: Proporciona numerosas opciones de configuraci\u00f3n avanzada para personalizar el comportamiento del servidor seg\u00fan las necesidades del administrador.</li> <li>Gran Comunidad de Usuarios: vsFTPd tiene una gran comunidad de usuarios y es ampliamente documentado, lo que facilita la obtenci\u00f3n de soporte y recursos en l\u00ednea.</li> </ul> <p>En resumen, vsFTPd se ha ganado su reputaci\u00f3n como un servidor FTP muy seguro debido a su enfoque en la seguridad y su conjunto de caracter\u00edsticas de seguridad avanzadas. Sin embargo, es importante destacar que la seguridad de un servidor depende no solo del software del servidor en s\u00ed, sino tambi\u00e9n de la configuraci\u00f3n y el mantenimiento adecuados del servidor y de las pr\u00e1cticas de seguridad en todo el entorno en el que opera.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T02/#clientes-ftp","title":"Clientes FTP","text":"<p>Un cliente FTP (File Transfer Protocol) es una aplicaci\u00f3n de software que se utiliza para conectarse a servidores FTP y realizar operaciones de transferencia de archivos entre el cliente y el servidor. Los clientes FTP permiten a los usuarios:</p> <ul> <li>Conexi\u00f3n a Servidores FTP: Los clientes FTP se utilizan para establecer conexiones con servidores FTP a trav\u00e9s de Internet o redes locales.</li> <li>Autenticaci\u00f3n: Los usuarios pueden iniciar sesi\u00f3n en el servidor FTP proporcionando su nombre de usuario y contrase\u00f1a. Algunos clientes FTP tambi\u00e9n admiten autenticaci\u00f3n an\u00f3nima para acceder como usuario an\u00f3nimo si el servidor lo permite.</li> <li>Transferencia de Archivos: Descargar archivos desde el servidor al cliente: Los usuarios pueden descargar archivos o directorios completos del servidor a su propia computadora local. Cargar archivos desde el cliente al servidor: Los usuarios pueden cargar archivos desde su computadora local al servidor FTP para su almacenamiento o distribuci\u00f3n.</li> <li>Navegaci\u00f3n por Directorios: Los clientes FTP permiten a los usuarios navegar por la estructura de directorios en el servidor, lo que les permite acceder a diferentes archivos y carpetas.</li> <li>Renombrar y Eliminar Archivos: Los usuarios pueden renombrar archivos en el servidor, eliminar archivos no deseados y realizar operaciones de administraci\u00f3n de archivos.</li> <li>Gesti\u00f3n de Permisos: Algunos clientes FTP permiten cambiar los permisos de archivos y directorios en el servidor si se tiene el permiso adecuado.</li> <li>Gesti\u00f3n de Sesiones: Los clientes FTP gestionan sesiones de transferencia de archivos, lo que facilita la transferencia de m\u00faltiples archivos de forma eficiente.</li> <li>Seguridad: Los clientes FTP pueden ofrecer funciones de seguridad, como FTPS (FTP sobre SSL/TLS) o SFTP (SSH File Transfer Protocol) para cifrar las comunicaciones entre el cliente y el servidor.</li> <li>Registro de Actividad: Algunos clientes FTP registran las actividades realizadas durante la sesi\u00f3n, lo que facilita la soluci\u00f3n de problemas y la auditor\u00eda.</li> <li>Configuraci\u00f3n de Opciones: Los usuarios pueden configurar diversas opciones, como la gesti\u00f3n de contrase\u00f1as, la elecci\u00f3n entre modos activos y pasivos, y otros ajustes espec\u00edficos del cliente.</li> </ul> <p>En resumen, un cliente FTP es una herramienta que facilita a los usuarios la transferencia de archivos entre la computadora y un servidor FTP. Puede ser \u00fatil en una variedad de escenarios, como la administraci\u00f3n de sitios web, la copia de archivos de respaldo, la distribuci\u00f3n de software y la colaboraci\u00f3n en l\u00ednea. </p> <p>Por defecto la mayor\u00eda de sistemas operativos llevan un cliente FTP gr\u00e1fico o terminal, para poder acceder remotamente a los servidores externos.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T02/#herramientas-graficas","title":"Herramientas gr\u00e1ficas","text":"<p>Existen numerosos clientes FTP gr\u00e1ficos (clientes FTP con interfaces de usuario basadas en ventanas y gr\u00e1ficos) disponibles para diferentes sistemas operativos que facilitan la transferencia de archivos mediante FTP, SFTP y otros protocolos relacionados. A continuaci\u00f3n, te presento una lista de algunos de los clientes FTP gr\u00e1ficos populares para distintas plataformas:</p> <p>Clientes FTP para Windows:</p> <ul> <li>FileZilla: es uno de los clientes FTP m\u00e1s populares y ampliamente utilizados. Ofrece una interfaz f\u00e1cil de usar, es de c\u00f3digo abierto y es compatible con FTP, FTPS y SFTP. Tambi\u00e9n est\u00e1 disponible en MacOS y Linux.</li> <li>WinSCP: es un cliente SFTP y SCP gratuito para Windows. Adem\u00e1s de la transferencia de archivos segura, tambi\u00e9n permite la administraci\u00f3n de archivos en servidores remotos.</li> <li>Core FTP: es un cliente FTP con una interfaz gr\u00e1fica atractiva y muchas caracter\u00edsticas \u00fatiles. Ofrece soporte para FTP, FTPS y SFTP.</li> <li>Cyberduck: Aunque inicialmente se dise\u00f1\u00f3 para macOS, Cyberduck tambi\u00e9n est\u00e1 disponible para Windows. Es un cliente FTP/SFTP de c\u00f3digo abierto con una interfaz f\u00e1cil de usar.</li> </ul> <p>Clientes FTP para macOS:</p> <ul> <li>Cyberduck: es una opci\u00f3n popular tanto para macOS como para Windows. Ofrece una interfaz intuitiva y es compatible con una variedad de protocolos, incluyendo FTP, SFTP, WebDAV y m\u00e1s.</li> <li>Transmit: es un cliente FTP y SFTP exclusivo para macOS con una interfaz pulida. Ofrece caracter\u00edsticas avanzadas y herramientas de administraci\u00f3n de archivos.</li> <li>Fetch: es un cliente FTP para macOS, conocido por su simplicidad y facilidad de uso. Ofrece soporte para FTP, SFTP y FTP con seguridad.</li> </ul> <p>Clientes FTP para Linux:</p> <ul> <li>FileZilla: Aunque se desarroll\u00f3 inicialmente para Windows, tambi\u00e9n est\u00e1 disponible para Linux. Es uno de los clientes FTP m\u00e1s populares y es compatible con FTP, FTPS y SFTP.</li> <li>gFTP: es un cliente FTP de c\u00f3digo abierto para sistemas Linux. Ofrece una interfaz gr\u00e1fica sencilla y soporta FTP, SFTP y HTTP.</li> <li>KDE Konqueror: El navegador de archivos Konqueror en el entorno de escritorio KDE de Linux incluye funciones de cliente FTP. Puedes usarlo para acceder a servidores FTP de manera sencilla.</li> </ul>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T02/#comandos-basicos-ftp","title":"Comandos B\u00e1sicos FTP","text":"<p>Los comandos FTP son instrucciones que un cliente FTP emite al servidor FTP para realizar diversas operaciones, como conectarse al servidor, listar directorios, cargar y descargar archivos, cambiar permisos y m\u00e1s. </p> <p>Si usamos un cliente gr\u00e1fico podemos no necesitar conocerlos, ya que el cliente los usar\u00e1 de forma transparente para nosotros. Pero si usamos una conexi\u00f3n por comando deberemos conocerlos en detalle.</p> <p>Estos son algunos comandos FTP comunes junto con ejemplos de uso:</p> <p>Conexi\u00f3n al Servidor FTP:</p> <ul> <li><code>open</code> o <code>open [hostname]</code>: Establece una conexi\u00f3n con un servidor FTP. Ejemplo: <code>open ftp.example.com</code></li> <li><code>user [nombre de usuario] [contrase\u00f1a]</code>: Inicia sesi\u00f3n en el servidor FTP. Ejemplo: <code>user myuser mypassword</code></li> </ul> <p>Operaciones de Archivos y Directorio:</p> <p>Ver\u00e1s que son igual que los comandos de linux para funciones equivalentes.</p> <ul> <li><code>cd [directorio]</code>: Cambia el directorio en el servidor FTP. Ejemplo: <code>cd public_html</code></li> <li><code>pwd</code>: Muestra el directorio de trabajo actual en el servidor. Ejemplo: <code>pwd</code></li> <li><code>ls</code> o <code>dir</code>: Lista los archivos y directorios en el directorio actual en el servidor. Ejemplo: <code>ls</code></li> <li><code>ls -l [archivo]</code>: Algunos servidores FTP pueden admitir el comando ls -l para mostrar los permisos de un archivo o directorio. Ejemplo: <code>ls -l myfile.txt</code></li> <li><code>chmod [permisos] [archivo]</code>: Cambia los permisos de un archivo en el servidor FTP. Ejemplo: <code>chmod 644 myfile.txt</code></li> <li><code>delete [archivo]</code>: Elimina un archivo en el servidor FTP. Ejemplo: <code>delete unwanted.txt</code></li> <li><code>rmdir [directorio]</code>: Elimina un directorio vac\u00edo en el servidor. Ejemplo: <code>rmdir old_directory</code></li> <li><code>rmd [directorio]</code>: Elimina un directorio y su contenido de forma recursiva en el servidor FTP. No todos los servidores FTP admiten este comando. Ejemplo: <code>rmd old_directory</code></li> <li><code>mkdir [directorio]</code>: Crea un nuevo directorio en el servidor. Ejemplo: <code>mkdir new_directory</code></li> <li><code>rename [nombre original] [nuevo nombre]</code>: Cambia el nombre de un archivo o directorio en el servidor FTP. Ejemplo: <code>rename oldfile.txt newfile.txt</code></li> </ul> <p>Transferencia de Archivos:</p> <ul> <li><code>get [archivo remoto] [archivo local]</code>: Descarga un archivo del servidor FTP al sistema local. Ejemplo: <code>get example.txt</code></li> <li><code>put [archivo local] [archivo remoto]</code>: Carga un archivo desde el sistema local al servidor FTP. Ejemplo: <code>put localfile.txt remotefile.txt</code></li> </ul> <p>Modo Activo y Pasivo:</p> <ul> <li><code>PASV</code>:Este comando es enviado por el cliente al servidor FTP para solicitar que el servidor cambie a modo pasivo y abra un puerto para la conexi\u00f3n de datos.</li> <li><code>PORT</code>: cuando te conectas a un servidor FTP en modo activo, puedes utilizar el comando PORT para especificar el puerto en el cual el cliente estar\u00e1 escuchando para la conexi\u00f3n de datos.</li> </ul> <p>Ayuda y Salida:</p> <ul> <li><code>help</code> o <code>?</code>: Muestra la lista de comandos FTP disponibles. Ejemplo: <code>help</code></li> <li><code>quit</code>: Cierra la sesi\u00f3n FTP y sale del cliente. Ejemplo: <code>quit</code></li> </ul> <p>Hay que tener en cuenta que la disponibilidad de comandos y su sintaxis puede variar seg\u00fan el servidor FTP y la implementaci\u00f3n. </p> <p>Adem\u00e1s, es importante recordar que FTP no es un protocolo seguro, ya que las credenciales y los datos se transmiten sin cifrar. </p> <p>Warning</p> <p>Si se requiere seguridad, se recomienda utilizar FTPS (FTP con SSL/TLS) o SFTP (SSH File Transfer Protocol), que cifran las comunicaciones y proporcionan un nivel adicional de seguridad.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T03/","title":"3. Autenticaci\u00f3n, control de acceso y cuotas.","text":""},{"location":"Ud5%20Servicios%20de%20red%20FTP/T03/#usuarios-y-niveles-de-acceso-al-servicio-ftp","title":"Usuarios y niveles de acceso al servicio ftp","text":"<p>A continuaci\u00f3n veremos los diferentes tipos de usuarios y sus niveles de acceso en el servidor FTP.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T03/#acceso-anonimo-anonymous","title":"Acceso an\u00f3nimo (anonymous)","text":"<p>Los servidores pueden ofrecer servicio libremente a todos los usuarios, acceder sin tener un identificador de usuario, leer y navegar por el contenido de los directorios libremente, indiferentemente de quienes acceden y del lugar donde lo hace.</p> <p>El acceso an\u00f3nimo es una forma c\u00f3moda de permitir que todos los clientes tengan acceso a cierta informaci\u00f3n sin que el administrador del servicio tenga que controlar las cuentas de usuarios.</p> <p>La informaci\u00f3n que se usa en el acceso an\u00f3nimo es de car\u00e1cter p\u00fablico y se pueden leer los contenidos de los directorios pero no eliminarlos ni modificarlos. Normalmente, el contenido suele ser software de dominio p\u00fablico o de libre distribuci\u00f3n, im\u00e1genes, sonido, videos, etc.</p> <p>Ejemplos de servidores p\u00fablicos con acceso an\u00f3nimo: ftp://ftp.rediris.es y ftp://cdimage.ubuntu.com.</p> <p>El requisito para acceder por acceso an\u00f3nimo es mediante un nombre predefinido que existe en el servicio FTP y que tiene que estar configurado previamente.</p> <p>Este usuario que permite el acceso an\u00f3nimo se llama anonymous. Cuando se valida la conexi\u00f3n, el nombre del usuario que ponemos es anonymous, y sin contrase\u00f1a (aunque pida una contrase\u00f1a, no es necesario escribir nada o, si lo pide obligatoriamente, se puede poner cualquier correo electr\u00f3nico como contrase\u00f1a v\u00e1lida).</p> <p>Warning</p> <p>El acceso an\u00f3nimo es un tipo de acceso que es inviable en el caso del despliegue web, donde el control de acceso de los usuarios es importante, puesto que es de car\u00e1cter privado, confidencial y depende tambi\u00e9n nuestra aplicaci\u00f3n web. Permitir un acceso al directorio ra\u00edz de la aplicaci\u00f3n web con un acceso an\u00f3nimo mediante FTP es una falta grave de seguridad y puede tener consecuencias desastrosas.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T03/#acceso-por-usuario-identificado-cuentas","title":"Acceso por usuario identificado (cuentas)","text":"<p>Se da cuando la necesidad de privilegios y la informaci\u00f3n con la cual se trabaja es de \u00edndole privada. Se tiene que acceder al servicio mediante usuarios identificados dentro del servidor FTP, llamadas cuentas.</p> <p>Las cuentas de usuario pueden ser:</p> <ul> <li>Usuario de sistema o autenticado (Local): ser\u00e1 un usuario definido dentro del sistema operativo donde se ofrece el servicio.</li> <li>Usuario virtual: no tiene una relaci\u00f3n directa con el sistema operativo. Utilizar este tipo de usuarios es \u00fatil en entornos donde la seguridad y el control de acceso son una preocupaci\u00f3n, o cuando se necesita una gesti\u00f3n m\u00e1s eficiente de m\u00faltiples cuentas de usuario FTP, ya que este tipo de usuarios proporcionan un nivel adicional de control y seguridad en el acceso al sistema.</li> </ul> <p>Todos estos usuarios tendr\u00e1n configurado una serie de permisos dependiendo de la implicaci\u00f3n que tengan los usuarios, por ejemplo dentro del proyecto web. Os pueden interesar usuarios que solo puedan leer la informaci\u00f3n del proyecto y otros que puedan actualizar los ficheros, todo esto gestionando la jerarqu\u00eda del equipo del proyecto que est\u00e1 haciendo la aplicaci\u00f3n web.</p> <p>De manera resumida podemos ver los usuarios y sus accesos</p> Usuario An\u00f3nimo Autenticado (Local) Virtual Acceso Este tipo de usuario no requiere autenticaci\u00f3n; cualquiera puede acceder de forma an\u00f3nima. Estos usuarios deben autenticarse con un nombre de usuario y contrase\u00f1a v\u00e1lidos en el servidor FTP. Los usuarios virtuales se autentican en el servidor FTP, pero no corresponden a cuentas de usuario reales en el sistema operativo del servidor. Nivel de Acceso Los usuarios an\u00f3nimos suelen tener acceso limitado y solo pueden ver y descargar archivos p\u00fablicos en un directorio espec\u00edfico. No pueden cargar ni modificar archivos en el servidor. Los usuarios autenticados pueden tener diferentes niveles de acceso seg\u00fan la configuraci\u00f3n del servidor. Pueden cargar, descargar y administrar archivos en el servidor, y su acceso se basa en las pol\u00edticas de seguridad y permisos configurados por el administrador. Los usuarios virtuales tienen un acceso limitado y controlado por el administrador del servidor. Pueden tener acceso a directorios espec\u00edficos, y sus permisos se gestionan de manera independiente de las cuentas de usuario del sistema."},{"location":"Ud5%20Servicios%20de%20red%20FTP/T03/#permisos","title":"Permisos","text":"<p>Dentro de un servicio FTP, uno de los pasos importantes es el de conceder permisos determinados para controlar el acceso al servidor o a los diferentes directorios. El protocolo FTP sigue los permisos establecidos en entornos de tipo UNIX y sus similares GNU/Linux.</p> <p>Por otro lado, los permisos tambi\u00e9n son una parte importante de la configuraci\u00f3n del servicio FTP para poder restringir la lectura y escritura a usuarios que entran al sistema desde el exterior, dando siempre los m\u00ednimos permisos a los usuarios y siempre a carpeta concretas para que no puedan acceder a informaci\u00f3n a la que no est\u00e1n autorizados.</p> <p>La configuraci\u00f3n de niveles de acceso y tipos de permisos en un servidor FTP es igual que en un sistema operativo unix/linux.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T03/#nivel-de-acceso","title":"Nivel de acceso","text":"<p>En Linux existen tres niveles de acceso a ficheros y carpetas:</p> <ul> <li>Propietario(user=u): permisos asignados al propietario del archivo o directorio.</li> <li>Grupo(group=g): permisos asignados a los grupos de usuarios.</li> <li>Otros(others=o): permisos asignados a otros usuarios existentes en el sistema operativo que no son ni propietarios ni pertenecen a un grupo.</li> </ul>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T03/#tipos-de-permisos","title":"Tipos de permisos","text":"<p>Cada fichero a su vez puede tener tres permisos:</p> <ul> <li>Lectura (r): se puede ver el contenido, visualizar un fichero o un directorio. </li> <li>Escritura (w): se puede modificar el contenido del archivo o directorio.</li> <li>Ejecuci\u00f3n (x): se puede ejecutar el archivo.</li> <li>La ausencia de permiso es identificada con el car\u00e1cter '-'. </li> </ul> <p>Cada permiso tiene un equivalente num\u00e9rico en el sistema octal, as\u00ed por ejemplo: r=4, w=2, x=1 y -=0. Por ejemplo: rw- identifica permiso de lectura y escritura o lo que es lo mismo 4+2+0=6</p> <p>En un sistema operativo tipo GNU/Linux mediante el comando <code>ls -l</code> puedes ver los permisos asignados a ficheros y directorios.</p> <p>El modo octal relacionado con los permisos es el siguiente:</p> <p></p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T03/#veamos-un-ejemplo","title":"Veamos un ejemplo:","text":"<p>Estos tres permisos se pueden aplicar a los tres niveles anteriores, en la siguiente pantalla se puede ver un ejemplo.</p> <p></p> <p>El primer car\u00e1cter indica el tipo de archivo de la siguiente manera:</p> <ul> <li>d: directorio.</li> <li>gui\u00f3n (-): fichero.</li> <li>l: enlace (link).</li> <li>b: archivo binario.</li> <li>p: archivo especial de tuber\u00eda (pipe).</li> <li>c: archivo de caracteres especiales (por ejemplo una impresora).</li> </ul> <p>El resto son 9 caracteres, indican los permisos en cada uno de los grupos, por ejemplo: rwxr-xr-x en tres grupos.</p> <ul> <li>Primer grupo son los permisos del Propietario (user) del directorio o archivo.</li> <li>Segundo grupo son los permisos del Grupo (group).</li> <li>Tercer grupo son los permisos del resto u Otros (others) usuarios del sistema operativo.</li> <li>Despu\u00e9s aparece un n\u00famero que indica el n\u00famero de enlaces al archivo.</li> <li>La siguiente columna es el nombre de usuario propietario del archivo o directorio.</li> <li>La siguiente es el nombre del grupo al que pertenece el archivo.</li> <li>Las siguientes columnas son el tama\u00f1o y la fecha y hora de la \u00faltima modificaci\u00f3n del archivo o directorio.</li> <li>La \u00faltima columna es el nombre del directorio o archivo.</li> </ul>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T03/#comando-chmod","title":"Comando chmod","text":"<p>Para asignar permisos en Linux se usa el comando chmod que puede modificar los permisos siguientes:</p> <ul> <li>Propietario (u) </li> <li>Grupos (g)</li> <li>Otros (o)</li> </ul> <p>La sintaxis general es:  <code>chmod [opciones] modo-octal fichero</code></p> <p>Por ejemplo, si se quiere asignar permisos de lectura (r) y escritura (w) al fichero prueba1.txt solamente al usuario propietario podemos utilizar cualquiera de los dos comandos siguientes:</p> <ul> <li><code>chmod 600 prueba1.txt</code> </li> <li><code>chmod u+rw prueba1.txt</code></li> </ul>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T03/#comando-chown","title":"Comando chown","text":"<p>Este comando se utiliza para cambiar el propietario del archivo o directorio se usa el comando chown. La sintaxis general es: </p> <p><code>chown [opciones] [usuario] [:grupo] ficheros</code></p> <p>Por ejemplo, si se quiere hacer propietario a usuario1 del fichero prueba.txt el comando a utilizar ser\u00eda: </p> <p><code>chown usuario1 prueba.txt</code></p> <p>Warning</p> <p>Por otro lado en un sistema GNU/Linux, en principio, no todos los usuarios del sistema tienen acceso por ftp, as\u00ed existe un fichero /etc/ftpusers que contiene una lista de usuarios que no tienen permiso de acceso por FTP. Por razones de seguridad al menos los siguientes usuarios deber\u00edan estar listados en este fichero: root, bin, uucp, news. Ten en cuenta que las l\u00edneas en blanco y las l\u00edneas que comiencen por el car\u00e1cter '#' ser\u00e1n ignoradas.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T03/#cuotas","title":"Cuotas","text":"<p>Las cuotas de FTP se refieren a la limitaci\u00f3n de espacio en disco que se impone a los usuarios en un servidor FTP. </p> <p>El establecer cuotas FTP permite realizar un control del recurso y gestionar el uso del espacio en disco y priorizar los recursos a los usuarios, entre otras razones, especialmente en entornos compartidos o en servidores FTP p\u00fablicos.</p> <p>Las cuotas de FTP permiten a los administradores de servidores FTP asignar un l\u00edmite de espacio en disco a cada usuario o grupo de usuarios. Esto puede ser beneficioso por varias razones:</p> <ol> <li>Control de Recursos: Las cuotas evitan que un usuario o grupo utilice todo el espacio en disco disponible, lo que garantiza que haya recursos disponibles para otros usuarios.</li> <li>Gesti\u00f3n de Espacio: Ayudan a mantener organizado y gestionado el espacio en disco del servidor, evitando que se sature y se vuelva inmanejable.</li> <li>Prioridad de Recursos: Las cuotas pueden usarse para dar prioridad a ciertos usuarios o grupos, permiti\u00e9ndoles disponer de m\u00e1s espacio que otros.</li> <li>Seguridad: Limitan el da\u00f1o potencial que un usuario malicioso podr\u00eda causar si tuviera acceso ilimitado al espacio en disco del servidor.</li> <li>Evitar el Abuso: Evitan el abuso del servidor FTP, como la carga excesiva de archivos o la acumulaci\u00f3n de datos innecesarios.</li> </ol> <p>La forma en que se implementan las cuotas de FTP puede variar seg\u00fan el servidor FTP que se utilice. En algunos servidores, las cuotas se configuran en el nivel de usuario, lo que permite asignar un l\u00edmite de espacio en disco individualmente a cada usuario. En otros servidores, las cuotas pueden configurarse en el nivel de grupo, lo que permite definir l\u00edmites de espacio para grupos de usuarios.</p> <p>Las cuotas generales del servidor permiten configurar:</p> <ul> <li>Restringir la velocidad de subida y de descarga dentro del servidor FTP.</li> <li>Restringir el m\u00e1ximo de espacio de almacenamiento de un fichero al servidor FTP.</li> <li>Restringir el m\u00e1ximo de la medida del fichero que podemos descargar del servidor.</li> </ul> <p>Las cuotas de usuario o grupos de trabajo permiten:</p> <ul> <li>Restringir la velocidad de subida y de descarga del usuario o el grupo de trabajo.</li> <li>Restringir el m\u00e1ximo de espacio de almacenamiento de un fichero por parte del usuario o del grupo de trabajo.</li> <li>Restringir el m\u00e1ximo de la medida del fichero que puede descargar el usuario o el grupo de trabajo.</li> <li>Restringir de espacio propio para almacenar datos en el directorio de configuraci\u00f3n del usuario o del grupo de trabajo.</li> </ul> <p>Es importante se\u00f1alar que las cuotas de FTP no son una caracter\u00edstica est\u00e1ndar de FTP en s\u00ed mismo, sino una funcionalidad adicional proporcionada por el servidor FTP que se est\u00e9 utilizando. Si desamos configurar cuotas de FTP en el servidor, tendremos que consultar la documentaci\u00f3n espec\u00edfica del servidor FTP o las opciones de configuraci\u00f3n para conocer los detalles sobre c\u00f3mo implementarlas.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T04/","title":"4. Protocolo de transferencia de ficheros seguro","text":"<p>Cuando se redact\u00f3 el protocolo FTP dentro de la RFC 959 la seguridad no era un tema cr\u00edtico. Con la evoluci\u00f3n de las redes y la transferencia masiva de datos dentro de las redes p\u00fablicas, ha cambiado mucho respecto a las ideas originales en los a\u00f1os 70 y 80. Esta evoluci\u00f3n hace que enviar datos sin encriptar sea muy arriesgado y que protocolos antiguos tengan que evolucionar para garantizar que la remisi\u00f3n de datos sea segura.</p> <p>Con la evoluci\u00f3n de las redes, el protocolo FTP hizo que se originar\u00e1n nuevas revisiones para paliar las deficiencias de seguridad y en 1997 se redact\u00f3 la actualizaci\u00f3n del protocolo FTP que da como resultado el SFTP.</p> <p>Los autores de la RFC listaron en 1999 las diferentes vulnerabilidades FTP:</p> <ul> <li>Ataques Spoofing</li> <li>Ataques de fuerza bruta</li> <li>Ataques rebote (bounce attacks)</li> <li>Captura de paquetes (sniffing)</li> <li>Robo de puertos (puerto stealing)</li> <li>Claves de usuario y datos no cifrados</li> </ul> <p>Las soluciones a estas vulnerabilidades son:</p> <ul> <li>FTPS (cifrado SSL/TLS entre Cliente y Servidor)</li> <li>SFTP (SSH File Transfer Protocol)</li> </ul>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T04/#ftps-cifrado-ssltls-entre-cliente-y-servidor","title":"FTPS (cifrado SSL/TLS entre Cliente y Servidor)","text":"<p>FTPS (File Transfer Protocol Secure) es un protocolo de transferencia de archivos que agrega una capa de seguridad a FTP (File Transfer Protocol) mediante el uso de SSL/TLS (Secure Sockets Layer/Transport Layer Security) para cifrar las comunicaciones entre el cliente y el servidor. El objetivo principal de FTPS es proporcionar una transferencia de archivos segura y proteger la confidencialidad y la integridad de los datos durante la transferencia.</p> <p>Si hacemos una analog\u00eda con la transferencia de p\u00e1ginas web podemos decir que FTPS es a FTP lo que HTTPS es a HTTP. Dicho de otra forma, si recordamos del tema de servidores web, para la trasferencia de p\u00e1ginas web en modo seguro se desarroll\u00f3 HTTPS. Para transferir p\u00e1ginas por https, el servidor debe tener un certificado instalado y, cuando el cliente pide una p\u00e1gina por https, el servidor le env\u00eda un certificado que contiene su clave p\u00fablica. El cliente genera una clave sim\u00e9trica, que cifra con la p\u00fablica del servidor y se la env\u00eda. El servidor la desencripta con su clave privada y a partir de ah\u00ed intercambian la informaci\u00f3n de forma encriptada usando la clave aleatoria que ambos conocen.</p> <p></p> <p>Pues en FTPS es similar. El servidor debe tener un par de claves p\u00fablica privada y el establecimiento del canal es similar al visto anteriormente. Por tanto, para poder usar FTPS, vemos claramente que el servidor deber\u00e1 tener el par de claves y habr\u00e1 que configurarlo para que soporte este tipo de conexi\u00f3n.</p> <p>Hay dos modos de trabajo con FTPS :</p> <ul> <li> <p>FTPS Expl\u00edcito (FTPES): En este modo, la seguridad SSL/TLS se inicia despu\u00e9s de que el cliente se conecta al servidor y emite un comando espec\u00edfico (por ejemplo, AUTH TLS o AUTH SSL) para solicitar una conexi\u00f3n segura. Por tanto la primera conexi\u00f3n del cliente al servidor es por el puerto habitual de comandos de FTP, el 21.</p> </li> <li> <p>FTPS Impl\u00edcito (FTPIS): En este modo, la seguridad SSL/TLS se establece autom\u00e1ticamente cuando el cliente se conecta al servidor en un puerto espec\u00edfico (generalmente el puerto 990 para FTPS impl\u00edcito).</p> </li> </ul> <p>Atenci\u00f3n</p> <p>La mayor\u00eda de las conexiones FTPS utilizan el \"Modo Pasivo\" por seguridad. As\u00ed que al configurar un servidor FTPS deber\u00e1s configurar los puertos que se usar\u00e1n en el modo pasivo y abrir esos puertos en el firewall. Al realizar una conexi\u00f3n a un servidor por FTPS selecciona \"Modo pasivo\"</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T04/#sftp-ssh-file-transfer-protocol","title":"SFTP (SSH File Transfer Protocol)","text":"<p>Hay otro tipo de servicio seguro con FTP denominado SFTP.</p> <p>SFTP suele ser confundido con el servicio FTPS y viceversa, y realmente no tienen nada que ver mutuamente. Excepto por la seguridad en la remisi\u00f3n de ficheros, el procedimiento interno es diferente. SFTP est\u00e1 basado en SSH (secure shell), protocolo conocido para proveer seguridad a los terminales remotos.</p> <p>No hace uso de canales de \u00f3rdenes y de datos. Los dos canales que usamos en SFTP se env\u00edan en paquetes con formato dentro de un mismo canal, es decir, el canal de datos y de \u00f3rdenes es \u00fanico.  Por lo general, SFTP utiliza el puerto 22, que es el puerto predeterminado para las conexiones SSH. Sin embargo, este puerto puede configurarse de manera diferente si es necesario.</p> <p>Todos los datos enviados y recibidos son encriptados mediante un algoritmo de encriptaci\u00f3n previamente acordado. Las sesiones est\u00e1n protegidas mediante claves p\u00fablicas y privadas, que ofrecen un sistema de autenticaci\u00f3n conocido como autenticaci\u00f3n de clave p\u00fablica que se puede usar como alternativa o uni\u00f3n de los sistemas de autenticaci\u00f3n tradicionales de nombres de usuario y contrase\u00f1as.</p> <p>Dicho de otro modo, al establecer una conexi\u00f3n por SFTP, primero se establecer\u00e1 un canal SSH entre el cliente y el servidor, igual que en una conexi\u00f3n de consola, y una vez establecida todo en intercambio de mensajes de control y datos entre el cliente y el servidor ftp se realiza dentro de ese canal encriptado, normalmente el puerto 22.</p> <p></p> <p>Por tanto, deberemos haber configurado en el servidor SSH con la clave p\u00fablica del usuario que se va a conectar con la clave privada, exactamente igual que hicimos en la pr\u00e1ctica \"P0.3. Conceder acceso a un segundo administrador\". F\u00edjate que no hablamos del servidor ftp, sino del servidor ssh. En este caso el servidor ftp no necesita de ninguna configuraci\u00f3n adicional; no necesita generar claves p\u00fablica y privadas propias, ya que la encriptaci\u00f3n se realiza usando las claves p\u00fablica/privada de cada usuario por parte del servidor ssh.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T05/","title":"5. Utilizaci\u00f3n del servicio de transferencia de ficheros en el proceso de despliegue de la aplicaci\u00f3n web","text":"<p>El servicio de transferencia de archivos, como FTP (File Transfer Protocol) o SFTP (SSH File Transfer Protocol), desempe\u00f1a un papel importante en el proceso de despliegue de una aplicaci\u00f3n web. A continuaci\u00f3n, se detallan algunos escenarios en los que se utiliza el servicio de transferencia de archivos en el despliegue de aplicaciones web:</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T05/#transferencia-de-archivos-al-servidor-web","title":"Transferencia de archivos al servidor web:","text":"<p>Para desplegar una aplicaci\u00f3n web, es necesario transferir archivos, como archivos HTML, CSS, JavaScript, im\u00e1genes y otros recursos, desde el entorno de desarrollo o el sistema local al servidor web en el que se ejecutar\u00e1 la aplicaci\u00f3n. Las conexiones FTP o SFTP son comunes para cargar estos archivos en el servidor.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T05/#actualizaciones-y-parches","title":"Actualizaciones y parches:","text":"<p>Durante la vida \u00fatil de una aplicaci\u00f3n web, es probable que se requieran actualizaciones peri\u00f3dicas, correcciones de errores y parches de seguridad. El servicio de transferencia de archivos se utiliza para enviar estas actualizaciones y parches al servidor web sin interrumpir el funcionamiento del sitio.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T05/#gestion-de-contenido","title":"Gesti\u00f3n de contenido:","text":"<p>En sistemas de gesti\u00f3n de contenido (CMS) y sitios web din\u00e1micos, la transferencia de archivos es esencial para cargar contenido nuevo o actualizar contenido existente. Los administradores del sitio web suelen utilizar FTP o SFTP para cargar y gestionar archivos, bases de datos y recursos multimedia.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T05/#copia-de-seguridad-y-restauracion","title":"Copia de seguridad y restauraci\u00f3n:","text":"<p>Las copias de seguridad regulares son una parte fundamental de la gesti\u00f3n de aplicaciones web. Los servicios de transferencia de archivos facilitan la copia de seguridad de archivos y bases de datos cr\u00edticos y permiten la restauraci\u00f3n de un sitio en caso de problemas.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T05/#automatizacion-de-despliegues","title":"Automatizaci\u00f3n de despliegues:","text":"<p>En entornos de desarrollo y despliegue continuo (CI/CD), se pueden usar herramientas de automatizaci\u00f3n para desplegar autom\u00e1ticamente aplicaciones web. Estas herramientas pueden utilizar protocolos de transferencia de archivos para enviar nuevas versiones de la aplicaci\u00f3n al servidor de producci\u00f3n.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T05/#carga-de-recursos-de-terceros","title":"Carga de recursos de terceros:","text":"<p>Algunas aplicaciones web utilizan recursos externos, como bibliotecas JavaScript, fuentes, im\u00e1genes, etc. Estos recursos a menudo se almacenan en servidores externos y se acceden a trav\u00e9s de FTP o SFTP.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T05/#actualizaciones-de-plugins-o-extensiones","title":"Actualizaciones de plugins o extensiones:","text":"<p>Si una aplicaci\u00f3n web utiliza plugins, extensiones o m\u00f3dulos adicionales, las actualizaciones de estos componentes a menudo se entregan mediante transferencias de archivos.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T05/#configuracion-y-archivos-de-servidor","title":"Configuraci\u00f3n y archivos de servidor:","text":"<p>Los archivos de configuraci\u00f3n del servidor web, como archivos de configuraci\u00f3n de Apache o NGINX, tambi\u00e9n se pueden actualizar y transferir mediante servicios de transferencia de archivos.</p> <p>Al utilizar servicios de transferencia de archivos en el proceso de despliegue de una aplicaci\u00f3n web, es fundamental garantizar la seguridad de las conexiones y proteger los datos transmitidos. SFTP (SSH File Transfer Protocol) es una opci\u00f3n m\u00e1s segura en comparaci\u00f3n con FTP, ya que cifra la transferencia de datos y autentica a los usuarios de manera m\u00e1s s\u00f3lida. Tambi\u00e9n es importante seguir pr\u00e1cticas de seguridad, como limitar los permisos de acceso y realizar copias de seguridad antes de cualquier despliegue o actualizaci\u00f3n.</p>"},{"location":"Ud5%20Servicios%20de%20red%20FTP/T05/#utilizacion-del-servicio-de-transferencia-de-ficheros-desde-el-navegador-web","title":"Utilizaci\u00f3n del servicio de transferencia de ficheros desde el navegador web.","text":"<p>El servicio de transferencia de archivos desde el navegador web se refiere a la capacidad de cargar y descargar archivos directamente desde un navegador web sin la necesidad de utilizar un cliente FTP u otras herramientas de transferencia de archivos externas. Esto es posible gracias a las tecnolog\u00edas web y los protocolos que permiten la transferencia de archivos a trav\u00e9s de una interfaz web. </p> <p>Este servicio es especialmente \u00fatil para sitios web que ofrecen compartir archivos, como plataformas de almacenamiento en la nube, servicios de intercambio de archivos y sitios de transferencia de archivos temporales.</p> <p>En resumen, el servicio de transferencia de archivos desde el navegador web proporciona una forma conveniente y segura de gestionar tus archivos y compartirlos con otros usuarios a trav\u00e9s de una interfaz web intuitiva, eliminando la necesidad de herramientas de transferencia de archivos externas.</p>"}]}